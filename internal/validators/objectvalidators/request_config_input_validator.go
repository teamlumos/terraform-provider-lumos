// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package objectvalidators

import (
	"fmt"
	"context"
    "github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	tfTypes "github.com/teamlumos/terraform-provider-lumos/internal/provider/types"
)

var _ validator.Object = ObjectRequestConfigInputValidatorValidator{}

type ObjectRequestConfigInputValidatorValidator struct{}

// Description describes the validation in plain text formatting.
func (v ObjectRequestConfigInputValidatorValidator) Description(_ context.Context) string {
	return "TODO: add validator description"
}

// MarkdownDescription describes the validation in Markdown formatting.
func (v ObjectRequestConfigInputValidatorValidator) MarkdownDescription(ctx context.Context) string {
	return v.Description(ctx)
}

// Validate performs the validation.
func (v ObjectRequestConfigInputValidatorValidator) ValidateObject(ctx context.Context, req validator.ObjectRequest, resp *validator.ObjectResponse) {
	requestConfig := tfTypes.RequestablePermissionInputRequestConfig{}
	req.ConfigValue.As(ctx, &requestConfig, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})

	// Check values
	if requestConfig.RequestApprovalConfig.RequestApprovalConfigOverride.ValueBool() == false && (requestConfig.RequestApprovalConfig.Approvers != nil || requestConfig.RequestApprovalConfig.ManagerApproval != nil || requestConfig.RequestApprovalConfig.ApproversStage2 != nil) {
		resp.Diagnostics.AddAttributeError(
            req.Path,
            "Invalid request approval config",
            fmt.Sprintf("Request approval config override is false but approvers are populated"),
        )
	}

	if requestConfig.AllowedGroupsOverride.ValueBool() == false && requestConfig.AllowedGroups != nil {
		resp.Diagnostics.AddAttributeError(
			req.Path,
			"Invalid allowed groups",
			fmt.Sprintf("Allowed groups override is false but allowed groups are populated"),
		)
	}

	if requestConfig.RequestApprovalConfig.RequestApprovalConfigOverride.ValueBool() == false && (requestConfig.RequestApprovalConfig.Approvers != nil || requestConfig.RequestApprovalConfig.ApproversStage2 != nil) {
		resp.Diagnostics.AddAttributeError(
			req.Path,
			"Invalid allowed approvers",
			fmt.Sprintf("Approval config override is false but approvers are populated"),
		)
	}

	if requestConfig.RequestFulfillmentConfig.TimeBasedAccessOverride.ValueBool() == false && requestConfig.RequestFulfillmentConfig.TimeBasedAccess != nil {
		resp.Diagnostics.AddAttributeError(
			req.Path,
			"Invalid time based access",
			fmt.Sprintf("Time based access override is false but time based access is populated"),
		)
	}

	if requestConfig.RequestApprovalConfig.CustomApprovalMessageOverride.ValueBool() == false && requestConfig.RequestApprovalConfig.CustomApprovalMessage != nil {
		resp.Diagnostics.AddAttributeError(
			req.Path,
			"Invalid custom approval message",
			fmt.Sprintf("Custom approval message override is false but custom approval message is populated"),
		)
	}

}

func RequestConfigInputValidator() validator.Object {
	return ObjectRequestConfigInputValidatorValidator{}
}
