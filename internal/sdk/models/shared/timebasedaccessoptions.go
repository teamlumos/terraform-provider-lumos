// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TimeBasedAccessOptions - An enumeration.
type TimeBasedAccessOptions string

const (
	TimeBasedAccessOptionsTwoHours     TimeBasedAccessOptions = "2 hours"
	TimeBasedAccessOptionsFourHours    TimeBasedAccessOptions = "4 hours"
	TimeBasedAccessOptionsTwelveHours  TimeBasedAccessOptions = "12 hours"
	TimeBasedAccessOptionsSevenDays    TimeBasedAccessOptions = "7 days"
	TimeBasedAccessOptionsFourteenDays TimeBasedAccessOptions = "14 days"
	TimeBasedAccessOptionsThirtyDays   TimeBasedAccessOptions = "30 days"
	TimeBasedAccessOptionsNinetyDays   TimeBasedAccessOptions = "90 days"
	TimeBasedAccessOptionsUnlimited    TimeBasedAccessOptions = "Unlimited"
)

func (e TimeBasedAccessOptions) ToPointer() *TimeBasedAccessOptions {
	return &e
}
func (e *TimeBasedAccessOptions) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2 hours":
		fallthrough
	case "4 hours":
		fallthrough
	case "12 hours":
		fallthrough
	case "7 days":
		fallthrough
	case "14 days":
		fallthrough
	case "30 days":
		fallthrough
	case "90 days":
		fallthrough
	case "Unlimited":
		*e = TimeBasedAccessOptions(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TimeBasedAccessOptions: %v", v)
	}
}
