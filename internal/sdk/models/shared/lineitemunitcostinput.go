// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"errors"
	"fmt"
	"github.com/teamlumos/terraform-provider-lumos/internal/sdk/internal/utils"
)

type LineItemUnitCostInputValueType string

const (
	LineItemUnitCostInputValueTypeNumber LineItemUnitCostInputValueType = "number"
	LineItemUnitCostInputValueTypeStr    LineItemUnitCostInputValueType = "str"
)

// LineItemUnitCostInputValue - The cost in terms of the specified currency (4 decimal places supported)
type LineItemUnitCostInputValue struct {
	Number *float64
	Str    *string

	Type LineItemUnitCostInputValueType
}

func CreateLineItemUnitCostInputValueNumber(number float64) LineItemUnitCostInputValue {
	typ := LineItemUnitCostInputValueTypeNumber

	return LineItemUnitCostInputValue{
		Number: &number,
		Type:   typ,
	}
}

func CreateLineItemUnitCostInputValueStr(str string) LineItemUnitCostInputValue {
	typ := LineItemUnitCostInputValueTypeStr

	return LineItemUnitCostInputValue{
		Str:  &str,
		Type: typ,
	}
}

func (u *LineItemUnitCostInputValue) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = LineItemUnitCostInputValueTypeNumber
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = LineItemUnitCostInputValueTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for LineItemUnitCostInputValue", string(data))
}

func (u LineItemUnitCostInputValue) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type LineItemUnitCostInputValue: all fields are null")
}

type LineItemUnitCostInput struct {
	// The period which this cost covers. Available options are per_month or per_year
	Period string `json:"period"`
	// The cost in terms of the specified currency (4 decimal places supported)
	Value LineItemUnitCostInputValue `json:"value"`
}

func (o *LineItemUnitCostInput) GetPeriod() string {
	if o == nil {
		return ""
	}
	return o.Period
}

func (o *LineItemUnitCostInput) GetValue() LineItemUnitCostInputValue {
	if o == nil {
		return LineItemUnitCostInputValue{}
	}
	return o.Value
}
