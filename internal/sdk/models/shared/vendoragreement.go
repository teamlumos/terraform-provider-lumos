// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/teamlumos/terraform-provider-lumos/internal/sdk/internal/utils"
	"github.com/teamlumos/terraform-provider-lumos/internal/sdk/types"
)

// TotalContractCost - The total cost of the current service term, including all line items and true ups, and including future years for multi-year agreements.
type TotalContractCost struct {
	// The currency in which this cost is stored
	Currency *string `json:"currency,omitempty"`
	// The quantity of the cost in terms of the specified currency
	Value int64 `json:"value"`
}

func (o *TotalContractCost) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *TotalContractCost) GetValue() int64 {
	if o == nil {
		return 0
	}
	return o.Value
}

// VendorAgreementVendor - The vendor in which the agreement is created for
type VendorAgreementVendor struct {
	// A user friendly name for the vendor
	Name string `json:"name"`
}

func (o *VendorAgreementVendor) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type VendorAgreement struct {
	// The end of the current term
	EndDate types.Date `json:"end_date"`
	// A unique identifier for this Vendor Agreement
	ID string `json:"id"`
	// The list of currently active line items for this Vendor Agreement. If there are no currently active line items, the most recent set of line items is returned.
	LineItems []LineItem `json:"line_items"`
	// The date by which the vendor must be notified if you want to terminate the agreement
	OptOutDate types.Date `json:"opt_out_date"`
	// The start of the current term
	StartDate types.Date `json:"start_date"`
	// The total cost of the current service term, including all line items and true ups, and including future years for multi-year agreements.
	TotalContractCost TotalContractCost `json:"total_contract_cost"`
	// The vendor in which the agreement is created for
	Vendor VendorAgreementVendor `json:"vendor"`
}

func (v VendorAgreement) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(v, "", false)
}

func (v *VendorAgreement) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &v, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *VendorAgreement) GetEndDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.EndDate
}

func (o *VendorAgreement) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *VendorAgreement) GetLineItems() []LineItem {
	if o == nil {
		return []LineItem{}
	}
	return o.LineItems
}

func (o *VendorAgreement) GetOptOutDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.OptOutDate
}

func (o *VendorAgreement) GetStartDate() types.Date {
	if o == nil {
		return types.Date{}
	}
	return o.StartDate
}

func (o *VendorAgreement) GetTotalContractCost() TotalContractCost {
	if o == nil {
		return TotalContractCost{}
	}
	return o.TotalContractCost
}

func (o *VendorAgreement) GetVendor() VendorAgreementVendor {
	if o == nil {
		return VendorAgreementVendor{}
	}
	return o.Vendor
}
