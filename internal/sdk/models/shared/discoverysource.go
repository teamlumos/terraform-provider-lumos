// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DiscoverySource string

const (
	DiscoverySourceGsuiteQuickInbox   DiscoverySource = "GSUITE_QUICK_INBOX"
	DiscoverySourceGsuiteDeepInbox    DiscoverySource = "GSUITE_DEEP_INBOX"
	DiscoverySourceMicrosoftDeepInbox DiscoverySource = "MICROSOFT_DEEP_INBOX"
	DiscoverySourceMicrosoftOauth     DiscoverySource = "MICROSOFT_OAUTH"
	DiscoverySourceMicrosoftGcc       DiscoverySource = "MICROSOFT_GCC"
	DiscoverySourceGsuiteOauth        DiscoverySource = "GSUITE_OAUTH"
	DiscoverySourceOkta               DiscoverySource = "OKTA"
	DiscoverySourceManual             DiscoverySource = "MANUAL"
	DiscoverySourceOnelogin           DiscoverySource = "ONELOGIN"
	DiscoverySourceAtlassian          DiscoverySource = "ATLASSIAN"
	DiscoverySourceGoogleCloud        DiscoverySource = "GOOGLE_CLOUD"
	DiscoverySourceLumosIntegration   DiscoverySource = "LUMOS_INTEGRATION"
	DiscoverySourceJumpcloud          DiscoverySource = "JUMPCLOUD"
)

func (e DiscoverySource) ToPointer() *DiscoverySource {
	return &e
}
func (e *DiscoverySource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GSUITE_QUICK_INBOX":
		fallthrough
	case "GSUITE_DEEP_INBOX":
		fallthrough
	case "MICROSOFT_DEEP_INBOX":
		fallthrough
	case "MICROSOFT_OAUTH":
		fallthrough
	case "MICROSOFT_GCC":
		fallthrough
	case "GSUITE_OAUTH":
		fallthrough
	case "OKTA":
		fallthrough
	case "MANUAL":
		fallthrough
	case "ONELOGIN":
		fallthrough
	case "ATLASSIAN":
		fallthrough
	case "GOOGLE_CLOUD":
		fallthrough
	case "LUMOS_INTEGRATION":
		fallthrough
	case "JUMPCLOUD":
		*e = DiscoverySource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DiscoverySource: %v", v)
	}
}
