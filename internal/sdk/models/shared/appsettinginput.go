// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/teamlumos/terraform-provider-lumos/internal/sdk/internal/utils"
)

// AppSettingInputAllowedGroupsConfigType - The type of this allowed groups config, can be all groups or specific.
type AppSettingInputAllowedGroupsConfigType string

const (
	AppSettingInputAllowedGroupsConfigTypeAllGroups       AppSettingInputAllowedGroupsConfigType = "ALL_GROUPS"
	AppSettingInputAllowedGroupsConfigTypeSpecifiedGroups AppSettingInputAllowedGroupsConfigType = "SPECIFIED_GROUPS"
)

func (e AppSettingInputAllowedGroupsConfigType) ToPointer() *AppSettingInputAllowedGroupsConfigType {
	return &e
}
func (e *AppSettingInputAllowedGroupsConfigType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALL_GROUPS":
		fallthrough
	case "SPECIFIED_GROUPS":
		*e = AppSettingInputAllowedGroupsConfigType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AppSettingInputAllowedGroupsConfigType: %v", v)
	}
}

// AppSettingInputAllowedGroups - The allowed groups associated with this config.
type AppSettingInputAllowedGroups struct {
	// The type of this allowed groups config, can be all groups or specific.
	Type *AppSettingInputAllowedGroupsConfigType `default:"ALL_GROUPS" json:"type"`
	// The groups associated with this config.
	Groups []BaseGroup `json:"groups,omitempty"`
}

func (a AppSettingInputAllowedGroups) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AppSettingInputAllowedGroups) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AppSettingInputAllowedGroups) GetType() *AppSettingInputAllowedGroupsConfigType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AppSettingInputAllowedGroups) GetGroups() []BaseGroup {
	if o == nil {
		return nil
	}
	return o.Groups
}

// AppSettingInputApprovers - AppStore App approvers assigned.
type AppSettingInputApprovers struct {
	// Groups assigned as support request approvers.
	Groups []BaseGroup `json:"groups,omitempty"`
	// Users assigned as support request approvers.
	Users []BaseUser `json:"users,omitempty"`
}

func (o *AppSettingInputApprovers) GetGroups() []BaseGroup {
	if o == nil {
		return nil
	}
	return o.Groups
}

func (o *AppSettingInputApprovers) GetUsers() []BaseUser {
	if o == nil {
		return nil
	}
	return o.Users
}

// AppSettingInputApproversStage2 - AppStore App stage 2 approvers assigned.
type AppSettingInputApproversStage2 struct {
	// Groups assigned as support request approvers.
	Groups []BaseGroup `json:"groups,omitempty"`
	// Users assigned as support request approvers.
	Users []BaseUser `json:"users,omitempty"`
}

func (o *AppSettingInputApproversStage2) GetGroups() []BaseGroup {
	if o == nil {
		return nil
	}
	return o.Groups
}

func (o *AppSettingInputApproversStage2) GetUsers() []BaseUser {
	if o == nil {
		return nil
	}
	return o.Users
}

// AppSettingInputAdmins - AppStore App admins assigned.
type AppSettingInputAdmins struct {
	// Groups assigned as app admins.
	Groups []BaseGroup `json:"groups,omitempty"`
	// Users assigned as app admins.
	Users []BaseUser `json:"users,omitempty"`
}

func (o *AppSettingInputAdmins) GetGroups() []BaseGroup {
	if o == nil {
		return nil
	}
	return o.Groups
}

func (o *AppSettingInputAdmins) GetUsers() []BaseUser {
	if o == nil {
		return nil
	}
	return o.Users
}

// AppSettingInputRequestValidationInlineWebhook - A request validation webhook can be optionally associated with this app.
type AppSettingInputRequestValidationInlineWebhook struct {
	// The ID of this inline webhook.
	ID string `json:"id"`
}

func (o *AppSettingInputRequestValidationInlineWebhook) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// AppSettingInputRequestFlow - Request flow configuration to request access to app.
type AppSettingInputRequestFlow struct {
	// AppStore App visibility.
	Discoverability *AppStoreVisibility `json:"discoverability,omitempty"`
	// During the approval step, send a custom message to requesters. Markdown for links and text formatting is supported.
	CustomApprovalMessage *string `json:"custom_approval_message,omitempty"`
	// When a user makes an access request, require that their manager approves the request before moving on to additional approvals.
	RequireManagerApproval *bool `json:"require_manager_approval,omitempty"`
	// Only turn on when working with sensitive permissions to ensure a smooth employee experience.
	RequireAdditionalApproval *bool `json:"require_additional_approval,omitempty"`
	// The allowed groups associated with this config.
	AllowedGroups *AppSettingInputAllowedGroups `json:"allowed_groups,omitempty"`
	// AppStore App approvers assigned.
	Approvers *AppSettingInputApprovers `json:"approvers,omitempty"`
	// AppStore App stage 2 approvers assigned.
	ApproversStage2 *AppSettingInputApproversStage2 `json:"approvers_stage_2,omitempty"`
	// AppStore App admins assigned.
	Admins *AppSettingInputAdmins `json:"admins,omitempty"`
	// A request validation webhook can be optionally associated with this app.
	RequestValidationInlineWebhook *AppSettingInputRequestValidationInlineWebhook `json:"request_validation_inline_webhook,omitempty"`
}

func (o *AppSettingInputRequestFlow) GetDiscoverability() *AppStoreVisibility {
	if o == nil {
		return nil
	}
	return o.Discoverability
}

func (o *AppSettingInputRequestFlow) GetCustomApprovalMessage() *string {
	if o == nil {
		return nil
	}
	return o.CustomApprovalMessage
}

func (o *AppSettingInputRequestFlow) GetRequireManagerApproval() *bool {
	if o == nil {
		return nil
	}
	return o.RequireManagerApproval
}

func (o *AppSettingInputRequestFlow) GetRequireAdditionalApproval() *bool {
	if o == nil {
		return nil
	}
	return o.RequireAdditionalApproval
}

func (o *AppSettingInputRequestFlow) GetAllowedGroups() *AppSettingInputAllowedGroups {
	if o == nil {
		return nil
	}
	return o.AllowedGroups
}

func (o *AppSettingInputRequestFlow) GetApprovers() *AppSettingInputApprovers {
	if o == nil {
		return nil
	}
	return o.Approvers
}

func (o *AppSettingInputRequestFlow) GetApproversStage2() *AppSettingInputApproversStage2 {
	if o == nil {
		return nil
	}
	return o.ApproversStage2
}

func (o *AppSettingInputRequestFlow) GetAdmins() *AppSettingInputAdmins {
	if o == nil {
		return nil
	}
	return o.Admins
}

func (o *AppSettingInputRequestFlow) GetRequestValidationInlineWebhook() *AppSettingInputRequestValidationInlineWebhook {
	if o == nil {
		return nil
	}
	return o.RequestValidationInlineWebhook
}

// AppSettingInputProvisioningWebhook - The provisioning webhook optionally associated with this app.
type AppSettingInputProvisioningWebhook struct {
	// The ID of this inline webhook.
	ID string `json:"id"`
}

func (o *AppSettingInputProvisioningWebhook) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// AppSettingInputAccessRemovalInlineWebhook - An inactivity workflow can be optionally associated with this app.
type AppSettingInputAccessRemovalInlineWebhook struct {
	// The ID of this inline webhook.
	ID string `json:"id"`
}

func (o *AppSettingInputAccessRemovalInlineWebhook) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// AppSettingInputProvisioning - Provisioning flow configuration to request access to app.
type AppSettingInputProvisioning struct {
	// If enabled, Approvers must choose a group to provision the user to for access requests.
	GroupsProvisioning *GroupProvisioningOption `json:"groups_provisioning,omitempty"`
	// If enabled, users can request an app for a selected duration. After expiry, Lumos will automatically remove user's access.
	TimeBasedAccess []TimeBasedAccessOptions `json:"time_based_access,omitempty"`
	// Whether the app is configured to allow users to request multiple permissions in a single request
	AllowMultiplePermissionSelection *bool `json:"allow_multiple_permission_selection,omitempty"`
	// If enabled, Lumos will reach out to the App Admin after initial access is granted to perform additional manual steps. Note that if this option is enabled, this action must be confirmed by the App Admin in order to resolve the request.
	ManualStepsNeeded *bool `json:"manual_steps_needed,omitempty"`
	// Only Available if manual steps is active. During the provisioning step, send a custom message to app admins explaining how to provision a user to the app. Markdown for links and text formatting is supported.
	CustomProvisioningInstructions *string `json:"custom_provisioning_instructions,omitempty"`
	// The provisioning webhook optionally associated with this app.
	ProvisioningWebhook *AppSettingInputProvisioningWebhook `json:"provisioning_webhook,omitempty"`
	// An inactivity workflow can be optionally associated with this app.
	AccessRemovalInlineWebhook *AppSettingInputAccessRemovalInlineWebhook `json:"access_removal_inline_webhook,omitempty"`
}

func (o *AppSettingInputProvisioning) GetGroupsProvisioning() *GroupProvisioningOption {
	if o == nil {
		return nil
	}
	return o.GroupsProvisioning
}

func (o *AppSettingInputProvisioning) GetTimeBasedAccess() []TimeBasedAccessOptions {
	if o == nil {
		return nil
	}
	return o.TimeBasedAccess
}

func (o *AppSettingInputProvisioning) GetAllowMultiplePermissionSelection() *bool {
	if o == nil {
		return nil
	}
	return o.AllowMultiplePermissionSelection
}

func (o *AppSettingInputProvisioning) GetManualStepsNeeded() *bool {
	if o == nil {
		return nil
	}
	return o.ManualStepsNeeded
}

func (o *AppSettingInputProvisioning) GetCustomProvisioningInstructions() *string {
	if o == nil {
		return nil
	}
	return o.CustomProvisioningInstructions
}

func (o *AppSettingInputProvisioning) GetProvisioningWebhook() *AppSettingInputProvisioningWebhook {
	if o == nil {
		return nil
	}
	return o.ProvisioningWebhook
}

func (o *AppSettingInputProvisioning) GetAccessRemovalInlineWebhook() *AppSettingInputAccessRemovalInlineWebhook {
	if o == nil {
		return nil
	}
	return o.AccessRemovalInlineWebhook
}

type AppSettingInput struct {
	// AppStore App instructions.
	CustomRequestInstructions *string `json:"custom_request_instructions,omitempty"`
	// Request flow configuration to request access to app.
	RequestFlow *AppSettingInputRequestFlow `json:"request_flow,omitempty"`
	// Provisioning flow configuration to request access to app.
	Provisioning *AppSettingInputProvisioning `json:"provisioning,omitempty"`
	// Whether the app is in the app store.
	InAppStore *bool `default:"false" json:"in_app_store"`
}

func (a AppSettingInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AppSettingInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AppSettingInput) GetCustomRequestInstructions() *string {
	if o == nil {
		return nil
	}
	return o.CustomRequestInstructions
}

func (o *AppSettingInput) GetRequestFlow() *AppSettingInputRequestFlow {
	if o == nil {
		return nil
	}
	return o.RequestFlow
}

func (o *AppSettingInput) GetProvisioning() *AppSettingInputProvisioning {
	if o == nil {
		return nil
	}
	return o.Provisioning
}

func (o *AppSettingInput) GetInAppStore() *bool {
	if o == nil {
		return nil
	}
	return o.InAppStore
}
