// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/teamlumos/terraform-provider-lumos/internal/sdk/internal/utils"
)

// RequestablePermissionInputUpdateAccessRemovalInlineWebhook - A deprovisioning webhook can be optionally associated with this config.
type RequestablePermissionInputUpdateAccessRemovalInlineWebhook struct {
	// The ID of this inline webhook.
	ID string `json:"id"`
}

func (o *RequestablePermissionInputUpdateAccessRemovalInlineWebhook) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// RequestablePermissionInputUpdateAllowedGroupsConfigType - The type of this allowed groups config, can be all groups or specific.
type RequestablePermissionInputUpdateAllowedGroupsConfigType string

const (
	RequestablePermissionInputUpdateAllowedGroupsConfigTypeAllGroups       RequestablePermissionInputUpdateAllowedGroupsConfigType = "ALL_GROUPS"
	RequestablePermissionInputUpdateAllowedGroupsConfigTypeSpecifiedGroups RequestablePermissionInputUpdateAllowedGroupsConfigType = "SPECIFIED_GROUPS"
)

func (e RequestablePermissionInputUpdateAllowedGroupsConfigType) ToPointer() *RequestablePermissionInputUpdateAllowedGroupsConfigType {
	return &e
}
func (e *RequestablePermissionInputUpdateAllowedGroupsConfigType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALL_GROUPS":
		fallthrough
	case "SPECIFIED_GROUPS":
		*e = RequestablePermissionInputUpdateAllowedGroupsConfigType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestablePermissionInputUpdateAllowedGroupsConfigType: %v", v)
	}
}

// RequestablePermissionInputUpdateAllowedGroups - Refers to which group(s) can make requests to this permission.
type RequestablePermissionInputUpdateAllowedGroups struct {
	// The groups allowed to request this permission.
	Groups []BaseGroup `json:"groups,omitempty"`
	// The type of this allowed groups config, can be all groups or specific.
	Type *RequestablePermissionInputUpdateAllowedGroupsConfigType `default:"ALL_GROUPS" json:"type"`
}

func (r RequestablePermissionInputUpdateAllowedGroups) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RequestablePermissionInputUpdateAllowedGroups) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RequestablePermissionInputUpdateAllowedGroups) GetGroups() []BaseGroup {
	if o == nil {
		return nil
	}
	return o.Groups
}

func (o *RequestablePermissionInputUpdateAllowedGroups) GetType() *RequestablePermissionInputUpdateAllowedGroupsConfigType {
	if o == nil {
		return nil
	}
	return o.Type
}

// RequestablePermissionInputUpdateAppStoreVisibilityOption - The appstore visibility of this request config.
type RequestablePermissionInputUpdateAppStoreVisibilityOption string

const (
	RequestablePermissionInputUpdateAppStoreVisibilityOptionHidden  RequestablePermissionInputUpdateAppStoreVisibilityOption = "HIDDEN"
	RequestablePermissionInputUpdateAppStoreVisibilityOptionVisible RequestablePermissionInputUpdateAppStoreVisibilityOption = "VISIBLE"
)

func (e RequestablePermissionInputUpdateAppStoreVisibilityOption) ToPointer() *RequestablePermissionInputUpdateAppStoreVisibilityOption {
	return &e
}
func (e *RequestablePermissionInputUpdateAppStoreVisibilityOption) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HIDDEN":
		fallthrough
	case "VISIBLE":
		*e = RequestablePermissionInputUpdateAppStoreVisibilityOption(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestablePermissionInputUpdateAppStoreVisibilityOption: %v", v)
	}
}

// RequestablePermissionInputUpdateApprovers - AppStore App approvers assigned.
type RequestablePermissionInputUpdateApprovers struct {
	// Groups assigned as support request approvers.
	Groups []BaseGroup `json:"groups,omitempty"`
	// Users assigned as support request approvers.
	Users []BaseUser `json:"users,omitempty"`
}

func (o *RequestablePermissionInputUpdateApprovers) GetGroups() []BaseGroup {
	if o == nil {
		return nil
	}
	return o.Groups
}

func (o *RequestablePermissionInputUpdateApprovers) GetUsers() []BaseUser {
	if o == nil {
		return nil
	}
	return o.Users
}

// RequestablePermissionInputUpdateApproversStage2 - AppStore App stage 2 approvers assigned.
type RequestablePermissionInputUpdateApproversStage2 struct {
	// Groups assigned as support request approvers.
	Groups []BaseGroup `json:"groups,omitempty"`
	// Users assigned as support request approvers.
	Users []BaseUser `json:"users,omitempty"`
}

func (o *RequestablePermissionInputUpdateApproversStage2) GetGroups() []BaseGroup {
	if o == nil {
		return nil
	}
	return o.Groups
}

func (o *RequestablePermissionInputUpdateApproversStage2) GetUsers() []BaseUser {
	if o == nil {
		return nil
	}
	return o.Users
}

// RequestablePermissionInputUpdateManagerApprovalOption - Manager approval can be configured as necessary to continue
type RequestablePermissionInputUpdateManagerApprovalOption string

const (
	RequestablePermissionInputUpdateManagerApprovalOptionNone            RequestablePermissionInputUpdateManagerApprovalOption = "NONE"
	RequestablePermissionInputUpdateManagerApprovalOptionInitialApproval RequestablePermissionInputUpdateManagerApprovalOption = "INITIAL_APPROVAL"
)

func (e RequestablePermissionInputUpdateManagerApprovalOption) ToPointer() *RequestablePermissionInputUpdateManagerApprovalOption {
	return &e
}
func (e *RequestablePermissionInputUpdateManagerApprovalOption) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NONE":
		fallthrough
	case "INITIAL_APPROVAL":
		*e = RequestablePermissionInputUpdateManagerApprovalOption(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestablePermissionInputUpdateManagerApprovalOption: %v", v)
	}
}

// RequestablePermissionInputUpdateRequestApprovalConfig - A request approval config can be optionally associated with this config
type RequestablePermissionInputUpdateRequestApprovalConfig struct {
	// AppStore App approvers assigned.
	Approvers *RequestablePermissionInputUpdateApprovers `json:"approvers,omitempty"`
	// AppStore App stage 2 approvers assigned.
	ApproversStage2 *RequestablePermissionInputUpdateApproversStage2 `json:"approvers_stage_2,omitempty"`
	// After the approval step, send a custom message to requesters. Note that the permission level approval message will override the App level approval message if custom_approval_message_override is set. Markdown for links and text formatting is supported.
	CustomApprovalMessage *string `json:"custom_approval_message,omitempty"`
	// Indicates if custom_approval_message is overridden.
	CustomApprovalMessageOverride *bool `json:"custom_approval_message_override,omitempty"`
	// Manager approval can be configured as necessary to continue
	ManagerApproval *RequestablePermissionInputUpdateManagerApprovalOption `default:"NONE" json:"manager_approval"`
	// Indicates if approval flow is overridden.
	RequestApprovalConfigOverride *bool `json:"request_approval_config_override,omitempty"`
	// The stages of this request approval.
	RequestApprovalStages []RequestApprovalStageInput `json:"request_approval_stages,omitempty"`
	// Only turn on when working with sensitive permissions to ensure a smooth employee experience.
	RequireAdditionalApproval *bool `json:"require_additional_approval,omitempty"`
}

func (r RequestablePermissionInputUpdateRequestApprovalConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RequestablePermissionInputUpdateRequestApprovalConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RequestablePermissionInputUpdateRequestApprovalConfig) GetApprovers() *RequestablePermissionInputUpdateApprovers {
	if o == nil {
		return nil
	}
	return o.Approvers
}

func (o *RequestablePermissionInputUpdateRequestApprovalConfig) GetApproversStage2() *RequestablePermissionInputUpdateApproversStage2 {
	if o == nil {
		return nil
	}
	return o.ApproversStage2
}

func (o *RequestablePermissionInputUpdateRequestApprovalConfig) GetCustomApprovalMessage() *string {
	if o == nil {
		return nil
	}
	return o.CustomApprovalMessage
}

func (o *RequestablePermissionInputUpdateRequestApprovalConfig) GetCustomApprovalMessageOverride() *bool {
	if o == nil {
		return nil
	}
	return o.CustomApprovalMessageOverride
}

func (o *RequestablePermissionInputUpdateRequestApprovalConfig) GetManagerApproval() *RequestablePermissionInputUpdateManagerApprovalOption {
	if o == nil {
		return nil
	}
	return o.ManagerApproval
}

func (o *RequestablePermissionInputUpdateRequestApprovalConfig) GetRequestApprovalConfigOverride() *bool {
	if o == nil {
		return nil
	}
	return o.RequestApprovalConfigOverride
}

func (o *RequestablePermissionInputUpdateRequestApprovalConfig) GetRequestApprovalStages() []RequestApprovalStageInput {
	if o == nil {
		return nil
	}
	return o.RequestApprovalStages
}

func (o *RequestablePermissionInputUpdateRequestApprovalConfig) GetRequireAdditionalApproval() *bool {
	if o == nil {
		return nil
	}
	return o.RequireAdditionalApproval
}

// RequestablePermissionInputUpdateProvisioningWebhook - The provisioning webhook optionally associated with this config.
type RequestablePermissionInputUpdateProvisioningWebhook struct {
	// The ID of this inline webhook.
	ID string `json:"id"`
}

func (o *RequestablePermissionInputUpdateProvisioningWebhook) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// RequestablePermissionInputUpdateRequestFulfillmentConfig - A request fulfillment config can be optionally associated with this config
type RequestablePermissionInputUpdateRequestFulfillmentConfig struct {
	// The manual instructions that go along.
	ManualInstructions *string `json:"manual_instructions,omitempty"`
	// Whether manual steps are needed.
	ManualStepsNeeded *bool `json:"manual_steps_needed,omitempty"`
	// The provisioning webhook optionally associated with this config.
	ProvisioningWebhook *RequestablePermissionInputUpdateProvisioningWebhook `json:"provisioning_webhook,omitempty"`
	// If enabled, users can request an app for a selected duration. After expiry, Lumos will automatically remove user's access.
	TimeBasedAccess []TimeBasedAccessOptions `json:"time_based_access,omitempty"`
	// Indicates if time based access is overriden.
	TimeBasedAccessOverride *bool `json:"time_based_access_override,omitempty"`
}

func (o *RequestablePermissionInputUpdateRequestFulfillmentConfig) GetManualInstructions() *string {
	if o == nil {
		return nil
	}
	return o.ManualInstructions
}

func (o *RequestablePermissionInputUpdateRequestFulfillmentConfig) GetManualStepsNeeded() *bool {
	if o == nil {
		return nil
	}
	return o.ManualStepsNeeded
}

func (o *RequestablePermissionInputUpdateRequestFulfillmentConfig) GetProvisioningWebhook() *RequestablePermissionInputUpdateProvisioningWebhook {
	if o == nil {
		return nil
	}
	return o.ProvisioningWebhook
}

func (o *RequestablePermissionInputUpdateRequestFulfillmentConfig) GetTimeBasedAccess() []TimeBasedAccessOptions {
	if o == nil {
		return nil
	}
	return o.TimeBasedAccess
}

func (o *RequestablePermissionInputUpdateRequestFulfillmentConfig) GetTimeBasedAccessOverride() *bool {
	if o == nil {
		return nil
	}
	return o.TimeBasedAccessOverride
}

// RequestablePermissionInputUpdateRequestValidationInlineWebhook - A request validation webhook can be optionally associated with this config.
type RequestablePermissionInputUpdateRequestValidationInlineWebhook struct {
	// The ID of this inline webhook.
	ID string `json:"id"`
}

func (o *RequestablePermissionInputUpdateRequestValidationInlineWebhook) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// RequestablePermissionInputUpdateRequestConfig - The request config associated with this requestable permission.
type RequestablePermissionInputUpdateRequestConfig struct {
	// A deprovisioning webhook can be optionally associated with this config.
	AccessRemovalInlineWebhook *RequestablePermissionInputUpdateAccessRemovalInlineWebhook `json:"access_removal_inline_webhook,omitempty"`
	// Refers to which group(s) can make requests to this permission.
	AllowedGroups *RequestablePermissionInputUpdateAllowedGroups `json:"allowed_groups,omitempty"`
	// Indicates if allowed groups is overriden from the app-level settings.
	AllowedGroupsOverride *bool `json:"allowed_groups_override,omitempty"`
	// The appstore visibility of this request config.
	AppstoreVisibility *RequestablePermissionInputUpdateAppStoreVisibilityOption `default:"HIDDEN" json:"appstore_visibility"`
	// A request approval config can be optionally associated with this config
	RequestApprovalConfig *RequestablePermissionInputUpdateRequestApprovalConfig `json:"request_approval_config,omitempty"`
	// A request fulfillment config can be optionally associated with this config
	RequestFulfillmentConfig *RequestablePermissionInputUpdateRequestFulfillmentConfig `json:"request_fulfillment_config,omitempty"`
	// A request validation webhook can be optionally associated with this config.
	RequestValidationInlineWebhook *RequestablePermissionInputUpdateRequestValidationInlineWebhook `json:"request_validation_inline_webhook,omitempty"`
}

func (r RequestablePermissionInputUpdateRequestConfig) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *RequestablePermissionInputUpdateRequestConfig) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *RequestablePermissionInputUpdateRequestConfig) GetAccessRemovalInlineWebhook() *RequestablePermissionInputUpdateAccessRemovalInlineWebhook {
	if o == nil {
		return nil
	}
	return o.AccessRemovalInlineWebhook
}

func (o *RequestablePermissionInputUpdateRequestConfig) GetAllowedGroups() *RequestablePermissionInputUpdateAllowedGroups {
	if o == nil {
		return nil
	}
	return o.AllowedGroups
}

func (o *RequestablePermissionInputUpdateRequestConfig) GetAllowedGroupsOverride() *bool {
	if o == nil {
		return nil
	}
	return o.AllowedGroupsOverride
}

func (o *RequestablePermissionInputUpdateRequestConfig) GetAppstoreVisibility() *RequestablePermissionInputUpdateAppStoreVisibilityOption {
	if o == nil {
		return nil
	}
	return o.AppstoreVisibility
}

func (o *RequestablePermissionInputUpdateRequestConfig) GetRequestApprovalConfig() *RequestablePermissionInputUpdateRequestApprovalConfig {
	if o == nil {
		return nil
	}
	return o.RequestApprovalConfig
}

func (o *RequestablePermissionInputUpdateRequestConfig) GetRequestFulfillmentConfig() *RequestablePermissionInputUpdateRequestFulfillmentConfig {
	if o == nil {
		return nil
	}
	return o.RequestFulfillmentConfig
}

func (o *RequestablePermissionInputUpdateRequestConfig) GetRequestValidationInlineWebhook() *RequestablePermissionInputUpdateRequestValidationInlineWebhook {
	if o == nil {
		return nil
	}
	return o.RequestValidationInlineWebhook
}

type RequestablePermissionInputUpdate struct {
	// The ID of the service associated with this requestable permission.
	AppClassID *string `json:"app_class_id,omitempty"`
	// The ID of the app associated with this requestable permission.
	AppID *string `json:"app_id,omitempty"`
	// Optionally, an app has an identifer associated with it's particular instance.
	AppInstanceID *string `json:"app_instance_id,omitempty"`
	// The label of this requestable permission.
	Label *string `json:"label,omitempty"`
	// The request config associated with this requestable permission.
	RequestConfig *RequestablePermissionInputUpdateRequestConfig `json:"request_config,omitempty"`
}

func (o *RequestablePermissionInputUpdate) GetAppClassID() *string {
	if o == nil {
		return nil
	}
	return o.AppClassID
}

func (o *RequestablePermissionInputUpdate) GetAppID() *string {
	if o == nil {
		return nil
	}
	return o.AppID
}

func (o *RequestablePermissionInputUpdate) GetAppInstanceID() *string {
	if o == nil {
		return nil
	}
	return o.AppInstanceID
}

func (o *RequestablePermissionInputUpdate) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

func (o *RequestablePermissionInputUpdate) GetRequestConfig() *RequestablePermissionInputUpdateRequestConfig {
	if o == nil {
		return nil
	}
	return o.RequestConfig
}
