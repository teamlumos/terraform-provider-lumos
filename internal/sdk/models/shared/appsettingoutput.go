// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/teamlumos/terraform-provider-lumos/internal/sdk/internal/utils"
)

// AllowedGroupsConfigType - The type of this allowed groups config, can be all groups or specific.
type AllowedGroupsConfigType string

const (
	AllowedGroupsConfigTypeAllGroups       AllowedGroupsConfigType = "ALL_GROUPS"
	AllowedGroupsConfigTypeSpecifiedGroups AllowedGroupsConfigType = "SPECIFIED_GROUPS"
)

func (e AllowedGroupsConfigType) ToPointer() *AllowedGroupsConfigType {
	return &e
}
func (e *AllowedGroupsConfigType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALL_GROUPS":
		fallthrough
	case "SPECIFIED_GROUPS":
		*e = AllowedGroupsConfigType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AllowedGroupsConfigType: %v", v)
	}
}

// AllowedGroups - The allowed groups config associated with this config.
type AllowedGroups struct {
	// The type of this allowed groups config, can be all groups or specific.
	Type *AllowedGroupsConfigType `default:"ALL_GROUPS" json:"type"`
	// The groups associated with this config.
	Groups []Group `json:"groups,omitempty"`
}

func (a AllowedGroups) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AllowedGroups) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AllowedGroups) GetType() *AllowedGroupsConfigType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *AllowedGroups) GetGroups() []Group {
	if o == nil {
		return nil
	}
	return o.Groups
}

// Approvers - AppStore App approvers assigned.
type Approvers struct {
	// Groups assigned as support request approvers.
	Groups []Group `json:"groups,omitempty"`
	// Users assigned as support request approvers.
	Users []User `json:"users,omitempty"`
}

func (o *Approvers) GetGroups() []Group {
	if o == nil {
		return nil
	}
	return o.Groups
}

func (o *Approvers) GetUsers() []User {
	if o == nil {
		return nil
	}
	return o.Users
}

// ApproversStage2 - AppStore App stage 2 approvers assigned.
type ApproversStage2 struct {
	// Groups assigned as support request approvers.
	Groups []Group `json:"groups,omitempty"`
	// Users assigned as support request approvers.
	Users []User `json:"users,omitempty"`
}

func (o *ApproversStage2) GetGroups() []Group {
	if o == nil {
		return nil
	}
	return o.Groups
}

func (o *ApproversStage2) GetUsers() []User {
	if o == nil {
		return nil
	}
	return o.Users
}

// Admins - AppStore App admins assigned.
type Admins struct {
	// Groups assigned as app admins.
	Groups []Group `json:"groups,omitempty"`
	// Users assigned as app admins.
	Users []User `json:"users,omitempty"`
}

func (o *Admins) GetGroups() []Group {
	if o == nil {
		return nil
	}
	return o.Groups
}

func (o *Admins) GetUsers() []User {
	if o == nil {
		return nil
	}
	return o.Users
}

// RequestValidationInlineWebhook - A request validation webhook can be optionally associated with this config.
type RequestValidationInlineWebhook struct {
	// The ID of this inline webhook.
	ID string `json:"id"`
	// The type of this inline webhook.
	HookType InlineWebhookType `json:"hook_type"`
	// The name of this inline webhook.
	Name string `json:"name"`
	// The description of this inline webhook.
	Description *string `json:"description,omitempty"`
}

func (o *RequestValidationInlineWebhook) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RequestValidationInlineWebhook) GetHookType() InlineWebhookType {
	if o == nil {
		return InlineWebhookType("")
	}
	return o.HookType
}

func (o *RequestValidationInlineWebhook) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *RequestValidationInlineWebhook) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

// RequestFlow - Request flow configuration to request access to app.
type RequestFlow struct {
	// AppStore App visibility.
	Discoverability *AppStoreVisibility `json:"discoverability,omitempty"`
	// During the approval step, send a custom message to requesters. Markdown for links and text formatting is supported.
	CustomApprovalMessage *string `json:"custom_approval_message,omitempty"`
	// When a user makes an access request, require that their manager approves the request before moving on to additional approvals.
	RequireManagerApproval *bool `json:"require_manager_approval,omitempty"`
	// Only turn on when working with sensitive permissions to ensure a smooth employee experience.
	RequireAdditionalApproval *bool `json:"require_additional_approval,omitempty"`
	// The allowed groups config associated with this config.
	AllowedGroups *AllowedGroups `json:"allowed_groups,omitempty"`
	// AppStore App approvers assigned.
	Approvers *Approvers `json:"approvers,omitempty"`
	// AppStore App stage 2 approvers assigned.
	ApproversStage2 *ApproversStage2 `json:"approvers_stage_2,omitempty"`
	// AppStore App admins assigned.
	Admins *Admins `json:"admins,omitempty"`
	// A request validation webhook can be optionally associated with this config.
	RequestValidationInlineWebhook *RequestValidationInlineWebhook `json:"request_validation_inline_webhook,omitempty"`
}

func (o *RequestFlow) GetDiscoverability() *AppStoreVisibility {
	if o == nil {
		return nil
	}
	return o.Discoverability
}

func (o *RequestFlow) GetCustomApprovalMessage() *string {
	if o == nil {
		return nil
	}
	return o.CustomApprovalMessage
}

func (o *RequestFlow) GetRequireManagerApproval() *bool {
	if o == nil {
		return nil
	}
	return o.RequireManagerApproval
}

func (o *RequestFlow) GetRequireAdditionalApproval() *bool {
	if o == nil {
		return nil
	}
	return o.RequireAdditionalApproval
}

func (o *RequestFlow) GetAllowedGroups() *AllowedGroups {
	if o == nil {
		return nil
	}
	return o.AllowedGroups
}

func (o *RequestFlow) GetApprovers() *Approvers {
	if o == nil {
		return nil
	}
	return o.Approvers
}

func (o *RequestFlow) GetApproversStage2() *ApproversStage2 {
	if o == nil {
		return nil
	}
	return o.ApproversStage2
}

func (o *RequestFlow) GetAdmins() *Admins {
	if o == nil {
		return nil
	}
	return o.Admins
}

func (o *RequestFlow) GetRequestValidationInlineWebhook() *RequestValidationInlineWebhook {
	if o == nil {
		return nil
	}
	return o.RequestValidationInlineWebhook
}

// ProvisioningWebhook - The provisioning webhook optionally associated with this config.
type ProvisioningWebhook struct {
	// The ID of this inline webhook.
	ID string `json:"id"`
	// The type of this inline webhook.
	HookType InlineWebhookType `json:"hook_type"`
	// The name of this inline webhook.
	Name string `json:"name"`
	// The description of this inline webhook.
	Description *string `json:"description,omitempty"`
}

func (o *ProvisioningWebhook) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ProvisioningWebhook) GetHookType() InlineWebhookType {
	if o == nil {
		return InlineWebhookType("")
	}
	return o.HookType
}

func (o *ProvisioningWebhook) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ProvisioningWebhook) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

// AccessRemovalInlineWebhook - An inactivity workflow can be optionally associated with this config.
type AccessRemovalInlineWebhook struct {
	// The ID of this inline webhook.
	ID string `json:"id"`
	// The type of this inline webhook.
	HookType InlineWebhookType `json:"hook_type"`
	// The name of this inline webhook.
	Name string `json:"name"`
	// The description of this inline webhook.
	Description *string `json:"description,omitempty"`
}

func (o *AccessRemovalInlineWebhook) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AccessRemovalInlineWebhook) GetHookType() InlineWebhookType {
	if o == nil {
		return InlineWebhookType("")
	}
	return o.HookType
}

func (o *AccessRemovalInlineWebhook) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AccessRemovalInlineWebhook) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

// Provisioning flow configuration to request access to app.
type Provisioning struct {
	// If enabled, Approvers must choose a group to provision the user to for access requests.
	GroupsProvisioning *GroupProvisioningOption `json:"groups_provisioning,omitempty"`
	// If enabled, users can request an app for a selected duration. After expiry, Lumos will automatically remove user's access.
	TimeBasedAccess []TimeBasedAccessOptions `json:"time_based_access,omitempty"`
	// Whether the app is configured to allow users to request multiple permissions in a single request
	AllowMultiplePermissionSelection *bool `json:"allow_multiple_permission_selection,omitempty"`
	// If enabled, Lumos will reach out to the App Admin after initial access is granted to perform additional manual steps. Note that if this option is enabled, this action must be confirmed by the App Admin in order to resolve the request.
	ManualStepsNeeded *bool `json:"manual_steps_needed,omitempty"`
	// Only Available if manual steps is active. During the provisioning step, send a custom message to app admins explaining how to provision a user to the app. Markdown for links and text formatting is supported.
	CustomProvisioningInstructions *string `json:"custom_provisioning_instructions,omitempty"`
	// The provisioning webhook optionally associated with this config.
	ProvisioningWebhook *ProvisioningWebhook `json:"provisioning_webhook,omitempty"`
	// An inactivity workflow can be optionally associated with this config.
	AccessRemovalInlineWebhook *AccessRemovalInlineWebhook `json:"access_removal_inline_webhook,omitempty"`
}

func (o *Provisioning) GetGroupsProvisioning() *GroupProvisioningOption {
	if o == nil {
		return nil
	}
	return o.GroupsProvisioning
}

func (o *Provisioning) GetTimeBasedAccess() []TimeBasedAccessOptions {
	if o == nil {
		return nil
	}
	return o.TimeBasedAccess
}

func (o *Provisioning) GetAllowMultiplePermissionSelection() *bool {
	if o == nil {
		return nil
	}
	return o.AllowMultiplePermissionSelection
}

func (o *Provisioning) GetManualStepsNeeded() *bool {
	if o == nil {
		return nil
	}
	return o.ManualStepsNeeded
}

func (o *Provisioning) GetCustomProvisioningInstructions() *string {
	if o == nil {
		return nil
	}
	return o.CustomProvisioningInstructions
}

func (o *Provisioning) GetProvisioningWebhook() *ProvisioningWebhook {
	if o == nil {
		return nil
	}
	return o.ProvisioningWebhook
}

func (o *Provisioning) GetAccessRemovalInlineWebhook() *AccessRemovalInlineWebhook {
	if o == nil {
		return nil
	}
	return o.AccessRemovalInlineWebhook
}

type AppSettingOutput struct {
	// AppStore App instructions.
	CustomRequestInstructions *string `json:"custom_request_instructions,omitempty"`
	// Request flow configuration to request access to app.
	RequestFlow *RequestFlow `json:"request_flow,omitempty"`
	// Provisioning flow configuration to request access to app.
	Provisioning *Provisioning `json:"provisioning,omitempty"`
	// Whether the app is in the app store.
	InAppStore *bool `default:"false" json:"in_app_store"`
}

func (a AppSettingOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AppSettingOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AppSettingOutput) GetCustomRequestInstructions() *string {
	if o == nil {
		return nil
	}
	return o.CustomRequestInstructions
}

func (o *AppSettingOutput) GetRequestFlow() *RequestFlow {
	if o == nil {
		return nil
	}
	return o.RequestFlow
}

func (o *AppSettingOutput) GetProvisioning() *Provisioning {
	if o == nil {
		return nil
	}
	return o.Provisioning
}

func (o *AppSettingOutput) GetInAppStore() *bool {
	if o == nil {
		return nil
	}
	return o.InAppStore
}
