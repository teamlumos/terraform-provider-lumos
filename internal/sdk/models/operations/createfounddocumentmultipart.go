// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy/terraform-provider-lumos/internal/sdk/internal/utils"
	"github.com/speakeasy/terraform-provider-lumos/internal/sdk/models/shared"
	"github.com/speakeasy/terraform-provider-lumos/internal/sdk/types"
	"net/http"
)

type Files struct {
	FileName string `multipartForm:"name=files"`
	Content  []byte `multipartForm:"content"`
}

func (o *Files) GetFileName() string {
	if o == nil {
		return ""
	}
	return o.FileName
}

func (o *Files) GetContent() []byte {
	if o == nil {
		return []byte{}
	}
	return o.Content
}

type CreateFoundDocumentMultipartRequestBody struct {
	// A unique identifier for the contract being uploaded. This can be an ID from an external system like Coupa, an internal ID such as a PO number, or simply the name of the file.
	UniqueIdentifier string `multipartForm:"name=unique_identifier"`
	// A list of files related to a vendor agreement. For example, the Order Form, Quote, MSA, or Terms and Conditions.
	Files []Files `multipartForm:"name=files"`
	// The name of the vendor associated with this document
	VendorName *string `multipartForm:"name=vendor_name"`
	// The start date of the attached contract
	StartDate *types.Date `multipartForm:"name=start_date"`
	// The end date of the attached contract
	EndDate *types.Date `multipartForm:"name=end_date"`
	// The ID of the app that sourced this document. For example, if you are using this API to create a custom Google Drive integration, you might include the ID for the Google Workspaceapp in Lumos. This determines which app's logo is displayed in Lumos.
	SourceAppID *string `multipartForm:"name=source_app_id"`
}

func (c CreateFoundDocumentMultipartRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateFoundDocumentMultipartRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateFoundDocumentMultipartRequestBody) GetUniqueIdentifier() string {
	if o == nil {
		return ""
	}
	return o.UniqueIdentifier
}

func (o *CreateFoundDocumentMultipartRequestBody) GetFiles() []Files {
	if o == nil {
		return []Files{}
	}
	return o.Files
}

func (o *CreateFoundDocumentMultipartRequestBody) GetVendorName() *string {
	if o == nil {
		return nil
	}
	return o.VendorName
}

func (o *CreateFoundDocumentMultipartRequestBody) GetStartDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *CreateFoundDocumentMultipartRequestBody) GetEndDate() *types.Date {
	if o == nil {
		return nil
	}
	return o.EndDate
}

func (o *CreateFoundDocumentMultipartRequestBody) GetSourceAppID() *string {
	if o == nil {
		return nil
	}
	return o.SourceAppID
}

type CreateFoundDocumentMultipartResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Successful Response
	Any any
	// Validation Error
	HTTPValidationError *shared.HTTPValidationError
}

func (o *CreateFoundDocumentMultipartResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateFoundDocumentMultipartResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateFoundDocumentMultipartResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateFoundDocumentMultipartResponse) GetAny() any {
	if o == nil {
		return nil
	}
	return o.Any
}

func (o *CreateFoundDocumentMultipartResponse) GetHTTPValidationError() *shared.HTTPValidationError {
	if o == nil {
		return nil
	}
	return o.HTTPValidationError
}
