// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/teamlumos/terraform-provider-lumos/internal/provider/types"
	"github.com/teamlumos/terraform-provider-lumos/internal/sdk/models/shared"
)

func (r *RequestablePermissionResourceModel) ToSharedRequestablePermissionInput() *shared.RequestablePermissionInput {
	appID := r.AppID.ValueString()
	appClassID := new(string)
	if !r.AppClassID.IsUnknown() && !r.AppClassID.IsNull() {
		*appClassID = r.AppClassID.ValueString()
	} else {
		appClassID = nil
	}
	appInstanceID := new(string)
	if !r.AppInstanceID.IsUnknown() && !r.AppInstanceID.IsNull() {
		*appInstanceID = r.AppInstanceID.ValueString()
	} else {
		appInstanceID = nil
	}
	label := r.Label.ValueString()
	var requestConfig *shared.RequestablePermissionInputRequestConfig
	if r.RequestConfig != nil {
		appstoreVisibility := new(shared.RequestablePermissionInputAppStoreVisibilityOption)
		if !r.RequestConfig.AppstoreVisibility.IsUnknown() && !r.RequestConfig.AppstoreVisibility.IsNull() {
			*appstoreVisibility = shared.RequestablePermissionInputAppStoreVisibilityOption(r.RequestConfig.AppstoreVisibility.ValueString())
		} else {
			appstoreVisibility = nil
		}
		allowedGroupsOverride := new(bool)
		if !r.RequestConfig.AllowedGroupsOverride.IsUnknown() && !r.RequestConfig.AllowedGroupsOverride.IsNull() {
			*allowedGroupsOverride = r.RequestConfig.AllowedGroupsOverride.ValueBool()
		} else {
			allowedGroupsOverride = nil
		}
		var allowedGroups *shared.RequestablePermissionInputAllowedGroups
		if r.RequestConfig.AllowedGroups != nil {
			typeVar := new(shared.RequestablePermissionInputAllowedGroupsConfigType)
			if !r.RequestConfig.AllowedGroups.Type.IsUnknown() && !r.RequestConfig.AllowedGroups.Type.IsNull() {
				*typeVar = shared.RequestablePermissionInputAllowedGroupsConfigType(r.RequestConfig.AllowedGroups.Type.ValueString())
			} else {
				typeVar = nil
			}
			var groups []shared.BaseGroup = []shared.BaseGroup{}
			for _, groupsItem := range r.RequestConfig.AllowedGroups.Groups {
				id := new(string)
				if !groupsItem.ID.IsUnknown() && !groupsItem.ID.IsNull() {
					*id = groupsItem.ID.ValueString()
				} else {
					id = nil
				}
				appId1 := new(string)
				if !groupsItem.AppID.IsUnknown() && !groupsItem.AppID.IsNull() {
					*appId1 = groupsItem.AppID.ValueString()
				} else {
					appId1 = nil
				}
				integrationSpecificID := new(string)
				if !groupsItem.IntegrationSpecificID.IsUnknown() && !groupsItem.IntegrationSpecificID.IsNull() {
					*integrationSpecificID = groupsItem.IntegrationSpecificID.ValueString()
				} else {
					integrationSpecificID = nil
				}
				groups = append(groups, shared.BaseGroup{
					ID:                    id,
					AppID:                 appId1,
					IntegrationSpecificID: integrationSpecificID,
				})
			}
			allowedGroups = &shared.RequestablePermissionInputAllowedGroups{
				Type:   typeVar,
				Groups: groups,
			}
		}
		var requestApprovalConfig *shared.RequestablePermissionInputRequestApprovalConfig
		if r.RequestConfig.RequestApprovalConfig != nil {
			requestApprovalConfigOverride := new(bool)
			if !r.RequestConfig.RequestApprovalConfig.RequestApprovalConfigOverride.IsUnknown() && !r.RequestConfig.RequestApprovalConfig.RequestApprovalConfigOverride.IsNull() {
				*requestApprovalConfigOverride = r.RequestConfig.RequestApprovalConfig.RequestApprovalConfigOverride.ValueBool()
			} else {
				requestApprovalConfigOverride = nil
			}
			managerApproval := new(shared.RequestablePermissionInputManagerApprovalOption)
			if !r.RequestConfig.RequestApprovalConfig.ManagerApproval.IsUnknown() && !r.RequestConfig.RequestApprovalConfig.ManagerApproval.IsNull() {
				*managerApproval = shared.RequestablePermissionInputManagerApprovalOption(r.RequestConfig.RequestApprovalConfig.ManagerApproval.ValueString())
			} else {
				managerApproval = nil
			}
			requireAdditionalApproval := new(bool)
			if !r.RequestConfig.RequestApprovalConfig.RequireAdditionalApproval.IsUnknown() && !r.RequestConfig.RequestApprovalConfig.RequireAdditionalApproval.IsNull() {
				*requireAdditionalApproval = r.RequestConfig.RequestApprovalConfig.RequireAdditionalApproval.ValueBool()
			} else {
				requireAdditionalApproval = nil
			}
			customApprovalMessage := new(string)
			if !r.RequestConfig.RequestApprovalConfig.CustomApprovalMessage.IsUnknown() && !r.RequestConfig.RequestApprovalConfig.CustomApprovalMessage.IsNull() {
				*customApprovalMessage = r.RequestConfig.RequestApprovalConfig.CustomApprovalMessage.ValueString()
			} else {
				customApprovalMessage = nil
			}
			customApprovalMessageOverride := new(bool)
			if !r.RequestConfig.RequestApprovalConfig.CustomApprovalMessageOverride.IsUnknown() && !r.RequestConfig.RequestApprovalConfig.CustomApprovalMessageOverride.IsNull() {
				*customApprovalMessageOverride = r.RequestConfig.RequestApprovalConfig.CustomApprovalMessageOverride.ValueBool()
			} else {
				customApprovalMessageOverride = nil
			}
			var approvers *shared.RequestablePermissionInputApprovers
			if r.RequestConfig.RequestApprovalConfig.Approvers != nil {
				var groups1 []shared.BaseGroup = []shared.BaseGroup{}
				for _, groupsItem1 := range r.RequestConfig.RequestApprovalConfig.Approvers.Groups {
					id1 := new(string)
					if !groupsItem1.ID.IsUnknown() && !groupsItem1.ID.IsNull() {
						*id1 = groupsItem1.ID.ValueString()
					} else {
						id1 = nil
					}
					appId2 := new(string)
					if !groupsItem1.AppID.IsUnknown() && !groupsItem1.AppID.IsNull() {
						*appId2 = groupsItem1.AppID.ValueString()
					} else {
						appId2 = nil
					}
					integrationSpecificId1 := new(string)
					if !groupsItem1.IntegrationSpecificID.IsUnknown() && !groupsItem1.IntegrationSpecificID.IsNull() {
						*integrationSpecificId1 = groupsItem1.IntegrationSpecificID.ValueString()
					} else {
						integrationSpecificId1 = nil
					}
					groups1 = append(groups1, shared.BaseGroup{
						ID:                    id1,
						AppID:                 appId2,
						IntegrationSpecificID: integrationSpecificId1,
					})
				}
				var users []shared.BaseUser = []shared.BaseUser{}
				for _, usersItem := range r.RequestConfig.RequestApprovalConfig.Approvers.Users {
					id2 := usersItem.ID.ValueString()
					users = append(users, shared.BaseUser{
						ID: id2,
					})
				}
				approvers = &shared.RequestablePermissionInputApprovers{
					Groups: groups1,
					Users:  users,
				}
			}
			var approversStage2 *shared.RequestablePermissionInputApproversStage2
			if r.RequestConfig.RequestApprovalConfig.ApproversStage2 != nil {
				var groups2 []shared.BaseGroup = []shared.BaseGroup{}
				for _, groupsItem2 := range r.RequestConfig.RequestApprovalConfig.ApproversStage2.Groups {
					id3 := new(string)
					if !groupsItem2.ID.IsUnknown() && !groupsItem2.ID.IsNull() {
						*id3 = groupsItem2.ID.ValueString()
					} else {
						id3 = nil
					}
					appId3 := new(string)
					if !groupsItem2.AppID.IsUnknown() && !groupsItem2.AppID.IsNull() {
						*appId3 = groupsItem2.AppID.ValueString()
					} else {
						appId3 = nil
					}
					integrationSpecificId2 := new(string)
					if !groupsItem2.IntegrationSpecificID.IsUnknown() && !groupsItem2.IntegrationSpecificID.IsNull() {
						*integrationSpecificId2 = groupsItem2.IntegrationSpecificID.ValueString()
					} else {
						integrationSpecificId2 = nil
					}
					groups2 = append(groups2, shared.BaseGroup{
						ID:                    id3,
						AppID:                 appId3,
						IntegrationSpecificID: integrationSpecificId2,
					})
				}
				var users1 []shared.BaseUser = []shared.BaseUser{}
				for _, usersItem1 := range r.RequestConfig.RequestApprovalConfig.ApproversStage2.Users {
					id4 := usersItem1.ID.ValueString()
					users1 = append(users1, shared.BaseUser{
						ID: id4,
					})
				}
				approversStage2 = &shared.RequestablePermissionInputApproversStage2{
					Groups: groups2,
					Users:  users1,
				}
			}
			requestApprovalConfig = &shared.RequestablePermissionInputRequestApprovalConfig{
				RequestApprovalConfigOverride: requestApprovalConfigOverride,
				ManagerApproval:               managerApproval,
				RequireAdditionalApproval:     requireAdditionalApproval,
				CustomApprovalMessage:         customApprovalMessage,
				CustomApprovalMessageOverride: customApprovalMessageOverride,
				Approvers:                     approvers,
				ApproversStage2:               approversStage2,
			}
		}
		var accessRemovalInlineWebhook *shared.RequestablePermissionInputAccessRemovalInlineWebhook
		if r.RequestConfig.AccessRemovalInlineWebhook != nil {
			id5 := r.RequestConfig.AccessRemovalInlineWebhook.ID.ValueString()
			accessRemovalInlineWebhook = &shared.RequestablePermissionInputAccessRemovalInlineWebhook{
				ID: id5,
			}
		}
		var requestValidationInlineWebhook *shared.RequestablePermissionInputRequestValidationInlineWebhook
		if r.RequestConfig.RequestValidationInlineWebhook != nil {
			id6 := r.RequestConfig.RequestValidationInlineWebhook.ID.ValueString()
			requestValidationInlineWebhook = &shared.RequestablePermissionInputRequestValidationInlineWebhook{
				ID: id6,
			}
		}
		var requestFulfillmentConfig *shared.RequestablePermissionInputRequestFulfillmentConfig
		if r.RequestConfig.RequestFulfillmentConfig != nil {
			manualStepsNeeded := new(bool)
			if !r.RequestConfig.RequestFulfillmentConfig.ManualStepsNeeded.IsUnknown() && !r.RequestConfig.RequestFulfillmentConfig.ManualStepsNeeded.IsNull() {
				*manualStepsNeeded = r.RequestConfig.RequestFulfillmentConfig.ManualStepsNeeded.ValueBool()
			} else {
				manualStepsNeeded = nil
			}
			manualInstructions := new(string)
			if !r.RequestConfig.RequestFulfillmentConfig.ManualInstructions.IsUnknown() && !r.RequestConfig.RequestFulfillmentConfig.ManualInstructions.IsNull() {
				*manualInstructions = r.RequestConfig.RequestFulfillmentConfig.ManualInstructions.ValueString()
			} else {
				manualInstructions = nil
			}
			var timeBasedAccess []shared.TimeBasedAccessOptions = []shared.TimeBasedAccessOptions{}
			for _, timeBasedAccessItem := range r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccess {
				timeBasedAccess = append(timeBasedAccess, shared.TimeBasedAccessOptions(timeBasedAccessItem.ValueString()))
			}
			timeBasedAccessOverride := new(bool)
			if !r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccessOverride.IsUnknown() && !r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccessOverride.IsNull() {
				*timeBasedAccessOverride = r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccessOverride.ValueBool()
			} else {
				timeBasedAccessOverride = nil
			}
			var provisioningGroup *shared.RequestablePermissionInputProvisioningGroup
			if r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup != nil {
				id7 := new(string)
				if !r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.ID.IsUnknown() && !r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.ID.IsNull() {
					*id7 = r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.ID.ValueString()
				} else {
					id7 = nil
				}
				appId4 := new(string)
				if !r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.AppID.IsUnknown() && !r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.AppID.IsNull() {
					*appId4 = r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.AppID.ValueString()
				} else {
					appId4 = nil
				}
				integrationSpecificId3 := new(string)
				if !r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.IntegrationSpecificID.IsUnknown() && !r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.IntegrationSpecificID.IsNull() {
					*integrationSpecificId3 = r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.IntegrationSpecificID.ValueString()
				} else {
					integrationSpecificId3 = nil
				}
				provisioningGroup = &shared.RequestablePermissionInputProvisioningGroup{
					ID:                    id7,
					AppID:                 appId4,
					IntegrationSpecificID: integrationSpecificId3,
				}
			}
			var provisioningWebhook *shared.RequestablePermissionInputProvisioningWebhook
			if r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook != nil {
				id8 := r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.ID.ValueString()
				provisioningWebhook = &shared.RequestablePermissionInputProvisioningWebhook{
					ID: id8,
				}
			}
			requestFulfillmentConfig = &shared.RequestablePermissionInputRequestFulfillmentConfig{
				ManualStepsNeeded:       manualStepsNeeded,
				ManualInstructions:      manualInstructions,
				TimeBasedAccess:         timeBasedAccess,
				TimeBasedAccessOverride: timeBasedAccessOverride,
				ProvisioningGroup:       provisioningGroup,
				ProvisioningWebhook:     provisioningWebhook,
			}
		}
		requestConfig = &shared.RequestablePermissionInputRequestConfig{
			AppstoreVisibility:             appstoreVisibility,
			AllowedGroupsOverride:          allowedGroupsOverride,
			AllowedGroups:                  allowedGroups,
			RequestApprovalConfig:          requestApprovalConfig,
			AccessRemovalInlineWebhook:     accessRemovalInlineWebhook,
			RequestValidationInlineWebhook: requestValidationInlineWebhook,
			RequestFulfillmentConfig:       requestFulfillmentConfig,
		}
	}
	out := shared.RequestablePermissionInput{
		AppID:         appID,
		AppClassID:    appClassID,
		AppInstanceID: appInstanceID,
		Label:         label,
		RequestConfig: requestConfig,
	}
	return &out
}

func (r *RequestablePermissionResourceModel) RefreshFromSharedRequestablePermissionOutput(resp *shared.RequestablePermissionOutput) {
	if resp != nil {
		r.AppClassID = types.StringValue(resp.AppClassID)
		r.AppID = types.StringValue(resp.AppID)
		r.AppInstanceID = types.StringValue(resp.AppInstanceID)
		r.ID = types.StringPointerValue(resp.ID)
		r.Label = types.StringValue(resp.Label)
		if r.RequestConfig == nil {
			r.RequestConfig = &tfTypes.RequestablePermissionInputRequestConfig{}
		}
		if resp.RequestConfig.AccessRemovalInlineWebhook == nil {
			r.RequestConfig.AccessRemovalInlineWebhook = nil
		} else {
			r.RequestConfig.AccessRemovalInlineWebhook = &tfTypes.AddAppToAppStoreInputAccessRemovalInlineWebhook{}
			r.RequestConfig.AccessRemovalInlineWebhook.Description = types.StringPointerValue(resp.RequestConfig.AccessRemovalInlineWebhook.Description)
			r.RequestConfig.AccessRemovalInlineWebhook.HookType = types.StringValue(string(resp.RequestConfig.AccessRemovalInlineWebhook.HookType))
			r.RequestConfig.AccessRemovalInlineWebhook.ID = types.StringValue(resp.RequestConfig.AccessRemovalInlineWebhook.ID)
			r.RequestConfig.AccessRemovalInlineWebhook.Name = types.StringValue(resp.RequestConfig.AccessRemovalInlineWebhook.Name)
		}
		if resp.RequestConfig.AllowedGroups == nil {
			r.RequestConfig.AllowedGroups = nil
		} else {
			r.RequestConfig.AllowedGroups = &tfTypes.AddAppToAppStoreInputAllowedGroups{}
			r.RequestConfig.AllowedGroups.Groups = []tfTypes.Group{}
			if len(r.RequestConfig.AllowedGroups.Groups) > len(resp.RequestConfig.AllowedGroups.Groups) {
				r.RequestConfig.AllowedGroups.Groups = r.RequestConfig.AllowedGroups.Groups[:len(resp.RequestConfig.AllowedGroups.Groups)]
			}
			for groupsCount, groupsItem := range resp.RequestConfig.AllowedGroups.Groups {
				var groups1 tfTypes.Group
				groups1.AppID = types.StringPointerValue(groupsItem.AppID)
				groups1.Description = types.StringPointerValue(groupsItem.Description)
				if groupsItem.GroupLifecycle != nil {
					groups1.GroupLifecycle = types.StringValue(string(*groupsItem.GroupLifecycle))
				} else {
					groups1.GroupLifecycle = types.StringNull()
				}
				groups1.ID = types.StringPointerValue(groupsItem.ID)
				groups1.IntegrationSpecificID = types.StringPointerValue(groupsItem.IntegrationSpecificID)
				groups1.Name = types.StringPointerValue(groupsItem.Name)
				groups1.SourceAppID = types.StringPointerValue(groupsItem.SourceAppID)
				if groupsCount+1 > len(r.RequestConfig.AllowedGroups.Groups) {
					r.RequestConfig.AllowedGroups.Groups = append(r.RequestConfig.AllowedGroups.Groups, groups1)
				} else {
					r.RequestConfig.AllowedGroups.Groups[groupsCount].AppID = groups1.AppID
					r.RequestConfig.AllowedGroups.Groups[groupsCount].Description = groups1.Description
					r.RequestConfig.AllowedGroups.Groups[groupsCount].GroupLifecycle = groups1.GroupLifecycle
					r.RequestConfig.AllowedGroups.Groups[groupsCount].ID = groups1.ID
					r.RequestConfig.AllowedGroups.Groups[groupsCount].IntegrationSpecificID = groups1.IntegrationSpecificID
					r.RequestConfig.AllowedGroups.Groups[groupsCount].Name = groups1.Name
					r.RequestConfig.AllowedGroups.Groups[groupsCount].SourceAppID = groups1.SourceAppID
				}
			}
			if resp.RequestConfig.AllowedGroups.Type != nil {
				r.RequestConfig.AllowedGroups.Type = types.StringValue(string(*resp.RequestConfig.AllowedGroups.Type))
			} else {
				r.RequestConfig.AllowedGroups.Type = types.StringNull()
			}
		}
		r.RequestConfig.AllowedGroupsOverride = types.BoolPointerValue(resp.RequestConfig.AllowedGroupsOverride)
		if resp.RequestConfig.AppstoreVisibility != nil {
			r.RequestConfig.AppstoreVisibility = types.StringValue(string(*resp.RequestConfig.AppstoreVisibility))
		} else {
			r.RequestConfig.AppstoreVisibility = types.StringNull()
		}
		if resp.RequestConfig.RequestApprovalConfig == nil {
			r.RequestConfig.RequestApprovalConfig = nil
		} else {
			r.RequestConfig.RequestApprovalConfig = &tfTypes.RequestablePermissionInputRequestApprovalConfig{}
			if resp.RequestConfig.RequestApprovalConfig.Approvers == nil {
				r.RequestConfig.RequestApprovalConfig.Approvers = nil
			} else {
				r.RequestConfig.RequestApprovalConfig.Approvers = &tfTypes.AddAppToAppStoreInputApprovers{}
				r.RequestConfig.RequestApprovalConfig.Approvers.Groups = []tfTypes.Group{}
				if len(r.RequestConfig.RequestApprovalConfig.Approvers.Groups) > len(resp.RequestConfig.RequestApprovalConfig.Approvers.Groups) {
					r.RequestConfig.RequestApprovalConfig.Approvers.Groups = r.RequestConfig.RequestApprovalConfig.Approvers.Groups[:len(resp.RequestConfig.RequestApprovalConfig.Approvers.Groups)]
				}
				for groupsCount1, groupsItem1 := range resp.RequestConfig.RequestApprovalConfig.Approvers.Groups {
					var groups3 tfTypes.Group
					groups3.AppID = types.StringPointerValue(groupsItem1.AppID)
					groups3.Description = types.StringPointerValue(groupsItem1.Description)
					if groupsItem1.GroupLifecycle != nil {
						groups3.GroupLifecycle = types.StringValue(string(*groupsItem1.GroupLifecycle))
					} else {
						groups3.GroupLifecycle = types.StringNull()
					}
					groups3.ID = types.StringPointerValue(groupsItem1.ID)
					groups3.IntegrationSpecificID = types.StringPointerValue(groupsItem1.IntegrationSpecificID)
					groups3.Name = types.StringPointerValue(groupsItem1.Name)
					groups3.SourceAppID = types.StringPointerValue(groupsItem1.SourceAppID)
					if groupsCount1+1 > len(r.RequestConfig.RequestApprovalConfig.Approvers.Groups) {
						r.RequestConfig.RequestApprovalConfig.Approvers.Groups = append(r.RequestConfig.RequestApprovalConfig.Approvers.Groups, groups3)
					} else {
						r.RequestConfig.RequestApprovalConfig.Approvers.Groups[groupsCount1].AppID = groups3.AppID
						r.RequestConfig.RequestApprovalConfig.Approvers.Groups[groupsCount1].Description = groups3.Description
						r.RequestConfig.RequestApprovalConfig.Approvers.Groups[groupsCount1].GroupLifecycle = groups3.GroupLifecycle
						r.RequestConfig.RequestApprovalConfig.Approvers.Groups[groupsCount1].ID = groups3.ID
						r.RequestConfig.RequestApprovalConfig.Approvers.Groups[groupsCount1].IntegrationSpecificID = groups3.IntegrationSpecificID
						r.RequestConfig.RequestApprovalConfig.Approvers.Groups[groupsCount1].Name = groups3.Name
						r.RequestConfig.RequestApprovalConfig.Approvers.Groups[groupsCount1].SourceAppID = groups3.SourceAppID
					}
				}
				r.RequestConfig.RequestApprovalConfig.Approvers.Users = []tfTypes.User{}
				if len(r.RequestConfig.RequestApprovalConfig.Approvers.Users) > len(resp.RequestConfig.RequestApprovalConfig.Approvers.Users) {
					r.RequestConfig.RequestApprovalConfig.Approvers.Users = r.RequestConfig.RequestApprovalConfig.Approvers.Users[:len(resp.RequestConfig.RequestApprovalConfig.Approvers.Users)]
				}
				for usersCount, usersItem := range resp.RequestConfig.RequestApprovalConfig.Approvers.Users {
					var users1 tfTypes.User
					users1.Email = types.StringPointerValue(usersItem.Email)
					users1.FamilyName = types.StringPointerValue(usersItem.FamilyName)
					users1.GivenName = types.StringPointerValue(usersItem.GivenName)
					users1.ID = types.StringValue(usersItem.ID)
					if usersItem.Status != nil {
						users1.Status = types.StringValue(string(*usersItem.Status))
					} else {
						users1.Status = types.StringNull()
					}
					if usersCount+1 > len(r.RequestConfig.RequestApprovalConfig.Approvers.Users) {
						r.RequestConfig.RequestApprovalConfig.Approvers.Users = append(r.RequestConfig.RequestApprovalConfig.Approvers.Users, users1)
					} else {
						r.RequestConfig.RequestApprovalConfig.Approvers.Users[usersCount].Email = users1.Email
						r.RequestConfig.RequestApprovalConfig.Approvers.Users[usersCount].FamilyName = users1.FamilyName
						r.RequestConfig.RequestApprovalConfig.Approvers.Users[usersCount].GivenName = users1.GivenName
						r.RequestConfig.RequestApprovalConfig.Approvers.Users[usersCount].ID = users1.ID
						r.RequestConfig.RequestApprovalConfig.Approvers.Users[usersCount].Status = users1.Status
					}
				}
			}
			if resp.RequestConfig.RequestApprovalConfig.ApproversStage2 == nil {
				r.RequestConfig.RequestApprovalConfig.ApproversStage2 = nil
			} else {
				r.RequestConfig.RequestApprovalConfig.ApproversStage2 = &tfTypes.AddAppToAppStoreInputApprovers{}
				r.RequestConfig.RequestApprovalConfig.ApproversStage2.Groups = []tfTypes.Group{}
				if len(r.RequestConfig.RequestApprovalConfig.ApproversStage2.Groups) > len(resp.RequestConfig.RequestApprovalConfig.ApproversStage2.Groups) {
					r.RequestConfig.RequestApprovalConfig.ApproversStage2.Groups = r.RequestConfig.RequestApprovalConfig.ApproversStage2.Groups[:len(resp.RequestConfig.RequestApprovalConfig.ApproversStage2.Groups)]
				}
				for groupsCount2, groupsItem2 := range resp.RequestConfig.RequestApprovalConfig.ApproversStage2.Groups {
					var groups5 tfTypes.Group
					groups5.AppID = types.StringPointerValue(groupsItem2.AppID)
					groups5.Description = types.StringPointerValue(groupsItem2.Description)
					if groupsItem2.GroupLifecycle != nil {
						groups5.GroupLifecycle = types.StringValue(string(*groupsItem2.GroupLifecycle))
					} else {
						groups5.GroupLifecycle = types.StringNull()
					}
					groups5.ID = types.StringPointerValue(groupsItem2.ID)
					groups5.IntegrationSpecificID = types.StringPointerValue(groupsItem2.IntegrationSpecificID)
					groups5.Name = types.StringPointerValue(groupsItem2.Name)
					groups5.SourceAppID = types.StringPointerValue(groupsItem2.SourceAppID)
					if groupsCount2+1 > len(r.RequestConfig.RequestApprovalConfig.ApproversStage2.Groups) {
						r.RequestConfig.RequestApprovalConfig.ApproversStage2.Groups = append(r.RequestConfig.RequestApprovalConfig.ApproversStage2.Groups, groups5)
					} else {
						r.RequestConfig.RequestApprovalConfig.ApproversStage2.Groups[groupsCount2].AppID = groups5.AppID
						r.RequestConfig.RequestApprovalConfig.ApproversStage2.Groups[groupsCount2].Description = groups5.Description
						r.RequestConfig.RequestApprovalConfig.ApproversStage2.Groups[groupsCount2].GroupLifecycle = groups5.GroupLifecycle
						r.RequestConfig.RequestApprovalConfig.ApproversStage2.Groups[groupsCount2].ID = groups5.ID
						r.RequestConfig.RequestApprovalConfig.ApproversStage2.Groups[groupsCount2].IntegrationSpecificID = groups5.IntegrationSpecificID
						r.RequestConfig.RequestApprovalConfig.ApproversStage2.Groups[groupsCount2].Name = groups5.Name
						r.RequestConfig.RequestApprovalConfig.ApproversStage2.Groups[groupsCount2].SourceAppID = groups5.SourceAppID
					}
				}
				r.RequestConfig.RequestApprovalConfig.ApproversStage2.Users = []tfTypes.User{}
				if len(r.RequestConfig.RequestApprovalConfig.ApproversStage2.Users) > len(resp.RequestConfig.RequestApprovalConfig.ApproversStage2.Users) {
					r.RequestConfig.RequestApprovalConfig.ApproversStage2.Users = r.RequestConfig.RequestApprovalConfig.ApproversStage2.Users[:len(resp.RequestConfig.RequestApprovalConfig.ApproversStage2.Users)]
				}
				for usersCount1, usersItem1 := range resp.RequestConfig.RequestApprovalConfig.ApproversStage2.Users {
					var users3 tfTypes.User
					users3.Email = types.StringPointerValue(usersItem1.Email)
					users3.FamilyName = types.StringPointerValue(usersItem1.FamilyName)
					users3.GivenName = types.StringPointerValue(usersItem1.GivenName)
					users3.ID = types.StringValue(usersItem1.ID)
					if usersItem1.Status != nil {
						users3.Status = types.StringValue(string(*usersItem1.Status))
					} else {
						users3.Status = types.StringNull()
					}
					if usersCount1+1 > len(r.RequestConfig.RequestApprovalConfig.ApproversStage2.Users) {
						r.RequestConfig.RequestApprovalConfig.ApproversStage2.Users = append(r.RequestConfig.RequestApprovalConfig.ApproversStage2.Users, users3)
					} else {
						r.RequestConfig.RequestApprovalConfig.ApproversStage2.Users[usersCount1].Email = users3.Email
						r.RequestConfig.RequestApprovalConfig.ApproversStage2.Users[usersCount1].FamilyName = users3.FamilyName
						r.RequestConfig.RequestApprovalConfig.ApproversStage2.Users[usersCount1].GivenName = users3.GivenName
						r.RequestConfig.RequestApprovalConfig.ApproversStage2.Users[usersCount1].ID = users3.ID
						r.RequestConfig.RequestApprovalConfig.ApproversStage2.Users[usersCount1].Status = users3.Status
					}
				}
			}
			r.RequestConfig.RequestApprovalConfig.CustomApprovalMessage = types.StringPointerValue(resp.RequestConfig.RequestApprovalConfig.CustomApprovalMessage)
			r.RequestConfig.RequestApprovalConfig.CustomApprovalMessageOverride = types.BoolPointerValue(resp.RequestConfig.RequestApprovalConfig.CustomApprovalMessageOverride)
			if resp.RequestConfig.RequestApprovalConfig.ManagerApproval != nil {
				r.RequestConfig.RequestApprovalConfig.ManagerApproval = types.StringValue(string(*resp.RequestConfig.RequestApprovalConfig.ManagerApproval))
			} else {
				r.RequestConfig.RequestApprovalConfig.ManagerApproval = types.StringNull()
			}
			r.RequestConfig.RequestApprovalConfig.RequestApprovalConfigOverride = types.BoolPointerValue(resp.RequestConfig.RequestApprovalConfig.RequestApprovalConfigOverride)
			r.RequestConfig.RequestApprovalConfig.RequireAdditionalApproval = types.BoolPointerValue(resp.RequestConfig.RequestApprovalConfig.RequireAdditionalApproval)
		}
		if resp.RequestConfig.RequestFulfillmentConfig == nil {
			r.RequestConfig.RequestFulfillmentConfig = nil
		} else {
			r.RequestConfig.RequestFulfillmentConfig = &tfTypes.RequestablePermissionInputRequestFulfillmentConfig{}
			r.RequestConfig.RequestFulfillmentConfig.ManualInstructions = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ManualInstructions)
			r.RequestConfig.RequestFulfillmentConfig.ManualStepsNeeded = types.BoolPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ManualStepsNeeded)
			if resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup == nil {
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup = nil
			} else {
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup = &tfTypes.Group{}
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.AppID = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.AppID)
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.Description = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.Description)
				if resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.GroupLifecycle != nil {
					r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.GroupLifecycle = types.StringValue(string(*resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.GroupLifecycle))
				} else {
					r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.GroupLifecycle = types.StringNull()
				}
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.ID = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.ID)
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.IntegrationSpecificID = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.IntegrationSpecificID)
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.Name = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.Name)
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.SourceAppID = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.SourceAppID)
			}
			if resp.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook == nil {
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook = nil
			} else {
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook = &tfTypes.AddAppToAppStoreInputAccessRemovalInlineWebhook{}
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.Description = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.Description)
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.HookType = types.StringValue(string(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.HookType))
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.ID = types.StringValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.ID)
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.Name = types.StringValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.Name)
			}
			r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccess = []types.String{}
			for _, v := range resp.RequestConfig.RequestFulfillmentConfig.TimeBasedAccess {
				r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccess = append(r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccess, types.StringValue(string(v)))
			}
			r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccessOverride = types.BoolPointerValue(resp.RequestConfig.RequestFulfillmentConfig.TimeBasedAccessOverride)
		}
		if resp.RequestConfig.RequestValidationInlineWebhook == nil {
			r.RequestConfig.RequestValidationInlineWebhook = nil
		} else {
			r.RequestConfig.RequestValidationInlineWebhook = &tfTypes.AddAppToAppStoreInputAccessRemovalInlineWebhook{}
			r.RequestConfig.RequestValidationInlineWebhook.Description = types.StringPointerValue(resp.RequestConfig.RequestValidationInlineWebhook.Description)
			r.RequestConfig.RequestValidationInlineWebhook.HookType = types.StringValue(string(resp.RequestConfig.RequestValidationInlineWebhook.HookType))
			r.RequestConfig.RequestValidationInlineWebhook.ID = types.StringValue(resp.RequestConfig.RequestValidationInlineWebhook.ID)
			r.RequestConfig.RequestValidationInlineWebhook.Name = types.StringValue(resp.RequestConfig.RequestValidationInlineWebhook.Name)
		}
		if resp.Type != nil {
			r.Type = types.StringValue(string(*resp.Type))
		} else {
			r.Type = types.StringNull()
		}
	}
}

func (r *RequestablePermissionResourceModel) ToSharedRequestablePermissionInputUpdate() *shared.RequestablePermissionInputUpdate {
	appID := new(string)
	if !r.AppID.IsUnknown() && !r.AppID.IsNull() {
		*appID = r.AppID.ValueString()
	} else {
		appID = nil
	}
	appClassID := new(string)
	if !r.AppClassID.IsUnknown() && !r.AppClassID.IsNull() {
		*appClassID = r.AppClassID.ValueString()
	} else {
		appClassID = nil
	}
	appInstanceID := new(string)
	if !r.AppInstanceID.IsUnknown() && !r.AppInstanceID.IsNull() {
		*appInstanceID = r.AppInstanceID.ValueString()
	} else {
		appInstanceID = nil
	}
	label := new(string)
	if !r.Label.IsUnknown() && !r.Label.IsNull() {
		*label = r.Label.ValueString()
	} else {
		label = nil
	}
	var requestConfig *shared.RequestablePermissionInputUpdateRequestConfig
	if r.RequestConfig != nil {
		appstoreVisibility := new(shared.RequestablePermissionInputUpdateAppStoreVisibilityOption)
		if !r.RequestConfig.AppstoreVisibility.IsUnknown() && !r.RequestConfig.AppstoreVisibility.IsNull() {
			*appstoreVisibility = shared.RequestablePermissionInputUpdateAppStoreVisibilityOption(r.RequestConfig.AppstoreVisibility.ValueString())
		} else {
			appstoreVisibility = nil
		}
		allowedGroupsOverride := new(bool)
		if !r.RequestConfig.AllowedGroupsOverride.IsUnknown() && !r.RequestConfig.AllowedGroupsOverride.IsNull() {
			*allowedGroupsOverride = r.RequestConfig.AllowedGroupsOverride.ValueBool()
		} else {
			allowedGroupsOverride = nil
		}
		var allowedGroups *shared.RequestablePermissionInputUpdateAllowedGroups
		if r.RequestConfig.AllowedGroups != nil {
			typeVar := new(shared.RequestablePermissionInputUpdateAllowedGroupsConfigType)
			if !r.RequestConfig.AllowedGroups.Type.IsUnknown() && !r.RequestConfig.AllowedGroups.Type.IsNull() {
				*typeVar = shared.RequestablePermissionInputUpdateAllowedGroupsConfigType(r.RequestConfig.AllowedGroups.Type.ValueString())
			} else {
				typeVar = nil
			}
			var groups []shared.BaseGroup = []shared.BaseGroup{}
			for _, groupsItem := range r.RequestConfig.AllowedGroups.Groups {
				id := new(string)
				if !groupsItem.ID.IsUnknown() && !groupsItem.ID.IsNull() {
					*id = groupsItem.ID.ValueString()
				} else {
					id = nil
				}
				appId1 := new(string)
				if !groupsItem.AppID.IsUnknown() && !groupsItem.AppID.IsNull() {
					*appId1 = groupsItem.AppID.ValueString()
				} else {
					appId1 = nil
				}
				integrationSpecificID := new(string)
				if !groupsItem.IntegrationSpecificID.IsUnknown() && !groupsItem.IntegrationSpecificID.IsNull() {
					*integrationSpecificID = groupsItem.IntegrationSpecificID.ValueString()
				} else {
					integrationSpecificID = nil
				}
				groups = append(groups, shared.BaseGroup{
					ID:                    id,
					AppID:                 appId1,
					IntegrationSpecificID: integrationSpecificID,
				})
			}
			allowedGroups = &shared.RequestablePermissionInputUpdateAllowedGroups{
				Type:   typeVar,
				Groups: groups,
			}
		}
		var requestApprovalConfig *shared.RequestablePermissionInputUpdateRequestApprovalConfig
		if r.RequestConfig.RequestApprovalConfig != nil {
			requestApprovalConfigOverride := new(bool)
			if !r.RequestConfig.RequestApprovalConfig.RequestApprovalConfigOverride.IsUnknown() && !r.RequestConfig.RequestApprovalConfig.RequestApprovalConfigOverride.IsNull() {
				*requestApprovalConfigOverride = r.RequestConfig.RequestApprovalConfig.RequestApprovalConfigOverride.ValueBool()
			} else {
				requestApprovalConfigOverride = nil
			}
			managerApproval := new(shared.RequestablePermissionInputUpdateManagerApprovalOption)
			if !r.RequestConfig.RequestApprovalConfig.ManagerApproval.IsUnknown() && !r.RequestConfig.RequestApprovalConfig.ManagerApproval.IsNull() {
				*managerApproval = shared.RequestablePermissionInputUpdateManagerApprovalOption(r.RequestConfig.RequestApprovalConfig.ManagerApproval.ValueString())
			} else {
				managerApproval = nil
			}
			requireAdditionalApproval := new(bool)
			if !r.RequestConfig.RequestApprovalConfig.RequireAdditionalApproval.IsUnknown() && !r.RequestConfig.RequestApprovalConfig.RequireAdditionalApproval.IsNull() {
				*requireAdditionalApproval = r.RequestConfig.RequestApprovalConfig.RequireAdditionalApproval.ValueBool()
			} else {
				requireAdditionalApproval = nil
			}
			customApprovalMessage := new(string)
			if !r.RequestConfig.RequestApprovalConfig.CustomApprovalMessage.IsUnknown() && !r.RequestConfig.RequestApprovalConfig.CustomApprovalMessage.IsNull() {
				*customApprovalMessage = r.RequestConfig.RequestApprovalConfig.CustomApprovalMessage.ValueString()
			} else {
				customApprovalMessage = nil
			}
			customApprovalMessageOverride := new(bool)
			if !r.RequestConfig.RequestApprovalConfig.CustomApprovalMessageOverride.IsUnknown() && !r.RequestConfig.RequestApprovalConfig.CustomApprovalMessageOverride.IsNull() {
				*customApprovalMessageOverride = r.RequestConfig.RequestApprovalConfig.CustomApprovalMessageOverride.ValueBool()
			} else {
				customApprovalMessageOverride = nil
			}
			var approvers *shared.RequestablePermissionInputUpdateApprovers
			if r.RequestConfig.RequestApprovalConfig.Approvers != nil {
				var groups1 []shared.BaseGroup = []shared.BaseGroup{}
				for _, groupsItem1 := range r.RequestConfig.RequestApprovalConfig.Approvers.Groups {
					id1 := new(string)
					if !groupsItem1.ID.IsUnknown() && !groupsItem1.ID.IsNull() {
						*id1 = groupsItem1.ID.ValueString()
					} else {
						id1 = nil
					}
					appId2 := new(string)
					if !groupsItem1.AppID.IsUnknown() && !groupsItem1.AppID.IsNull() {
						*appId2 = groupsItem1.AppID.ValueString()
					} else {
						appId2 = nil
					}
					integrationSpecificId1 := new(string)
					if !groupsItem1.IntegrationSpecificID.IsUnknown() && !groupsItem1.IntegrationSpecificID.IsNull() {
						*integrationSpecificId1 = groupsItem1.IntegrationSpecificID.ValueString()
					} else {
						integrationSpecificId1 = nil
					}
					groups1 = append(groups1, shared.BaseGroup{
						ID:                    id1,
						AppID:                 appId2,
						IntegrationSpecificID: integrationSpecificId1,
					})
				}
				var users []shared.BaseUser = []shared.BaseUser{}
				for _, usersItem := range r.RequestConfig.RequestApprovalConfig.Approvers.Users {
					id2 := usersItem.ID.ValueString()
					users = append(users, shared.BaseUser{
						ID: id2,
					})
				}
				approvers = &shared.RequestablePermissionInputUpdateApprovers{
					Groups: groups1,
					Users:  users,
				}
			}
			var approversStage2 *shared.RequestablePermissionInputUpdateApproversStage2
			if r.RequestConfig.RequestApprovalConfig.ApproversStage2 != nil {
				var groups2 []shared.BaseGroup = []shared.BaseGroup{}
				for _, groupsItem2 := range r.RequestConfig.RequestApprovalConfig.ApproversStage2.Groups {
					id3 := new(string)
					if !groupsItem2.ID.IsUnknown() && !groupsItem2.ID.IsNull() {
						*id3 = groupsItem2.ID.ValueString()
					} else {
						id3 = nil
					}
					appId3 := new(string)
					if !groupsItem2.AppID.IsUnknown() && !groupsItem2.AppID.IsNull() {
						*appId3 = groupsItem2.AppID.ValueString()
					} else {
						appId3 = nil
					}
					integrationSpecificId2 := new(string)
					if !groupsItem2.IntegrationSpecificID.IsUnknown() && !groupsItem2.IntegrationSpecificID.IsNull() {
						*integrationSpecificId2 = groupsItem2.IntegrationSpecificID.ValueString()
					} else {
						integrationSpecificId2 = nil
					}
					groups2 = append(groups2, shared.BaseGroup{
						ID:                    id3,
						AppID:                 appId3,
						IntegrationSpecificID: integrationSpecificId2,
					})
				}
				var users1 []shared.BaseUser = []shared.BaseUser{}
				for _, usersItem1 := range r.RequestConfig.RequestApprovalConfig.ApproversStage2.Users {
					id4 := usersItem1.ID.ValueString()
					users1 = append(users1, shared.BaseUser{
						ID: id4,
					})
				}
				approversStage2 = &shared.RequestablePermissionInputUpdateApproversStage2{
					Groups: groups2,
					Users:  users1,
				}
			}
			requestApprovalConfig = &shared.RequestablePermissionInputUpdateRequestApprovalConfig{
				RequestApprovalConfigOverride: requestApprovalConfigOverride,
				ManagerApproval:               managerApproval,
				RequireAdditionalApproval:     requireAdditionalApproval,
				CustomApprovalMessage:         customApprovalMessage,
				CustomApprovalMessageOverride: customApprovalMessageOverride,
				Approvers:                     approvers,
				ApproversStage2:               approversStage2,
			}
		}
		var accessRemovalInlineWebhook *shared.RequestablePermissionInputUpdateAccessRemovalInlineWebhook
		if r.RequestConfig.AccessRemovalInlineWebhook != nil {
			id5 := r.RequestConfig.AccessRemovalInlineWebhook.ID.ValueString()
			accessRemovalInlineWebhook = &shared.RequestablePermissionInputUpdateAccessRemovalInlineWebhook{
				ID: id5,
			}
		}
		var requestValidationInlineWebhook *shared.RequestablePermissionInputUpdateRequestValidationInlineWebhook
		if r.RequestConfig.RequestValidationInlineWebhook != nil {
			id6 := r.RequestConfig.RequestValidationInlineWebhook.ID.ValueString()
			requestValidationInlineWebhook = &shared.RequestablePermissionInputUpdateRequestValidationInlineWebhook{
				ID: id6,
			}
		}
		var requestFulfillmentConfig *shared.RequestablePermissionInputUpdateRequestFulfillmentConfig
		if r.RequestConfig.RequestFulfillmentConfig != nil {
			manualStepsNeeded := new(bool)
			if !r.RequestConfig.RequestFulfillmentConfig.ManualStepsNeeded.IsUnknown() && !r.RequestConfig.RequestFulfillmentConfig.ManualStepsNeeded.IsNull() {
				*manualStepsNeeded = r.RequestConfig.RequestFulfillmentConfig.ManualStepsNeeded.ValueBool()
			} else {
				manualStepsNeeded = nil
			}
			manualInstructions := new(string)
			if !r.RequestConfig.RequestFulfillmentConfig.ManualInstructions.IsUnknown() && !r.RequestConfig.RequestFulfillmentConfig.ManualInstructions.IsNull() {
				*manualInstructions = r.RequestConfig.RequestFulfillmentConfig.ManualInstructions.ValueString()
			} else {
				manualInstructions = nil
			}
			var timeBasedAccess []shared.TimeBasedAccessOptions = []shared.TimeBasedAccessOptions{}
			for _, timeBasedAccessItem := range r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccess {
				timeBasedAccess = append(timeBasedAccess, shared.TimeBasedAccessOptions(timeBasedAccessItem.ValueString()))
			}
			timeBasedAccessOverride := new(bool)
			if !r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccessOverride.IsUnknown() && !r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccessOverride.IsNull() {
				*timeBasedAccessOverride = r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccessOverride.ValueBool()
			} else {
				timeBasedAccessOverride = nil
			}
			var provisioningWebhook *shared.RequestablePermissionInputUpdateProvisioningWebhook
			if r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook != nil {
				id7 := r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.ID.ValueString()
				provisioningWebhook = &shared.RequestablePermissionInputUpdateProvisioningWebhook{
					ID: id7,
				}
			}
			requestFulfillmentConfig = &shared.RequestablePermissionInputUpdateRequestFulfillmentConfig{
				ManualStepsNeeded:       manualStepsNeeded,
				ManualInstructions:      manualInstructions,
				TimeBasedAccess:         timeBasedAccess,
				TimeBasedAccessOverride: timeBasedAccessOverride,
				ProvisioningWebhook:     provisioningWebhook,
			}
		}
		requestConfig = &shared.RequestablePermissionInputUpdateRequestConfig{
			AppstoreVisibility:             appstoreVisibility,
			AllowedGroupsOverride:          allowedGroupsOverride,
			AllowedGroups:                  allowedGroups,
			RequestApprovalConfig:          requestApprovalConfig,
			AccessRemovalInlineWebhook:     accessRemovalInlineWebhook,
			RequestValidationInlineWebhook: requestValidationInlineWebhook,
			RequestFulfillmentConfig:       requestFulfillmentConfig,
		}
	}
	out := shared.RequestablePermissionInputUpdate{
		AppID:         appID,
		AppClassID:    appClassID,
		AppInstanceID: appInstanceID,
		Label:         label,
		RequestConfig: requestConfig,
	}
	return &out
}
