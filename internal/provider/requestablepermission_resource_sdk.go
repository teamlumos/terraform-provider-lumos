// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/speakeasy/terraform-provider-lumos/internal/provider/types"
	"github.com/speakeasy/terraform-provider-lumos/internal/sdk/models/shared"
)

func (r *RequestablePermissionResourceModel) ToSharedRequestablePermissionInput() *shared.RequestablePermissionInput {
	appID := new(string)
	if !r.AppID.IsUnknown() && !r.AppID.IsNull() {
		*appID = r.AppID.ValueString()
	} else {
		appID = nil
	}
	appClassID := new(string)
	if !r.AppClassID.IsUnknown() && !r.AppClassID.IsNull() {
		*appClassID = r.AppClassID.ValueString()
	} else {
		appClassID = nil
	}
	appInstanceID := new(string)
	if !r.AppInstanceID.IsUnknown() && !r.AppInstanceID.IsNull() {
		*appInstanceID = r.AppInstanceID.ValueString()
	} else {
		appInstanceID = nil
	}
	label := r.Label.ValueString()
	var requestConfig *shared.RequestablePermissionInputRequestConfig
	if r.RequestConfig != nil {
		appstoreVisibility := new(shared.RequestablePermissionInputAppStoreVisibilityOption)
		if !r.RequestConfig.AppstoreVisibility.IsUnknown() && !r.RequestConfig.AppstoreVisibility.IsNull() {
			*appstoreVisibility = shared.RequestablePermissionInputAppStoreVisibilityOption(r.RequestConfig.AppstoreVisibility.ValueString())
		} else {
			appstoreVisibility = nil
		}
		allowedGroupsOverride := new(bool)
		if !r.RequestConfig.AllowedGroupsOverride.IsUnknown() && !r.RequestConfig.AllowedGroupsOverride.IsNull() {
			*allowedGroupsOverride = r.RequestConfig.AllowedGroupsOverride.ValueBool()
		} else {
			allowedGroupsOverride = nil
		}
		var allowedGroups *shared.RequestablePermissionInputAllowedGroups
		if r.RequestConfig.AllowedGroups != nil {
			typeVar := new(shared.RequestablePermissionInputAllowedGroupsConfigType)
			if !r.RequestConfig.AllowedGroups.Type.IsUnknown() && !r.RequestConfig.AllowedGroups.Type.IsNull() {
				*typeVar = shared.RequestablePermissionInputAllowedGroupsConfigType(r.RequestConfig.AllowedGroups.Type.ValueString())
			} else {
				typeVar = nil
			}
			var groups []shared.BaseGroup = []shared.BaseGroup{}
			for _, groupsItem := range r.RequestConfig.AllowedGroups.Groups {
				id := new(string)
				if !groupsItem.ID.IsUnknown() && !groupsItem.ID.IsNull() {
					*id = groupsItem.ID.ValueString()
				} else {
					id = nil
				}
				appId1 := new(string)
				if !groupsItem.AppID.IsUnknown() && !groupsItem.AppID.IsNull() {
					*appId1 = groupsItem.AppID.ValueString()
				} else {
					appId1 = nil
				}
				integrationSpecificID := new(string)
				if !groupsItem.IntegrationSpecificID.IsUnknown() && !groupsItem.IntegrationSpecificID.IsNull() {
					*integrationSpecificID = groupsItem.IntegrationSpecificID.ValueString()
				} else {
					integrationSpecificID = nil
				}
				groups = append(groups, shared.BaseGroup{
					ID:                    id,
					AppID:                 appId1,
					IntegrationSpecificID: integrationSpecificID,
				})
			}
			allowedGroups = &shared.RequestablePermissionInputAllowedGroups{
				Type:   typeVar,
				Groups: groups,
			}
		}
		var requestApprovalConfig *shared.RequestablePermissionInputRequestApprovalConfig
		if r.RequestConfig.RequestApprovalConfig != nil {
			requestApprovalConfigOverride := new(bool)
			if !r.RequestConfig.RequestApprovalConfig.RequestApprovalConfigOverride.IsUnknown() && !r.RequestConfig.RequestApprovalConfig.RequestApprovalConfigOverride.IsNull() {
				*requestApprovalConfigOverride = r.RequestConfig.RequestApprovalConfig.RequestApprovalConfigOverride.ValueBool()
			} else {
				requestApprovalConfigOverride = nil
			}
			managerApproval := new(shared.RequestablePermissionInputManagerApprovalOption)
			if !r.RequestConfig.RequestApprovalConfig.ManagerApproval.IsUnknown() && !r.RequestConfig.RequestApprovalConfig.ManagerApproval.IsNull() {
				*managerApproval = shared.RequestablePermissionInputManagerApprovalOption(r.RequestConfig.RequestApprovalConfig.ManagerApproval.ValueString())
			} else {
				managerApproval = nil
			}
			requireAdditionalApproval := new(bool)
			if !r.RequestConfig.RequestApprovalConfig.RequireAdditionalApproval.IsUnknown() && !r.RequestConfig.RequestApprovalConfig.RequireAdditionalApproval.IsNull() {
				*requireAdditionalApproval = r.RequestConfig.RequestApprovalConfig.RequireAdditionalApproval.ValueBool()
			} else {
				requireAdditionalApproval = nil
			}
			customApprovalMessage := new(string)
			if !r.RequestConfig.RequestApprovalConfig.CustomApprovalMessage.IsUnknown() && !r.RequestConfig.RequestApprovalConfig.CustomApprovalMessage.IsNull() {
				*customApprovalMessage = r.RequestConfig.RequestApprovalConfig.CustomApprovalMessage.ValueString()
			} else {
				customApprovalMessage = nil
			}
			customApprovalMessageOverride := new(bool)
			if !r.RequestConfig.RequestApprovalConfig.CustomApprovalMessageOverride.IsUnknown() && !r.RequestConfig.RequestApprovalConfig.CustomApprovalMessageOverride.IsNull() {
				*customApprovalMessageOverride = r.RequestConfig.RequestApprovalConfig.CustomApprovalMessageOverride.ValueBool()
			} else {
				customApprovalMessageOverride = nil
			}
			var requestApprovalStages []shared.RequestApprovalStageInput = []shared.RequestApprovalStageInput{}
			for _, requestApprovalStagesItem := range r.RequestConfig.RequestApprovalConfig.RequestApprovalStages {
				var approvers []shared.ApproverInput = []shared.ApproverInput{}
				for _, approversItem := range requestApprovalStagesItem.Approvers {
					type1 := new(shared.ApproverType)
					if !approversItem.Type.IsUnknown() && !approversItem.Type.IsNull() {
						*type1 = shared.ApproverType(approversItem.Type.ValueString())
					} else {
						type1 = nil
					}
					var user *shared.ApproverInputUser
					if approversItem.User != nil {
						id1 := approversItem.User.ID.ValueString()
						user = &shared.ApproverInputUser{
							ID: id1,
						}
					}
					var group *shared.ApproverInputGroup
					if approversItem.Group != nil {
						id2 := new(string)
						if !approversItem.Group.ID.IsUnknown() && !approversItem.Group.ID.IsNull() {
							*id2 = approversItem.Group.ID.ValueString()
						} else {
							id2 = nil
						}
						appId2 := new(string)
						if !approversItem.Group.AppID.IsUnknown() && !approversItem.Group.AppID.IsNull() {
							*appId2 = approversItem.Group.AppID.ValueString()
						} else {
							appId2 = nil
						}
						integrationSpecificId1 := new(string)
						if !approversItem.Group.IntegrationSpecificID.IsUnknown() && !approversItem.Group.IntegrationSpecificID.IsNull() {
							*integrationSpecificId1 = approversItem.Group.IntegrationSpecificID.ValueString()
						} else {
							integrationSpecificId1 = nil
						}
						group = &shared.ApproverInputGroup{
							ID:                    id2,
							AppID:                 appId2,
							IntegrationSpecificID: integrationSpecificId1,
						}
					}
					approvers = append(approvers, shared.ApproverInput{
						Type:  type1,
						User:  user,
						Group: group,
					})
				}
				requestApprovalStages = append(requestApprovalStages, shared.RequestApprovalStageInput{
					Approvers: approvers,
				})
			}
			requestApprovalConfig = &shared.RequestablePermissionInputRequestApprovalConfig{
				RequestApprovalConfigOverride: requestApprovalConfigOverride,
				ManagerApproval:               managerApproval,
				RequireAdditionalApproval:     requireAdditionalApproval,
				CustomApprovalMessage:         customApprovalMessage,
				CustomApprovalMessageOverride: customApprovalMessageOverride,
				RequestApprovalStages:         requestApprovalStages,
			}
		}
		var accessRemovalInlineWebhook *shared.RequestablePermissionInputAccessRemovalInlineWebhook
		if r.RequestConfig.AccessRemovalInlineWebhook != nil {
			id3 := r.RequestConfig.AccessRemovalInlineWebhook.ID.ValueString()
			accessRemovalInlineWebhook = &shared.RequestablePermissionInputAccessRemovalInlineWebhook{
				ID: id3,
			}
		}
		var requestValidationInlineWebhook *shared.RequestablePermissionInputRequestValidationInlineWebhook
		if r.RequestConfig.RequestValidationInlineWebhook != nil {
			id4 := r.RequestConfig.RequestValidationInlineWebhook.ID.ValueString()
			requestValidationInlineWebhook = &shared.RequestablePermissionInputRequestValidationInlineWebhook{
				ID: id4,
			}
		}
		var requestFulfillmentConfig *shared.RequestablePermissionInputRequestFulfillmentConfig
		if r.RequestConfig.RequestFulfillmentConfig != nil {
			manualStepsNeeded := new(bool)
			if !r.RequestConfig.RequestFulfillmentConfig.ManualStepsNeeded.IsUnknown() && !r.RequestConfig.RequestFulfillmentConfig.ManualStepsNeeded.IsNull() {
				*manualStepsNeeded = r.RequestConfig.RequestFulfillmentConfig.ManualStepsNeeded.ValueBool()
			} else {
				manualStepsNeeded = nil
			}
			manualInstructions := new(string)
			if !r.RequestConfig.RequestFulfillmentConfig.ManualInstructions.IsUnknown() && !r.RequestConfig.RequestFulfillmentConfig.ManualInstructions.IsNull() {
				*manualInstructions = r.RequestConfig.RequestFulfillmentConfig.ManualInstructions.ValueString()
			} else {
				manualInstructions = nil
			}
			var timeBasedAccess []shared.TimeBasedAccessOptions = []shared.TimeBasedAccessOptions{}
			for _, timeBasedAccessItem := range r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccess {
				timeBasedAccess = append(timeBasedAccess, shared.TimeBasedAccessOptions(timeBasedAccessItem.ValueString()))
			}
			timeBasedAccessOverride := new(bool)
			if !r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccessOverride.IsUnknown() && !r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccessOverride.IsNull() {
				*timeBasedAccessOverride = r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccessOverride.ValueBool()
			} else {
				timeBasedAccessOverride = nil
			}
			var provisioningGroup *shared.RequestablePermissionInputProvisioningGroup
			if r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup != nil {
				id5 := new(string)
				if !r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.ID.IsUnknown() && !r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.ID.IsNull() {
					*id5 = r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.ID.ValueString()
				} else {
					id5 = nil
				}
				appId3 := new(string)
				if !r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.AppID.IsUnknown() && !r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.AppID.IsNull() {
					*appId3 = r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.AppID.ValueString()
				} else {
					appId3 = nil
				}
				integrationSpecificId2 := new(string)
				if !r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.IntegrationSpecificID.IsUnknown() && !r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.IntegrationSpecificID.IsNull() {
					*integrationSpecificId2 = r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.IntegrationSpecificID.ValueString()
				} else {
					integrationSpecificId2 = nil
				}
				provisioningGroup = &shared.RequestablePermissionInputProvisioningGroup{
					ID:                    id5,
					AppID:                 appId3,
					IntegrationSpecificID: integrationSpecificId2,
				}
			}
			var provisioningWebhook *shared.RequestablePermissionInputProvisioningWebhook
			if r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook != nil {
				id6 := r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.ID.ValueString()
				provisioningWebhook = &shared.RequestablePermissionInputProvisioningWebhook{
					ID: id6,
				}
			}
			requestFulfillmentConfig = &shared.RequestablePermissionInputRequestFulfillmentConfig{
				ManualStepsNeeded:       manualStepsNeeded,
				ManualInstructions:      manualInstructions,
				TimeBasedAccess:         timeBasedAccess,
				TimeBasedAccessOverride: timeBasedAccessOverride,
				ProvisioningGroup:       provisioningGroup,
				ProvisioningWebhook:     provisioningWebhook,
			}
		}
		requestConfig = &shared.RequestablePermissionInputRequestConfig{
			AppstoreVisibility:             appstoreVisibility,
			AllowedGroupsOverride:          allowedGroupsOverride,
			AllowedGroups:                  allowedGroups,
			RequestApprovalConfig:          requestApprovalConfig,
			AccessRemovalInlineWebhook:     accessRemovalInlineWebhook,
			RequestValidationInlineWebhook: requestValidationInlineWebhook,
			RequestFulfillmentConfig:       requestFulfillmentConfig,
		}
	}
	out := shared.RequestablePermissionInput{
		AppID:         appID,
		AppClassID:    appClassID,
		AppInstanceID: appInstanceID,
		Label:         label,
		RequestConfig: requestConfig,
	}
	return &out
}

func (r *RequestablePermissionResourceModel) RefreshFromSharedRequestablePermissionOutput(resp *shared.RequestablePermissionOutput) {
	if resp != nil {
		r.AppClassID = types.StringValue(resp.AppClassID)
		r.AppID = types.StringValue(resp.AppID)
		r.AppInstanceID = types.StringValue(resp.AppInstanceID)
		r.ID = types.StringPointerValue(resp.ID)
		r.Label = types.StringValue(resp.Label)
		if r.RequestConfig == nil {
			r.RequestConfig = &tfTypes.RequestablePermissionInputRequestConfig{}
		}
		if resp.RequestConfig.AccessRemovalInlineWebhook == nil {
			r.RequestConfig.AccessRemovalInlineWebhook = nil
		} else {
			r.RequestConfig.AccessRemovalInlineWebhook = &tfTypes.AddAppToAppStoreInputAccessRemovalInlineWebhook{}
			r.RequestConfig.AccessRemovalInlineWebhook.Description = types.StringPointerValue(resp.RequestConfig.AccessRemovalInlineWebhook.Description)
			r.RequestConfig.AccessRemovalInlineWebhook.HookType = types.StringValue(string(resp.RequestConfig.AccessRemovalInlineWebhook.HookType))
			r.RequestConfig.AccessRemovalInlineWebhook.ID = types.StringValue(resp.RequestConfig.AccessRemovalInlineWebhook.ID)
			r.RequestConfig.AccessRemovalInlineWebhook.Name = types.StringValue(resp.RequestConfig.AccessRemovalInlineWebhook.Name)
		}
		if resp.RequestConfig.AllowedGroups == nil {
			r.RequestConfig.AllowedGroups = nil
		} else {
			r.RequestConfig.AllowedGroups = &tfTypes.AddAppToAppStoreInputAllowedGroups{}
			r.RequestConfig.AllowedGroups.Groups = []tfTypes.Group{}
			if len(r.RequestConfig.AllowedGroups.Groups) > len(resp.RequestConfig.AllowedGroups.Groups) {
				r.RequestConfig.AllowedGroups.Groups = r.RequestConfig.AllowedGroups.Groups[:len(resp.RequestConfig.AllowedGroups.Groups)]
			}
			for groupsCount, groupsItem := range resp.RequestConfig.AllowedGroups.Groups {
				var groups1 tfTypes.Group
				groups1.AppID = types.StringPointerValue(groupsItem.AppID)
				groups1.Description = types.StringPointerValue(groupsItem.Description)
				if groupsItem.GroupLifecycle != nil {
					groups1.GroupLifecycle = types.StringValue(string(*groupsItem.GroupLifecycle))
				} else {
					groups1.GroupLifecycle = types.StringNull()
				}
				groups1.ID = types.StringPointerValue(groupsItem.ID)
				groups1.IntegrationSpecificID = types.StringPointerValue(groupsItem.IntegrationSpecificID)
				groups1.Name = types.StringPointerValue(groupsItem.Name)
				groups1.SourceAppID = types.StringPointerValue(groupsItem.SourceAppID)
				if groupsCount+1 > len(r.RequestConfig.AllowedGroups.Groups) {
					r.RequestConfig.AllowedGroups.Groups = append(r.RequestConfig.AllowedGroups.Groups, groups1)
				} else {
					r.RequestConfig.AllowedGroups.Groups[groupsCount].AppID = groups1.AppID
					r.RequestConfig.AllowedGroups.Groups[groupsCount].Description = groups1.Description
					r.RequestConfig.AllowedGroups.Groups[groupsCount].GroupLifecycle = groups1.GroupLifecycle
					r.RequestConfig.AllowedGroups.Groups[groupsCount].ID = groups1.ID
					r.RequestConfig.AllowedGroups.Groups[groupsCount].IntegrationSpecificID = groups1.IntegrationSpecificID
					r.RequestConfig.AllowedGroups.Groups[groupsCount].Name = groups1.Name
					r.RequestConfig.AllowedGroups.Groups[groupsCount].SourceAppID = groups1.SourceAppID
				}
			}
			if resp.RequestConfig.AllowedGroups.Type != nil {
				r.RequestConfig.AllowedGroups.Type = types.StringValue(string(*resp.RequestConfig.AllowedGroups.Type))
			} else {
				r.RequestConfig.AllowedGroups.Type = types.StringNull()
			}
		}
		r.RequestConfig.AllowedGroupsOverride = types.BoolPointerValue(resp.RequestConfig.AllowedGroupsOverride)
		if resp.RequestConfig.AppstoreVisibility != nil {
			r.RequestConfig.AppstoreVisibility = types.StringValue(string(*resp.RequestConfig.AppstoreVisibility))
		} else {
			r.RequestConfig.AppstoreVisibility = types.StringNull()
		}
		if resp.RequestConfig.RequestApprovalConfig == nil {
			r.RequestConfig.RequestApprovalConfig = nil
		} else {
			r.RequestConfig.RequestApprovalConfig = &tfTypes.RequestablePermissionInputRequestApprovalConfig{}
			r.RequestConfig.RequestApprovalConfig.CustomApprovalMessage = types.StringPointerValue(resp.RequestConfig.RequestApprovalConfig.CustomApprovalMessage)
			r.RequestConfig.RequestApprovalConfig.CustomApprovalMessageOverride = types.BoolPointerValue(resp.RequestConfig.RequestApprovalConfig.CustomApprovalMessageOverride)
			if resp.RequestConfig.RequestApprovalConfig.ManagerApproval != nil {
				r.RequestConfig.RequestApprovalConfig.ManagerApproval = types.StringValue(string(*resp.RequestConfig.RequestApprovalConfig.ManagerApproval))
			} else {
				r.RequestConfig.RequestApprovalConfig.ManagerApproval = types.StringNull()
			}
			r.RequestConfig.RequestApprovalConfig.RequestApprovalConfigOverride = types.BoolPointerValue(resp.RequestConfig.RequestApprovalConfig.RequestApprovalConfigOverride)
			r.RequestConfig.RequestApprovalConfig.RequestApprovalStages = []tfTypes.RequestApprovalStageInput{}
			if len(r.RequestConfig.RequestApprovalConfig.RequestApprovalStages) > len(resp.RequestConfig.RequestApprovalConfig.RequestApprovalStages) {
				r.RequestConfig.RequestApprovalConfig.RequestApprovalStages = r.RequestConfig.RequestApprovalConfig.RequestApprovalStages[:len(resp.RequestConfig.RequestApprovalConfig.RequestApprovalStages)]
			}
			for requestApprovalStagesCount, requestApprovalStagesItem := range resp.RequestConfig.RequestApprovalConfig.RequestApprovalStages {
				var requestApprovalStages1 tfTypes.RequestApprovalStageInput
				requestApprovalStages1.Approvers = []tfTypes.ApproverInput{}
				for approversCount, approversItem := range requestApprovalStagesItem.Approvers {
					var approvers1 tfTypes.ApproverInput
					if approversItem.Group == nil {
						approvers1.Group = nil
					} else {
						approvers1.Group = &tfTypes.Group{}
						approvers1.Group.AppID = types.StringPointerValue(approversItem.Group.AppID)
						approvers1.Group.Description = types.StringPointerValue(approversItem.Group.Description)
						if approversItem.Group.GroupLifecycle != nil {
							approvers1.Group.GroupLifecycle = types.StringValue(string(*approversItem.Group.GroupLifecycle))
						} else {
							approvers1.Group.GroupLifecycle = types.StringNull()
						}
						approvers1.Group.ID = types.StringPointerValue(approversItem.Group.ID)
						approvers1.Group.IntegrationSpecificID = types.StringPointerValue(approversItem.Group.IntegrationSpecificID)
						approvers1.Group.Name = types.StringPointerValue(approversItem.Group.Name)
						approvers1.Group.SourceAppID = types.StringPointerValue(approversItem.Group.SourceAppID)
					}
					approvers1.Type = types.StringValue(string(approversItem.Type))
					if approversItem.User == nil {
						approvers1.User = nil
					} else {
						approvers1.User = &tfTypes.User{}
						approvers1.User.Email = types.StringPointerValue(approversItem.User.Email)
						approvers1.User.FamilyName = types.StringPointerValue(approversItem.User.FamilyName)
						approvers1.User.GivenName = types.StringPointerValue(approversItem.User.GivenName)
						approvers1.User.ID = types.StringValue(approversItem.User.ID)
						if approversItem.User.Status != nil {
							approvers1.User.Status = types.StringValue(string(*approversItem.User.Status))
						} else {
							approvers1.User.Status = types.StringNull()
						}
					}
					if approversCount+1 > len(requestApprovalStages1.Approvers) {
						requestApprovalStages1.Approvers = append(requestApprovalStages1.Approvers, approvers1)
					} else {
						requestApprovalStages1.Approvers[approversCount].Group = approvers1.Group
						requestApprovalStages1.Approvers[approversCount].Type = approvers1.Type
						requestApprovalStages1.Approvers[approversCount].User = approvers1.User
					}
				}
				if requestApprovalStagesCount+1 > len(r.RequestConfig.RequestApprovalConfig.RequestApprovalStages) {
					r.RequestConfig.RequestApprovalConfig.RequestApprovalStages = append(r.RequestConfig.RequestApprovalConfig.RequestApprovalStages, requestApprovalStages1)
				} else {
					r.RequestConfig.RequestApprovalConfig.RequestApprovalStages[requestApprovalStagesCount].Approvers = requestApprovalStages1.Approvers
				}
			}
			r.RequestConfig.RequestApprovalConfig.RequireAdditionalApproval = types.BoolPointerValue(resp.RequestConfig.RequestApprovalConfig.RequireAdditionalApproval)
		}
		if resp.RequestConfig.RequestFulfillmentConfig == nil {
			r.RequestConfig.RequestFulfillmentConfig = nil
		} else {
			r.RequestConfig.RequestFulfillmentConfig = &tfTypes.RequestablePermissionInputRequestFulfillmentConfig{}
			r.RequestConfig.RequestFulfillmentConfig.ManualInstructions = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ManualInstructions)
			r.RequestConfig.RequestFulfillmentConfig.ManualStepsNeeded = types.BoolPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ManualStepsNeeded)
			if resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup == nil {
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup = nil
			} else {
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup = &tfTypes.Group{}
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.AppID = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.AppID)
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.Description = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.Description)
				if resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.GroupLifecycle != nil {
					r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.GroupLifecycle = types.StringValue(string(*resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.GroupLifecycle))
				} else {
					r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.GroupLifecycle = types.StringNull()
				}
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.ID = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.ID)
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.IntegrationSpecificID = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.IntegrationSpecificID)
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.Name = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.Name)
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.SourceAppID = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.SourceAppID)
			}
			if resp.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook == nil {
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook = nil
			} else {
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook = &tfTypes.AddAppToAppStoreInputAccessRemovalInlineWebhook{}
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.Description = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.Description)
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.HookType = types.StringValue(string(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.HookType))
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.ID = types.StringValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.ID)
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.Name = types.StringValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.Name)
			}
			r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccess = []types.String{}
			for _, v := range resp.RequestConfig.RequestFulfillmentConfig.TimeBasedAccess {
				r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccess = append(r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccess, types.StringValue(string(v)))
			}
			r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccessOverride = types.BoolPointerValue(resp.RequestConfig.RequestFulfillmentConfig.TimeBasedAccessOverride)
		}
		if resp.RequestConfig.RequestValidationInlineWebhook == nil {
			r.RequestConfig.RequestValidationInlineWebhook = nil
		} else {
			r.RequestConfig.RequestValidationInlineWebhook = &tfTypes.AddAppToAppStoreInputAccessRemovalInlineWebhook{}
			r.RequestConfig.RequestValidationInlineWebhook.Description = types.StringPointerValue(resp.RequestConfig.RequestValidationInlineWebhook.Description)
			r.RequestConfig.RequestValidationInlineWebhook.HookType = types.StringValue(string(resp.RequestConfig.RequestValidationInlineWebhook.HookType))
			r.RequestConfig.RequestValidationInlineWebhook.ID = types.StringValue(resp.RequestConfig.RequestValidationInlineWebhook.ID)
			r.RequestConfig.RequestValidationInlineWebhook.Name = types.StringValue(resp.RequestConfig.RequestValidationInlineWebhook.Name)
		}
		if resp.Type != nil {
			r.Type = types.StringValue(string(*resp.Type))
		} else {
			r.Type = types.StringNull()
		}
	}
}

func (r *RequestablePermissionResourceModel) ToSharedRequestablePermissionInputUpdate() *shared.RequestablePermissionInputUpdate {
	appID := new(string)
	if !r.AppID.IsUnknown() && !r.AppID.IsNull() {
		*appID = r.AppID.ValueString()
	} else {
		appID = nil
	}
	appClassID := new(string)
	if !r.AppClassID.IsUnknown() && !r.AppClassID.IsNull() {
		*appClassID = r.AppClassID.ValueString()
	} else {
		appClassID = nil
	}
	appInstanceID := new(string)
	if !r.AppInstanceID.IsUnknown() && !r.AppInstanceID.IsNull() {
		*appInstanceID = r.AppInstanceID.ValueString()
	} else {
		appInstanceID = nil
	}
	label := new(string)
	if !r.Label.IsUnknown() && !r.Label.IsNull() {
		*label = r.Label.ValueString()
	} else {
		label = nil
	}
	var requestConfig *shared.RequestablePermissionInputUpdateRequestConfig
	if r.RequestConfig != nil {
		appstoreVisibility := new(shared.RequestablePermissionInputUpdateAppStoreVisibilityOption)
		if !r.RequestConfig.AppstoreVisibility.IsUnknown() && !r.RequestConfig.AppstoreVisibility.IsNull() {
			*appstoreVisibility = shared.RequestablePermissionInputUpdateAppStoreVisibilityOption(r.RequestConfig.AppstoreVisibility.ValueString())
		} else {
			appstoreVisibility = nil
		}
		allowedGroupsOverride := new(bool)
		if !r.RequestConfig.AllowedGroupsOverride.IsUnknown() && !r.RequestConfig.AllowedGroupsOverride.IsNull() {
			*allowedGroupsOverride = r.RequestConfig.AllowedGroupsOverride.ValueBool()
		} else {
			allowedGroupsOverride = nil
		}
		var allowedGroups *shared.RequestablePermissionInputUpdateAllowedGroups
		if r.RequestConfig.AllowedGroups != nil {
			typeVar := new(shared.RequestablePermissionInputUpdateAllowedGroupsConfigType)
			if !r.RequestConfig.AllowedGroups.Type.IsUnknown() && !r.RequestConfig.AllowedGroups.Type.IsNull() {
				*typeVar = shared.RequestablePermissionInputUpdateAllowedGroupsConfigType(r.RequestConfig.AllowedGroups.Type.ValueString())
			} else {
				typeVar = nil
			}
			var groups []shared.BaseGroup = []shared.BaseGroup{}
			for _, groupsItem := range r.RequestConfig.AllowedGroups.Groups {
				id := new(string)
				if !groupsItem.ID.IsUnknown() && !groupsItem.ID.IsNull() {
					*id = groupsItem.ID.ValueString()
				} else {
					id = nil
				}
				appId1 := new(string)
				if !groupsItem.AppID.IsUnknown() && !groupsItem.AppID.IsNull() {
					*appId1 = groupsItem.AppID.ValueString()
				} else {
					appId1 = nil
				}
				integrationSpecificID := new(string)
				if !groupsItem.IntegrationSpecificID.IsUnknown() && !groupsItem.IntegrationSpecificID.IsNull() {
					*integrationSpecificID = groupsItem.IntegrationSpecificID.ValueString()
				} else {
					integrationSpecificID = nil
				}
				groups = append(groups, shared.BaseGroup{
					ID:                    id,
					AppID:                 appId1,
					IntegrationSpecificID: integrationSpecificID,
				})
			}
			allowedGroups = &shared.RequestablePermissionInputUpdateAllowedGroups{
				Type:   typeVar,
				Groups: groups,
			}
		}
		var requestApprovalConfig *shared.RequestablePermissionInputUpdateRequestApprovalConfig
		if r.RequestConfig.RequestApprovalConfig != nil {
			requestApprovalConfigOverride := new(bool)
			if !r.RequestConfig.RequestApprovalConfig.RequestApprovalConfigOverride.IsUnknown() && !r.RequestConfig.RequestApprovalConfig.RequestApprovalConfigOverride.IsNull() {
				*requestApprovalConfigOverride = r.RequestConfig.RequestApprovalConfig.RequestApprovalConfigOverride.ValueBool()
			} else {
				requestApprovalConfigOverride = nil
			}
			managerApproval := new(shared.RequestablePermissionInputUpdateManagerApprovalOption)
			if !r.RequestConfig.RequestApprovalConfig.ManagerApproval.IsUnknown() && !r.RequestConfig.RequestApprovalConfig.ManagerApproval.IsNull() {
				*managerApproval = shared.RequestablePermissionInputUpdateManagerApprovalOption(r.RequestConfig.RequestApprovalConfig.ManagerApproval.ValueString())
			} else {
				managerApproval = nil
			}
			requireAdditionalApproval := new(bool)
			if !r.RequestConfig.RequestApprovalConfig.RequireAdditionalApproval.IsUnknown() && !r.RequestConfig.RequestApprovalConfig.RequireAdditionalApproval.IsNull() {
				*requireAdditionalApproval = r.RequestConfig.RequestApprovalConfig.RequireAdditionalApproval.ValueBool()
			} else {
				requireAdditionalApproval = nil
			}
			customApprovalMessage := new(string)
			if !r.RequestConfig.RequestApprovalConfig.CustomApprovalMessage.IsUnknown() && !r.RequestConfig.RequestApprovalConfig.CustomApprovalMessage.IsNull() {
				*customApprovalMessage = r.RequestConfig.RequestApprovalConfig.CustomApprovalMessage.ValueString()
			} else {
				customApprovalMessage = nil
			}
			customApprovalMessageOverride := new(bool)
			if !r.RequestConfig.RequestApprovalConfig.CustomApprovalMessageOverride.IsUnknown() && !r.RequestConfig.RequestApprovalConfig.CustomApprovalMessageOverride.IsNull() {
				*customApprovalMessageOverride = r.RequestConfig.RequestApprovalConfig.CustomApprovalMessageOverride.ValueBool()
			} else {
				customApprovalMessageOverride = nil
			}
			var requestApprovalStages []shared.RequestApprovalStageInput = []shared.RequestApprovalStageInput{}
			for _, requestApprovalStagesItem := range r.RequestConfig.RequestApprovalConfig.RequestApprovalStages {
				var approvers []shared.ApproverInput = []shared.ApproverInput{}
				for _, approversItem := range requestApprovalStagesItem.Approvers {
					type1 := new(shared.ApproverType)
					if !approversItem.Type.IsUnknown() && !approversItem.Type.IsNull() {
						*type1 = shared.ApproverType(approversItem.Type.ValueString())
					} else {
						type1 = nil
					}
					var user *shared.ApproverInputUser
					if approversItem.User != nil {
						id1 := approversItem.User.ID.ValueString()
						user = &shared.ApproverInputUser{
							ID: id1,
						}
					}
					var group *shared.ApproverInputGroup
					if approversItem.Group != nil {
						id2 := new(string)
						if !approversItem.Group.ID.IsUnknown() && !approversItem.Group.ID.IsNull() {
							*id2 = approversItem.Group.ID.ValueString()
						} else {
							id2 = nil
						}
						appId2 := new(string)
						if !approversItem.Group.AppID.IsUnknown() && !approversItem.Group.AppID.IsNull() {
							*appId2 = approversItem.Group.AppID.ValueString()
						} else {
							appId2 = nil
						}
						integrationSpecificId1 := new(string)
						if !approversItem.Group.IntegrationSpecificID.IsUnknown() && !approversItem.Group.IntegrationSpecificID.IsNull() {
							*integrationSpecificId1 = approversItem.Group.IntegrationSpecificID.ValueString()
						} else {
							integrationSpecificId1 = nil
						}
						group = &shared.ApproverInputGroup{
							ID:                    id2,
							AppID:                 appId2,
							IntegrationSpecificID: integrationSpecificId1,
						}
					}
					approvers = append(approvers, shared.ApproverInput{
						Type:  type1,
						User:  user,
						Group: group,
					})
				}
				requestApprovalStages = append(requestApprovalStages, shared.RequestApprovalStageInput{
					Approvers: approvers,
				})
			}
			requestApprovalConfig = &shared.RequestablePermissionInputUpdateRequestApprovalConfig{
				RequestApprovalConfigOverride: requestApprovalConfigOverride,
				ManagerApproval:               managerApproval,
				RequireAdditionalApproval:     requireAdditionalApproval,
				CustomApprovalMessage:         customApprovalMessage,
				CustomApprovalMessageOverride: customApprovalMessageOverride,
				RequestApprovalStages:         requestApprovalStages,
			}
		}
		var accessRemovalInlineWebhook *shared.RequestablePermissionInputUpdateAccessRemovalInlineWebhook
		if r.RequestConfig.AccessRemovalInlineWebhook != nil {
			id3 := r.RequestConfig.AccessRemovalInlineWebhook.ID.ValueString()
			accessRemovalInlineWebhook = &shared.RequestablePermissionInputUpdateAccessRemovalInlineWebhook{
				ID: id3,
			}
		}
		var requestValidationInlineWebhook *shared.RequestablePermissionInputUpdateRequestValidationInlineWebhook
		if r.RequestConfig.RequestValidationInlineWebhook != nil {
			id4 := r.RequestConfig.RequestValidationInlineWebhook.ID.ValueString()
			requestValidationInlineWebhook = &shared.RequestablePermissionInputUpdateRequestValidationInlineWebhook{
				ID: id4,
			}
		}
		var requestFulfillmentConfig *shared.RequestablePermissionInputUpdateRequestFulfillmentConfig
		if r.RequestConfig.RequestFulfillmentConfig != nil {
			manualStepsNeeded := new(bool)
			if !r.RequestConfig.RequestFulfillmentConfig.ManualStepsNeeded.IsUnknown() && !r.RequestConfig.RequestFulfillmentConfig.ManualStepsNeeded.IsNull() {
				*manualStepsNeeded = r.RequestConfig.RequestFulfillmentConfig.ManualStepsNeeded.ValueBool()
			} else {
				manualStepsNeeded = nil
			}
			manualInstructions := new(string)
			if !r.RequestConfig.RequestFulfillmentConfig.ManualInstructions.IsUnknown() && !r.RequestConfig.RequestFulfillmentConfig.ManualInstructions.IsNull() {
				*manualInstructions = r.RequestConfig.RequestFulfillmentConfig.ManualInstructions.ValueString()
			} else {
				manualInstructions = nil
			}
			var timeBasedAccess []shared.TimeBasedAccessOptions = []shared.TimeBasedAccessOptions{}
			for _, timeBasedAccessItem := range r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccess {
				timeBasedAccess = append(timeBasedAccess, shared.TimeBasedAccessOptions(timeBasedAccessItem.ValueString()))
			}
			timeBasedAccessOverride := new(bool)
			if !r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccessOverride.IsUnknown() && !r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccessOverride.IsNull() {
				*timeBasedAccessOverride = r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccessOverride.ValueBool()
			} else {
				timeBasedAccessOverride = nil
			}
			var provisioningWebhook *shared.RequestablePermissionInputUpdateProvisioningWebhook
			if r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook != nil {
				id5 := r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.ID.ValueString()
				provisioningWebhook = &shared.RequestablePermissionInputUpdateProvisioningWebhook{
					ID: id5,
				}
			}
			requestFulfillmentConfig = &shared.RequestablePermissionInputUpdateRequestFulfillmentConfig{
				ManualStepsNeeded:       manualStepsNeeded,
				ManualInstructions:      manualInstructions,
				TimeBasedAccess:         timeBasedAccess,
				TimeBasedAccessOverride: timeBasedAccessOverride,
				ProvisioningWebhook:     provisioningWebhook,
			}
		}
		requestConfig = &shared.RequestablePermissionInputUpdateRequestConfig{
			AppstoreVisibility:             appstoreVisibility,
			AllowedGroupsOverride:          allowedGroupsOverride,
			AllowedGroups:                  allowedGroups,
			RequestApprovalConfig:          requestApprovalConfig,
			AccessRemovalInlineWebhook:     accessRemovalInlineWebhook,
			RequestValidationInlineWebhook: requestValidationInlineWebhook,
			RequestFulfillmentConfig:       requestFulfillmentConfig,
		}
	}
	out := shared.RequestablePermissionInputUpdate{
		AppID:         appID,
		AppClassID:    appClassID,
		AppInstanceID: appInstanceID,
		Label:         label,
		RequestConfig: requestConfig,
	}
	return &out
}
