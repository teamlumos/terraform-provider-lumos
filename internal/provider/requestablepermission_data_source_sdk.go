// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/teamlumos/terraform-provider-lumos/internal/provider/types"
	"github.com/teamlumos/terraform-provider-lumos/internal/sdk/models/shared"
)

func (r *RequestablePermissionDataSourceModel) RefreshFromSharedRequestablePermissionOutput(resp *shared.RequestablePermissionOutput) {
	if resp != nil {
		r.AppClassID = types.StringValue(resp.AppClassID)
		r.AppID = types.StringValue(resp.AppID)
		r.AppInstanceID = types.StringValue(resp.AppInstanceID)
		r.ID = types.StringPointerValue(resp.ID)
		r.Label = types.StringValue(resp.Label)
		if resp.RequestConfig.AccessRemovalInlineWebhook == nil {
			r.RequestConfig.AccessRemovalInlineWebhook = nil
		} else {
			r.RequestConfig.AccessRemovalInlineWebhook = &tfTypes.AddAppToAppStoreInputAccessRemovalInlineWebhook{}
			r.RequestConfig.AccessRemovalInlineWebhook.Description = types.StringPointerValue(resp.RequestConfig.AccessRemovalInlineWebhook.Description)
			r.RequestConfig.AccessRemovalInlineWebhook.HookType = types.StringValue(string(resp.RequestConfig.AccessRemovalInlineWebhook.HookType))
			r.RequestConfig.AccessRemovalInlineWebhook.ID = types.StringValue(resp.RequestConfig.AccessRemovalInlineWebhook.ID)
			r.RequestConfig.AccessRemovalInlineWebhook.Name = types.StringValue(resp.RequestConfig.AccessRemovalInlineWebhook.Name)
		}
		if resp.RequestConfig.AllowedGroups == nil {
			r.RequestConfig.AllowedGroups = nil
		} else {
			r.RequestConfig.AllowedGroups = &tfTypes.AddAppToAppStoreInputAllowedGroups{}
			r.RequestConfig.AllowedGroups.Groups = []tfTypes.Group{}
			if len(r.RequestConfig.AllowedGroups.Groups) > len(resp.RequestConfig.AllowedGroups.Groups) {
				r.RequestConfig.AllowedGroups.Groups = r.RequestConfig.AllowedGroups.Groups[:len(resp.RequestConfig.AllowedGroups.Groups)]
			}
			for groupsCount, groupsItem := range resp.RequestConfig.AllowedGroups.Groups {
				var groups1 tfTypes.Group
				groups1.AppID = types.StringPointerValue(groupsItem.AppID)
				groups1.Description = types.StringPointerValue(groupsItem.Description)
				if groupsItem.GroupLifecycle != nil {
					groups1.GroupLifecycle = types.StringValue(string(*groupsItem.GroupLifecycle))
				} else {
					groups1.GroupLifecycle = types.StringNull()
				}
				groups1.ID = types.StringPointerValue(groupsItem.ID)
				groups1.IntegrationSpecificID = types.StringPointerValue(groupsItem.IntegrationSpecificID)
				groups1.Name = types.StringPointerValue(groupsItem.Name)
				groups1.SourceAppID = types.StringPointerValue(groupsItem.SourceAppID)
				if groupsCount+1 > len(r.RequestConfig.AllowedGroups.Groups) {
					r.RequestConfig.AllowedGroups.Groups = append(r.RequestConfig.AllowedGroups.Groups, groups1)
				} else {
					r.RequestConfig.AllowedGroups.Groups[groupsCount].AppID = groups1.AppID
					r.RequestConfig.AllowedGroups.Groups[groupsCount].Description = groups1.Description
					r.RequestConfig.AllowedGroups.Groups[groupsCount].GroupLifecycle = groups1.GroupLifecycle
					r.RequestConfig.AllowedGroups.Groups[groupsCount].ID = groups1.ID
					r.RequestConfig.AllowedGroups.Groups[groupsCount].IntegrationSpecificID = groups1.IntegrationSpecificID
					r.RequestConfig.AllowedGroups.Groups[groupsCount].Name = groups1.Name
					r.RequestConfig.AllowedGroups.Groups[groupsCount].SourceAppID = groups1.SourceAppID
				}
			}
			if resp.RequestConfig.AllowedGroups.Type != nil {
				r.RequestConfig.AllowedGroups.Type = types.StringValue(string(*resp.RequestConfig.AllowedGroups.Type))
			} else {
				r.RequestConfig.AllowedGroups.Type = types.StringNull()
			}
		}
		r.RequestConfig.AllowedGroupsOverride = types.BoolPointerValue(resp.RequestConfig.AllowedGroupsOverride)
		if resp.RequestConfig.AppstoreVisibility != nil {
			r.RequestConfig.AppstoreVisibility = types.StringValue(string(*resp.RequestConfig.AppstoreVisibility))
		} else {
			r.RequestConfig.AppstoreVisibility = types.StringNull()
		}
		if resp.RequestConfig.RequestApprovalConfig == nil {
			r.RequestConfig.RequestApprovalConfig = nil
		} else {
			r.RequestConfig.RequestApprovalConfig = &tfTypes.RequestApprovalConfig{}
			r.RequestConfig.RequestApprovalConfig.CustomApprovalMessage = types.StringPointerValue(resp.RequestConfig.RequestApprovalConfig.CustomApprovalMessage)
			r.RequestConfig.RequestApprovalConfig.CustomApprovalMessageOverride = types.BoolPointerValue(resp.RequestConfig.RequestApprovalConfig.CustomApprovalMessageOverride)
			if resp.RequestConfig.RequestApprovalConfig.ManagerApproval != nil {
				r.RequestConfig.RequestApprovalConfig.ManagerApproval = types.StringValue(string(*resp.RequestConfig.RequestApprovalConfig.ManagerApproval))
			} else {
				r.RequestConfig.RequestApprovalConfig.ManagerApproval = types.StringNull()
			}
			r.RequestConfig.RequestApprovalConfig.RequestApprovalConfigOverride = types.BoolPointerValue(resp.RequestConfig.RequestApprovalConfig.RequestApprovalConfigOverride)
			r.RequestConfig.RequestApprovalConfig.RequestApprovalStages = []tfTypes.RequestApprovalStageOutput{}
			if len(r.RequestConfig.RequestApprovalConfig.RequestApprovalStages) > len(resp.RequestConfig.RequestApprovalConfig.RequestApprovalStages) {
				r.RequestConfig.RequestApprovalConfig.RequestApprovalStages = r.RequestConfig.RequestApprovalConfig.RequestApprovalStages[:len(resp.RequestConfig.RequestApprovalConfig.RequestApprovalStages)]
			}
			for requestApprovalStagesCount, requestApprovalStagesItem := range resp.RequestConfig.RequestApprovalConfig.RequestApprovalStages {
				var requestApprovalStages1 tfTypes.RequestApprovalStageOutput
				requestApprovalStages1.Approvers = []tfTypes.ApproverOutput{}
				for approversCount, approversItem := range requestApprovalStagesItem.Approvers {
					var approvers1 tfTypes.ApproverOutput
					if approversItem.Group == nil {
						approvers1.Group = nil
					} else {
						approvers1.Group = &tfTypes.Group{}
						approvers1.Group.AppID = types.StringPointerValue(approversItem.Group.AppID)
						approvers1.Group.Description = types.StringPointerValue(approversItem.Group.Description)
						if approversItem.Group.GroupLifecycle != nil {
							approvers1.Group.GroupLifecycle = types.StringValue(string(*approversItem.Group.GroupLifecycle))
						} else {
							approvers1.Group.GroupLifecycle = types.StringNull()
						}
						approvers1.Group.ID = types.StringPointerValue(approversItem.Group.ID)
						approvers1.Group.IntegrationSpecificID = types.StringPointerValue(approversItem.Group.IntegrationSpecificID)
						approvers1.Group.Name = types.StringPointerValue(approversItem.Group.Name)
						approvers1.Group.SourceAppID = types.StringPointerValue(approversItem.Group.SourceAppID)
					}
					approvers1.Type = types.StringValue(string(approversItem.Type))
					if approversItem.User == nil {
						approvers1.User = nil
					} else {
						approvers1.User = &tfTypes.User{}
						approvers1.User.Email = types.StringPointerValue(approversItem.User.Email)
						approvers1.User.FamilyName = types.StringPointerValue(approversItem.User.FamilyName)
						approvers1.User.GivenName = types.StringPointerValue(approversItem.User.GivenName)
						approvers1.User.ID = types.StringValue(approversItem.User.ID)
						if approversItem.User.Status != nil {
							approvers1.User.Status = types.StringValue(string(*approversItem.User.Status))
						} else {
							approvers1.User.Status = types.StringNull()
						}
					}
					if approversCount+1 > len(requestApprovalStages1.Approvers) {
						requestApprovalStages1.Approvers = append(requestApprovalStages1.Approvers, approvers1)
					} else {
						requestApprovalStages1.Approvers[approversCount].Group = approvers1.Group
						requestApprovalStages1.Approvers[approversCount].Type = approvers1.Type
						requestApprovalStages1.Approvers[approversCount].User = approvers1.User
					}
				}
				if requestApprovalStagesCount+1 > len(r.RequestConfig.RequestApprovalConfig.RequestApprovalStages) {
					r.RequestConfig.RequestApprovalConfig.RequestApprovalStages = append(r.RequestConfig.RequestApprovalConfig.RequestApprovalStages, requestApprovalStages1)
				} else {
					r.RequestConfig.RequestApprovalConfig.RequestApprovalStages[requestApprovalStagesCount].Approvers = requestApprovalStages1.Approvers
				}
			}
			r.RequestConfig.RequestApprovalConfig.RequireAdditionalApproval = types.BoolPointerValue(resp.RequestConfig.RequestApprovalConfig.RequireAdditionalApproval)
		}
		if resp.RequestConfig.RequestFulfillmentConfig == nil {
			r.RequestConfig.RequestFulfillmentConfig = nil
		} else {
			r.RequestConfig.RequestFulfillmentConfig = &tfTypes.RequestablePermissionInputRequestFulfillmentConfig{}
			r.RequestConfig.RequestFulfillmentConfig.ManualInstructions = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ManualInstructions)
			r.RequestConfig.RequestFulfillmentConfig.ManualStepsNeeded = types.BoolPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ManualStepsNeeded)
			if resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup == nil {
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup = nil
			} else {
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup = &tfTypes.Group{}
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.AppID = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.AppID)
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.Description = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.Description)
				if resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.GroupLifecycle != nil {
					r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.GroupLifecycle = types.StringValue(string(*resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.GroupLifecycle))
				} else {
					r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.GroupLifecycle = types.StringNull()
				}
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.ID = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.ID)
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.IntegrationSpecificID = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.IntegrationSpecificID)
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.Name = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.Name)
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.SourceAppID = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningGroup.SourceAppID)
			}
			if resp.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook == nil {
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook = nil
			} else {
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook = &tfTypes.AddAppToAppStoreInputAccessRemovalInlineWebhook{}
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.Description = types.StringPointerValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.Description)
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.HookType = types.StringValue(string(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.HookType))
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.ID = types.StringValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.ID)
				r.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.Name = types.StringValue(resp.RequestConfig.RequestFulfillmentConfig.ProvisioningWebhook.Name)
			}
			r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccess = []types.String{}
			for _, v := range resp.RequestConfig.RequestFulfillmentConfig.TimeBasedAccess {
				r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccess = append(r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccess, types.StringValue(string(v)))
			}
			r.RequestConfig.RequestFulfillmentConfig.TimeBasedAccessOverride = types.BoolPointerValue(resp.RequestConfig.RequestFulfillmentConfig.TimeBasedAccessOverride)
		}
		if resp.RequestConfig.RequestValidationInlineWebhook == nil {
			r.RequestConfig.RequestValidationInlineWebhook = nil
		} else {
			r.RequestConfig.RequestValidationInlineWebhook = &tfTypes.AddAppToAppStoreInputAccessRemovalInlineWebhook{}
			r.RequestConfig.RequestValidationInlineWebhook.Description = types.StringPointerValue(resp.RequestConfig.RequestValidationInlineWebhook.Description)
			r.RequestConfig.RequestValidationInlineWebhook.HookType = types.StringValue(string(resp.RequestConfig.RequestValidationInlineWebhook.HookType))
			r.RequestConfig.RequestValidationInlineWebhook.ID = types.StringValue(resp.RequestConfig.RequestValidationInlineWebhook.ID)
			r.RequestConfig.RequestValidationInlineWebhook.Name = types.StringValue(resp.RequestConfig.RequestValidationInlineWebhook.Name)
		}
		if resp.Type != nil {
			r.Type = types.StringValue(string(*resp.Type))
		} else {
			r.Type = types.StringNull()
		}
	}
}
