// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/teamlumos/terraform-provider-lumos/internal/provider/types"
	"github.com/teamlumos/terraform-provider-lumos/internal/sdk"
	"github.com/teamlumos/terraform-provider-lumos/internal/sdk/models/operations"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &GroupsDataSource{}
var _ datasource.DataSourceWithConfigure = &GroupsDataSource{}

func NewGroupsDataSource() datasource.DataSource {
	return &GroupsDataSource{}
}

// GroupsDataSource is the data source implementation.
type GroupsDataSource struct {
	client *sdk.Lumos
}

// GroupsDataSourceModel describes the data model.
type GroupsDataSourceModel struct {
	AppID                 types.String    `tfsdk:"app_id"`
	ExactMatch            types.Bool      `tfsdk:"exact_match"`
	IntegrationSpecificID types.String    `tfsdk:"integration_specific_id"`
	Items                 []tfTypes.Group `tfsdk:"items"`
	Name                  types.String    `tfsdk:"name"`
	Page                  types.Int64     `tfsdk:"page"`
	Pages                 types.Int64     `tfsdk:"pages"`
	Size                  types.Int64     `tfsdk:"size"`
	Total                 types.Int64     `tfsdk:"total"`
}

// Metadata returns the data source type name.
func (r *GroupsDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_groups"
}

// Schema defines the schema for the data source.
func (r *GroupsDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Groups DataSource",

		Attributes: map[string]schema.Attribute{
			"app_id": schema.StringAttribute{
				Optional:    true,
				Description: `Filters groups by the ID of the app to which they belong.`,
			},
			"exact_match": schema.BoolAttribute{
				Computed:    true,
				Optional:    true,
				Description: `Search filter should be an exact match.`,
			},
			"integration_specific_id": schema.StringAttribute{
				Optional:    true,
				Description: `Filters groups by integration specific ID, e.g. the group's Okta ID.`,
			},
			"items": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"app_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the app that sources this group.`,
						},
						"description": schema.StringAttribute{
							Computed:    true,
							Description: `The description of this group.`,
						},
						"group_lifecycle": schema.StringAttribute{
							Computed:    true,
							Description: `The lifecycle of this group. must be one of ["SYNCED", "NATIVE"]`,
						},
						"id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of this group.`,
						},
						"integration_specific_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of this group, specific to the integration.`,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `The name of this group.`,
						},
						"source_app_id": schema.StringAttribute{
							Computed:    true,
							Description: `The ID of the app that sources this group.`,
						},
					},
				},
			},
			"name": schema.StringAttribute{
				Optional:    true,
				Description: `Filters groups by name.`,
			},
			"page": schema.Int64Attribute{
				Computed: true,
				Optional: true,
			},
			"pages": schema.Int64Attribute{
				Computed: true,
			},
			"size": schema.Int64Attribute{
				Computed: true,
				Optional: true,
			},
			"total": schema.Int64Attribute{
				Computed: true,
			},
		},
	}
}

func (r *GroupsDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Lumos)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Lumos, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *GroupsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *GroupsDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	integrationSpecificID := new(string)
	if !data.IntegrationSpecificID.IsUnknown() && !data.IntegrationSpecificID.IsNull() {
		*integrationSpecificID = data.IntegrationSpecificID.ValueString()
	} else {
		integrationSpecificID = nil
	}
	name := new(string)
	if !data.Name.IsUnknown() && !data.Name.IsNull() {
		*name = data.Name.ValueString()
	} else {
		name = nil
	}
	exactMatch := new(bool)
	if !data.ExactMatch.IsUnknown() && !data.ExactMatch.IsNull() {
		*exactMatch = data.ExactMatch.ValueBool()
	} else {
		exactMatch = nil
	}
	appID := new(string)
	if !data.AppID.IsUnknown() && !data.AppID.IsNull() {
		*appID = data.AppID.ValueString()
	} else {
		appID = nil
	}
	page := new(int64)
	if !data.Page.IsUnknown() && !data.Page.IsNull() {
		*page = data.Page.ValueInt64()
	} else {
		page = nil
	}
	size := new(int64)
	if !data.Size.IsUnknown() && !data.Size.IsNull() {
		*size = data.Size.ValueInt64()
	} else {
		size = nil
	}
	request := operations.GetGroupsRequest{
		IntegrationSpecificID: integrationSpecificID,
		Name:                  name,
		ExactMatch:            exactMatch,
		AppID:                 appID,
		Page:                  page,
		Size:                  size,
	}
	res, err := r.client.Core.GetGroups(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.PageGroup != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedPageGroup(res.PageGroup)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
