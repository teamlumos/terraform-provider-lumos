// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/teamlumos/terraform-provider-lumos/internal/sdk/models/operations"
	"github.com/teamlumos/terraform-provider-lumos/internal/sdk/models/shared"
)

func (r *AppResourceModel) ToSharedAppInputCreate(ctx context.Context) (*shared.AppInputCreate, diag.Diagnostics) {
	var diags diag.Diagnostics

	var name string
	name = r.Name.ValueString()

	var category string
	category = r.Category.ValueString()

	var description string
	description = r.Description.ValueString()

	logoURL := new(string)
	if !r.LogoURL.IsUnknown() && !r.LogoURL.IsNull() {
		*logoURL = r.LogoURL.ValueString()
	} else {
		logoURL = nil
	}
	websiteURL := new(string)
	if !r.WebsiteURL.IsUnknown() && !r.WebsiteURL.IsNull() {
		*websiteURL = r.WebsiteURL.ValueString()
	} else {
		websiteURL = nil
	}
	requestInstructions := new(string)
	if !r.RequestInstructions.IsUnknown() && !r.RequestInstructions.IsNull() {
		*requestInstructions = r.RequestInstructions.ValueString()
	} else {
		requestInstructions = nil
	}
	out := shared.AppInputCreate{
		Name:                name,
		Category:            category,
		Description:         description,
		LogoURL:             logoURL,
		WebsiteURL:          websiteURL,
		RequestInstructions: requestInstructions,
	}

	return &out, diags
}

func (r *AppResourceModel) ToOperationsUpdateAppRequest(ctx context.Context) (*operations.UpdateAppRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	appInputCreate, appInputCreateDiags := r.ToSharedAppInputCreate(ctx)
	diags.Append(appInputCreateDiags...)

	if diags.HasError() {
		return nil, diags
	}

	out := operations.UpdateAppRequest{
		ID:             id,
		AppInputCreate: *appInputCreate,
	}

	return &out, diags
}

func (r *AppResourceModel) ToOperationsGetAppRequest(ctx context.Context) (*operations.GetAppRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var id string
	id = r.ID.ValueString()

	out := operations.GetAppRequest{
		ID: id,
	}

	return &out, diags
}

func (r *AppResourceModel) RefreshFromSharedApp(ctx context.Context, resp *shared.App) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		r.AllowMultiplePermissionSelection = types.BoolValue(resp.AllowMultiplePermissionSelection)
		r.AppClassID = types.StringValue(resp.AppClassID)
		r.Category = types.StringPointerValue(resp.Category)
		r.Description = types.StringPointerValue(resp.Description)
		r.ID = types.StringValue(resp.ID)
		r.InstanceID = types.StringValue(resp.InstanceID)
		r.Links.AdminURL = types.StringValue(resp.Links.AdminURL)
		r.Links.Self = types.StringValue(resp.Links.Self)
		r.LogoURL = types.StringPointerValue(resp.LogoURL)
		r.RequestInstructions = types.StringPointerValue(resp.RequestInstructions)
		r.Sources = make([]types.String, 0, len(resp.Sources))
		for _, v := range resp.Sources {
			r.Sources = append(r.Sources, types.StringValue(string(v)))
		}
		r.Status = types.StringValue(string(resp.Status))
		r.UserFriendlyLabel = types.StringValue(resp.UserFriendlyLabel)
		r.WebsiteURL = types.StringPointerValue(resp.WebsiteURL)
	}

	return diags
}
