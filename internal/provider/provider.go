// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/ephemeral"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/teamlumos/terraform-provider-lumos/internal/sdk"
	"github.com/teamlumos/terraform-provider-lumos/internal/sdk/models/shared"
	"net/http"
	"os"
)

var _ provider.Provider = (*LumosProvider)(nil)
var _ provider.ProviderWithEphemeralResources = (*LumosProvider)(nil)

type LumosProvider struct {
	// version is set to the provider version on release, "dev" when the
	// provider is built and ran locally, and "test" when running acceptance
	// testing.
	version string
}

// LumosProviderModel describes the provider data model.
type LumosProviderModel struct {
	HTTPBearer types.String `tfsdk:"http_bearer"`
	ServerURL  types.String `tfsdk:"server_url"`
}

func (p *LumosProvider) Metadata(ctx context.Context, req provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = "lumos"
	resp.Version = p.version
}

func (p *LumosProvider) Schema(ctx context.Context, req provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			"http_bearer": schema.StringAttribute{
				Optional:  true,
				Sensitive: true,
			},
			"server_url": schema.StringAttribute{
				Description: `Server URL (defaults to https://api.lumos.com)`,
				Optional:    true,
			},
		},
		MarkdownDescription: `Lumos: The Lumos provider allows you to manage resources such as Apps, Permissions, and Pre-Approval Rules`,
	}
}

func (p *LumosProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	var data LumosProviderModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	ServerURL := data.ServerURL.ValueString()

	if ServerURL == "" {
		ServerURL = "https://api.lumos.com"
	}

	security := shared.Security{}

	if !data.HTTPBearer.IsUnknown() {
		security.HTTPBearer = data.HTTPBearer.ValueString()
	}

	if httpBearerEnvVar := os.Getenv("LUMOS_ACCESS_TOKEN"); security.HTTPBearer == "" && httpBearerEnvVar != "" {
		security.HTTPBearer = httpBearerEnvVar
	}

	if security.HTTPBearer == "" {
		resp.Diagnostics.AddError(
			"Missing Provider Security Configuration",
			"Either the environment variable LUMOS_ACCESS_TOKEN or provider configuration http_bearer attribute must be configured.",
		)
	}

	providerHTTPTransportOpts := ProviderHTTPTransportOpts{
		SetHeaders: make(map[string]string),
		Transport:  http.DefaultTransport,
	}

	httpClient := http.DefaultClient
	httpClient.Transport = NewProviderHTTPTransport(providerHTTPTransportOpts)

	opts := []sdk.SDKOption{
		sdk.WithServerURL(ServerURL),
		sdk.WithSecurity(security),
		sdk.WithClient(httpClient),
	}
	client := sdk.New(opts...)

	resp.DataSourceData = client
	resp.EphemeralResourceData = client
	resp.ResourceData = client
}

func (p *LumosProvider) Resources(ctx context.Context) []func() resource.Resource {
	return []func() resource.Resource{
		NewAppResource,
		NewAppStoreAppResource,
		NewPreApprovalRuleResource,
		NewRequestablePermissionResource,
	}
}

func (p *LumosProvider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return []func() datasource.DataSource{
		NewAppDataSource,
		NewAppsDataSource,
		NewAppStoreAppDataSource,
		NewAppStoreAppSettingsDataSource,
		NewGroupDataSource,
		NewGroupsDataSource,
		NewRequestablePermissionDataSource,
		NewRequestablePermissionsDataSource,
		NewUserDataSource,
		NewUsersDataSource,
	}
}

func (p *LumosProvider) EphemeralResources(ctx context.Context) []func() ephemeral.EphemeralResource {
	return []func() ephemeral.EphemeralResource{}
}

func New(version string) func() provider.Provider {
	return func() provider.Provider {
		return &LumosProvider{
			version: version,
		}
	}
}
