// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_pre_approval_rule

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func PreApprovalRuleDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"app_class_id": schema.StringAttribute{
				Computed:            true,
				Description:         "The ID of the service associated with this pre-approval rule.",
				MarkdownDescription: "The ID of the service associated with this pre-approval rule.",
			},
			"app_id": schema.StringAttribute{
				Computed:            true,
				Description:         "The ID of the app associated with this pre-approval rule.",
				MarkdownDescription: "The ID of the app associated with this pre-approval rule.",
			},
			"app_instance_id": schema.StringAttribute{
				Computed:            true,
				Description:         "Optionally, an app has an identifer associated with it's particular instance.",
				MarkdownDescription: "Optionally, an app has an identifer associated with it's particular instance.",
			},
			"id": schema.StringAttribute{
				Required:            true,
				Description:         "The ID of this preapproval rule.",
				MarkdownDescription: "The ID of this preapproval rule.",
			},
			"justification": schema.StringAttribute{
				Computed:            true,
				Description:         "The justification of this preapproval rule.",
				MarkdownDescription: "The justification of this preapproval rule.",
			},
			"preapproval_webhooks": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"description": schema.StringAttribute{
							Computed:            true,
							Description:         "The description of this inline webhook.",
							MarkdownDescription: "The description of this inline webhook.",
						},
						"hook_type": schema.StringAttribute{
							Computed:            true,
							Description:         "The type of this inline webhook.",
							MarkdownDescription: "The type of this inline webhook.",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of this inline webhook.",
							MarkdownDescription: "The ID of this inline webhook.",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of this inline webhook.",
							MarkdownDescription: "The name of this inline webhook.",
						},
					},
					CustomType: PreapprovalWebhooksType{
						ObjectType: types.ObjectType{
							AttrTypes: PreapprovalWebhooksValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "The preapproval webhooks of this preapproval rule.",
				MarkdownDescription: "The preapproval webhooks of this preapproval rule.",
			},
			"preapproved_groups": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"app_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the app that owns this group.",
							MarkdownDescription: "The ID of the app that owns this group.",
						},
						"description": schema.StringAttribute{
							Computed:            true,
							Description:         "The description of this group.",
							MarkdownDescription: "The description of this group.",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of this group.",
							MarkdownDescription: "The ID of this group.",
						},
						"integration_specific_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of this group, specific to the integration.",
							MarkdownDescription: "The ID of this group, specific to the integration.",
						},
						"lifecycle": schema.StringAttribute{
							Computed:            true,
							Description:         "The lifecycle of this group.",
							MarkdownDescription: "The lifecycle of this group.",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of this group.",
							MarkdownDescription: "The name of this group.",
						},
						"source_app_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the app that owns this group.",
							MarkdownDescription: "The ID of the app that owns this group.",
						},
					},
					CustomType: PreapprovedGroupsType{
						ObjectType: types.ObjectType{
							AttrTypes: PreapprovedGroupsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "The preapproved groups of this preapproval rule.",
				MarkdownDescription: "The preapproved groups of this preapproval rule.",
			},
			"preapproved_permissions": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"app_class_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the service associated with this requestable permission.",
							MarkdownDescription: "The ID of the service associated with this requestable permission.",
						},
						"app_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the app associated with this requestable permission.",
							MarkdownDescription: "The ID of the app associated with this requestable permission.",
						},
						"app_instance_id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the instance associated with this requestable permission.",
							MarkdownDescription: "The ID of the instance associated with this requestable permission.",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of this requestable permission.",
							MarkdownDescription: "The ID of this requestable permission.",
						},
						"label": schema.StringAttribute{
							Computed:            true,
							Description:         "The label of this requestable permission.",
							MarkdownDescription: "The label of this requestable permission.",
						},
						"type": schema.StringAttribute{
							Computed:            true,
							Description:         "The type of this requestable permission.",
							MarkdownDescription: "The type of this requestable permission.",
						},
					},
					CustomType: PreapprovedPermissionsType{
						ObjectType: types.ObjectType{
							AttrTypes: PreapprovedPermissionsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "The preapproved permissions of this preapproval rule.",
				MarkdownDescription: "The preapproved permissions of this preapproval rule.",
			},
			"time_based_access": schema.ListAttribute{
				ElementType:         types.StringType,
				Computed:            true,
				Description:         "Preapproval rule time access length,",
				MarkdownDescription: "Preapproval rule time access length,",
			},
		},
	}
}

type PreApprovalRuleModel struct {
	AppClassId             types.String `tfsdk:"app_class_id"`
	AppId                  types.String `tfsdk:"app_id"`
	AppInstanceId          types.String `tfsdk:"app_instance_id"`
	Id                     types.String `tfsdk:"id"`
	Justification          types.String `tfsdk:"justification"`
	PreapprovalWebhooks    types.List   `tfsdk:"preapproval_webhooks"`
	PreapprovedGroups      types.List   `tfsdk:"preapproved_groups"`
	PreapprovedPermissions types.List   `tfsdk:"preapproved_permissions"`
	TimeBasedAccess        types.List   `tfsdk:"time_based_access"`
}

var _ basetypes.ObjectTypable = PreapprovalWebhooksType{}

type PreapprovalWebhooksType struct {
	basetypes.ObjectType
}

func (t PreapprovalWebhooksType) Equal(o attr.Type) bool {
	other, ok := o.(PreapprovalWebhooksType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t PreapprovalWebhooksType) String() string {
	return "PreapprovalWebhooksType"
}

func (t PreapprovalWebhooksType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	hookTypeAttribute, ok := attributes["hook_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hook_type is missing from object`)

		return nil, diags
	}

	hookTypeVal, ok := hookTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hook_type expected to be basetypes.StringValue, was: %T`, hookTypeAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return PreapprovalWebhooksValue{
		Description: descriptionVal,
		HookType:    hookTypeVal,
		Id:          idVal,
		Name:        nameVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewPreapprovalWebhooksValueNull() PreapprovalWebhooksValue {
	return PreapprovalWebhooksValue{
		state: attr.ValueStateNull,
	}
}

func NewPreapprovalWebhooksValueUnknown() PreapprovalWebhooksValue {
	return PreapprovalWebhooksValue{
		state: attr.ValueStateUnknown,
	}
}

func NewPreapprovalWebhooksValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (PreapprovalWebhooksValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing PreapprovalWebhooksValue Attribute Value",
				"While creating a PreapprovalWebhooksValue value, a missing attribute value was detected. "+
					"A PreapprovalWebhooksValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PreapprovalWebhooksValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid PreapprovalWebhooksValue Attribute Type",
				"While creating a PreapprovalWebhooksValue value, an invalid attribute value was detected. "+
					"A PreapprovalWebhooksValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PreapprovalWebhooksValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("PreapprovalWebhooksValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra PreapprovalWebhooksValue Attribute Value",
				"While creating a PreapprovalWebhooksValue value, an extra attribute value was detected. "+
					"A PreapprovalWebhooksValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra PreapprovalWebhooksValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewPreapprovalWebhooksValueUnknown(), diags
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewPreapprovalWebhooksValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	hookTypeAttribute, ok := attributes["hook_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hook_type is missing from object`)

		return NewPreapprovalWebhooksValueUnknown(), diags
	}

	hookTypeVal, ok := hookTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hook_type expected to be basetypes.StringValue, was: %T`, hookTypeAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewPreapprovalWebhooksValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewPreapprovalWebhooksValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return NewPreapprovalWebhooksValueUnknown(), diags
	}

	return PreapprovalWebhooksValue{
		Description: descriptionVal,
		HookType:    hookTypeVal,
		Id:          idVal,
		Name:        nameVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewPreapprovalWebhooksValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) PreapprovalWebhooksValue {
	object, diags := NewPreapprovalWebhooksValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewPreapprovalWebhooksValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t PreapprovalWebhooksType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewPreapprovalWebhooksValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewPreapprovalWebhooksValueUnknown(), nil
	}

	if in.IsNull() {
		return NewPreapprovalWebhooksValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewPreapprovalWebhooksValueMust(PreapprovalWebhooksValue{}.AttributeTypes(ctx), attributes), nil
}

func (t PreapprovalWebhooksType) ValueType(ctx context.Context) attr.Value {
	return PreapprovalWebhooksValue{}
}

var _ basetypes.ObjectValuable = PreapprovalWebhooksValue{}

type PreapprovalWebhooksValue struct {
	Description basetypes.StringValue `tfsdk:"description"`
	HookType    basetypes.StringValue `tfsdk:"hook_type"`
	Id          basetypes.StringValue `tfsdk:"id"`
	Name        basetypes.StringValue `tfsdk:"name"`
	state       attr.ValueState
}

func (v PreapprovalWebhooksValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["hook_type"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.HookType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["hook_type"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v PreapprovalWebhooksValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v PreapprovalWebhooksValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v PreapprovalWebhooksValue) String() string {
	return "PreapprovalWebhooksValue"
}

func (v PreapprovalWebhooksValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"description": basetypes.StringType{},
		"hook_type":   basetypes.StringType{},
		"id":          basetypes.StringType{},
		"name":        basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"description": v.Description,
			"hook_type":   v.HookType,
			"id":          v.Id,
			"name":        v.Name,
		})

	return objVal, diags
}

func (v PreapprovalWebhooksValue) Equal(o attr.Value) bool {
	other, ok := o.(PreapprovalWebhooksValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.HookType.Equal(other.HookType) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	return true
}

func (v PreapprovalWebhooksValue) Type(ctx context.Context) attr.Type {
	return PreapprovalWebhooksType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v PreapprovalWebhooksValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"description": basetypes.StringType{},
		"hook_type":   basetypes.StringType{},
		"id":          basetypes.StringType{},
		"name":        basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = PreapprovedGroupsType{}

type PreapprovedGroupsType struct {
	basetypes.ObjectType
}

func (t PreapprovedGroupsType) Equal(o attr.Type) bool {
	other, ok := o.(PreapprovedGroupsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t PreapprovedGroupsType) String() string {
	return "PreapprovedGroupsType"
}

func (t PreapprovedGroupsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	appIdAttribute, ok := attributes["app_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_id is missing from object`)

		return nil, diags
	}

	appIdVal, ok := appIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_id expected to be basetypes.StringValue, was: %T`, appIdAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	integrationSpecificIdAttribute, ok := attributes["integration_specific_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`integration_specific_id is missing from object`)

		return nil, diags
	}

	integrationSpecificIdVal, ok := integrationSpecificIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`integration_specific_id expected to be basetypes.StringValue, was: %T`, integrationSpecificIdAttribute))
	}

	lifecycleAttribute, ok := attributes["lifecycle"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lifecycle is missing from object`)

		return nil, diags
	}

	lifecycleVal, ok := lifecycleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lifecycle expected to be basetypes.StringValue, was: %T`, lifecycleAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	sourceAppIdAttribute, ok := attributes["source_app_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`source_app_id is missing from object`)

		return nil, diags
	}

	sourceAppIdVal, ok := sourceAppIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`source_app_id expected to be basetypes.StringValue, was: %T`, sourceAppIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return PreapprovedGroupsValue{
		AppId:                 appIdVal,
		Description:           descriptionVal,
		Id:                    idVal,
		IntegrationSpecificId: integrationSpecificIdVal,
		Lifecycle:             lifecycleVal,
		Name:                  nameVal,
		SourceAppId:           sourceAppIdVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewPreapprovedGroupsValueNull() PreapprovedGroupsValue {
	return PreapprovedGroupsValue{
		state: attr.ValueStateNull,
	}
}

func NewPreapprovedGroupsValueUnknown() PreapprovedGroupsValue {
	return PreapprovedGroupsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewPreapprovedGroupsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (PreapprovedGroupsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing PreapprovedGroupsValue Attribute Value",
				"While creating a PreapprovedGroupsValue value, a missing attribute value was detected. "+
					"A PreapprovedGroupsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PreapprovedGroupsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid PreapprovedGroupsValue Attribute Type",
				"While creating a PreapprovedGroupsValue value, an invalid attribute value was detected. "+
					"A PreapprovedGroupsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PreapprovedGroupsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("PreapprovedGroupsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra PreapprovedGroupsValue Attribute Value",
				"While creating a PreapprovedGroupsValue value, an extra attribute value was detected. "+
					"A PreapprovedGroupsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra PreapprovedGroupsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewPreapprovedGroupsValueUnknown(), diags
	}

	appIdAttribute, ok := attributes["app_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_id is missing from object`)

		return NewPreapprovedGroupsValueUnknown(), diags
	}

	appIdVal, ok := appIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_id expected to be basetypes.StringValue, was: %T`, appIdAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewPreapprovedGroupsValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewPreapprovedGroupsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	integrationSpecificIdAttribute, ok := attributes["integration_specific_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`integration_specific_id is missing from object`)

		return NewPreapprovedGroupsValueUnknown(), diags
	}

	integrationSpecificIdVal, ok := integrationSpecificIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`integration_specific_id expected to be basetypes.StringValue, was: %T`, integrationSpecificIdAttribute))
	}

	lifecycleAttribute, ok := attributes["lifecycle"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lifecycle is missing from object`)

		return NewPreapprovedGroupsValueUnknown(), diags
	}

	lifecycleVal, ok := lifecycleAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lifecycle expected to be basetypes.StringValue, was: %T`, lifecycleAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewPreapprovedGroupsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	sourceAppIdAttribute, ok := attributes["source_app_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`source_app_id is missing from object`)

		return NewPreapprovedGroupsValueUnknown(), diags
	}

	sourceAppIdVal, ok := sourceAppIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`source_app_id expected to be basetypes.StringValue, was: %T`, sourceAppIdAttribute))
	}

	if diags.HasError() {
		return NewPreapprovedGroupsValueUnknown(), diags
	}

	return PreapprovedGroupsValue{
		AppId:                 appIdVal,
		Description:           descriptionVal,
		Id:                    idVal,
		IntegrationSpecificId: integrationSpecificIdVal,
		Lifecycle:             lifecycleVal,
		Name:                  nameVal,
		SourceAppId:           sourceAppIdVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewPreapprovedGroupsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) PreapprovedGroupsValue {
	object, diags := NewPreapprovedGroupsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewPreapprovedGroupsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t PreapprovedGroupsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewPreapprovedGroupsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewPreapprovedGroupsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewPreapprovedGroupsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewPreapprovedGroupsValueMust(PreapprovedGroupsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t PreapprovedGroupsType) ValueType(ctx context.Context) attr.Value {
	return PreapprovedGroupsValue{}
}

var _ basetypes.ObjectValuable = PreapprovedGroupsValue{}

type PreapprovedGroupsValue struct {
	AppId                 basetypes.StringValue `tfsdk:"app_id"`
	Description           basetypes.StringValue `tfsdk:"description"`
	Id                    basetypes.StringValue `tfsdk:"id"`
	IntegrationSpecificId basetypes.StringValue `tfsdk:"integration_specific_id"`
	Lifecycle             basetypes.StringValue `tfsdk:"lifecycle"`
	Name                  basetypes.StringValue `tfsdk:"name"`
	SourceAppId           basetypes.StringValue `tfsdk:"source_app_id"`
	state                 attr.ValueState
}

func (v PreapprovedGroupsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["app_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["integration_specific_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["lifecycle"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["source_app_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.AppId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["app_id"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.IntegrationSpecificId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["integration_specific_id"] = val

		val, err = v.Lifecycle.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["lifecycle"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.SourceAppId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["source_app_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v PreapprovedGroupsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v PreapprovedGroupsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v PreapprovedGroupsValue) String() string {
	return "PreapprovedGroupsValue"
}

func (v PreapprovedGroupsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"app_id":                  basetypes.StringType{},
		"description":             basetypes.StringType{},
		"id":                      basetypes.StringType{},
		"integration_specific_id": basetypes.StringType{},
		"lifecycle":               basetypes.StringType{},
		"name":                    basetypes.StringType{},
		"source_app_id":           basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"app_id":                  v.AppId,
			"description":             v.Description,
			"id":                      v.Id,
			"integration_specific_id": v.IntegrationSpecificId,
			"lifecycle":               v.Lifecycle,
			"name":                    v.Name,
			"source_app_id":           v.SourceAppId,
		})

	return objVal, diags
}

func (v PreapprovedGroupsValue) Equal(o attr.Value) bool {
	other, ok := o.(PreapprovedGroupsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AppId.Equal(other.AppId) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.IntegrationSpecificId.Equal(other.IntegrationSpecificId) {
		return false
	}

	if !v.Lifecycle.Equal(other.Lifecycle) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.SourceAppId.Equal(other.SourceAppId) {
		return false
	}

	return true
}

func (v PreapprovedGroupsValue) Type(ctx context.Context) attr.Type {
	return PreapprovedGroupsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v PreapprovedGroupsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"app_id":                  basetypes.StringType{},
		"description":             basetypes.StringType{},
		"id":                      basetypes.StringType{},
		"integration_specific_id": basetypes.StringType{},
		"lifecycle":               basetypes.StringType{},
		"name":                    basetypes.StringType{},
		"source_app_id":           basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = PreapprovedPermissionsType{}

type PreapprovedPermissionsType struct {
	basetypes.ObjectType
}

func (t PreapprovedPermissionsType) Equal(o attr.Type) bool {
	other, ok := o.(PreapprovedPermissionsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t PreapprovedPermissionsType) String() string {
	return "PreapprovedPermissionsType"
}

func (t PreapprovedPermissionsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	appClassIdAttribute, ok := attributes["app_class_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_class_id is missing from object`)

		return nil, diags
	}

	appClassIdVal, ok := appClassIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_class_id expected to be basetypes.StringValue, was: %T`, appClassIdAttribute))
	}

	appIdAttribute, ok := attributes["app_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_id is missing from object`)

		return nil, diags
	}

	appIdVal, ok := appIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_id expected to be basetypes.StringValue, was: %T`, appIdAttribute))
	}

	appInstanceIdAttribute, ok := attributes["app_instance_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_instance_id is missing from object`)

		return nil, diags
	}

	appInstanceIdVal, ok := appInstanceIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_instance_id expected to be basetypes.StringValue, was: %T`, appInstanceIdAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	labelAttribute, ok := attributes["label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`label is missing from object`)

		return nil, diags
	}

	labelVal, ok := labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`label expected to be basetypes.StringValue, was: %T`, labelAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return PreapprovedPermissionsValue{
		AppClassId:                 appClassIdVal,
		AppId:                      appIdVal,
		AppInstanceId:              appInstanceIdVal,
		Id:                         idVal,
		Label:                      labelVal,
		PreapprovedPermissionsType: typeVal,
		state:                      attr.ValueStateKnown,
	}, diags
}

func NewPreapprovedPermissionsValueNull() PreapprovedPermissionsValue {
	return PreapprovedPermissionsValue{
		state: attr.ValueStateNull,
	}
}

func NewPreapprovedPermissionsValueUnknown() PreapprovedPermissionsValue {
	return PreapprovedPermissionsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewPreapprovedPermissionsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (PreapprovedPermissionsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing PreapprovedPermissionsValue Attribute Value",
				"While creating a PreapprovedPermissionsValue value, a missing attribute value was detected. "+
					"A PreapprovedPermissionsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PreapprovedPermissionsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid PreapprovedPermissionsValue Attribute Type",
				"While creating a PreapprovedPermissionsValue value, an invalid attribute value was detected. "+
					"A PreapprovedPermissionsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PreapprovedPermissionsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("PreapprovedPermissionsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra PreapprovedPermissionsValue Attribute Value",
				"While creating a PreapprovedPermissionsValue value, an extra attribute value was detected. "+
					"A PreapprovedPermissionsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra PreapprovedPermissionsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewPreapprovedPermissionsValueUnknown(), diags
	}

	appClassIdAttribute, ok := attributes["app_class_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_class_id is missing from object`)

		return NewPreapprovedPermissionsValueUnknown(), diags
	}

	appClassIdVal, ok := appClassIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_class_id expected to be basetypes.StringValue, was: %T`, appClassIdAttribute))
	}

	appIdAttribute, ok := attributes["app_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_id is missing from object`)

		return NewPreapprovedPermissionsValueUnknown(), diags
	}

	appIdVal, ok := appIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_id expected to be basetypes.StringValue, was: %T`, appIdAttribute))
	}

	appInstanceIdAttribute, ok := attributes["app_instance_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_instance_id is missing from object`)

		return NewPreapprovedPermissionsValueUnknown(), diags
	}

	appInstanceIdVal, ok := appInstanceIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_instance_id expected to be basetypes.StringValue, was: %T`, appInstanceIdAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewPreapprovedPermissionsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	labelAttribute, ok := attributes["label"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`label is missing from object`)

		return NewPreapprovedPermissionsValueUnknown(), diags
	}

	labelVal, ok := labelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`label expected to be basetypes.StringValue, was: %T`, labelAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewPreapprovedPermissionsValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewPreapprovedPermissionsValueUnknown(), diags
	}

	return PreapprovedPermissionsValue{
		AppClassId:                 appClassIdVal,
		AppId:                      appIdVal,
		AppInstanceId:              appInstanceIdVal,
		Id:                         idVal,
		Label:                      labelVal,
		PreapprovedPermissionsType: typeVal,
		state:                      attr.ValueStateKnown,
	}, diags
}

func NewPreapprovedPermissionsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) PreapprovedPermissionsValue {
	object, diags := NewPreapprovedPermissionsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewPreapprovedPermissionsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t PreapprovedPermissionsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewPreapprovedPermissionsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewPreapprovedPermissionsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewPreapprovedPermissionsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewPreapprovedPermissionsValueMust(PreapprovedPermissionsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t PreapprovedPermissionsType) ValueType(ctx context.Context) attr.Value {
	return PreapprovedPermissionsValue{}
}

var _ basetypes.ObjectValuable = PreapprovedPermissionsValue{}

type PreapprovedPermissionsValue struct {
	AppClassId                 basetypes.StringValue `tfsdk:"app_class_id"`
	AppId                      basetypes.StringValue `tfsdk:"app_id"`
	AppInstanceId              basetypes.StringValue `tfsdk:"app_instance_id"`
	Id                         basetypes.StringValue `tfsdk:"id"`
	Label                      basetypes.StringValue `tfsdk:"label"`
	PreapprovedPermissionsType basetypes.StringValue `tfsdk:"type"`
	state                      attr.ValueState
}

func (v PreapprovedPermissionsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["app_class_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["app_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["app_instance_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["label"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.AppClassId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["app_class_id"] = val

		val, err = v.AppId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["app_id"] = val

		val, err = v.AppInstanceId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["app_instance_id"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Label.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["label"] = val

		val, err = v.PreapprovedPermissionsType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v PreapprovedPermissionsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v PreapprovedPermissionsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v PreapprovedPermissionsValue) String() string {
	return "PreapprovedPermissionsValue"
}

func (v PreapprovedPermissionsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"app_class_id":    basetypes.StringType{},
		"app_id":          basetypes.StringType{},
		"app_instance_id": basetypes.StringType{},
		"id":              basetypes.StringType{},
		"label":           basetypes.StringType{},
		"type":            basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"app_class_id":    v.AppClassId,
			"app_id":          v.AppId,
			"app_instance_id": v.AppInstanceId,
			"id":              v.Id,
			"label":           v.Label,
			"type":            v.PreapprovedPermissionsType,
		})

	return objVal, diags
}

func (v PreapprovedPermissionsValue) Equal(o attr.Value) bool {
	other, ok := o.(PreapprovedPermissionsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AppClassId.Equal(other.AppClassId) {
		return false
	}

	if !v.AppId.Equal(other.AppId) {
		return false
	}

	if !v.AppInstanceId.Equal(other.AppInstanceId) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Label.Equal(other.Label) {
		return false
	}

	if !v.PreapprovedPermissionsType.Equal(other.PreapprovedPermissionsType) {
		return false
	}

	return true
}

func (v PreapprovedPermissionsValue) Type(ctx context.Context) attr.Type {
	return PreapprovedPermissionsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v PreapprovedPermissionsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"app_class_id":    basetypes.StringType{},
		"app_id":          basetypes.StringType{},
		"app_instance_id": basetypes.StringType{},
		"id":              basetypes.StringType{},
		"label":           basetypes.StringType{},
		"type":            basetypes.StringType{},
	}
}
