{
    "openapi": "3.1.0",
    "info": {
        "title": "Lumos",
        "description": "\n    The Lumos API gives you the building blocks to administer and extend Lumos programmatically.\n    Our REST API provides a management interface for the AppStore and a read interface\n    for the Lumos Core.\n    Go to https://developers.lumos.com to see the complete documentation.\n",
        "version": "0.1.0"
    },
    "servers": [
        {
            "url": "https://api.lumos.com"
        }
    ],
    "paths": {
        "/apps": {
            "get": {
                "tags": [
                    "Core"
                ],
                "summary": "Get Apps",
                "description": "List all of your company's apps.",
                "operationId": "listApps",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1.0,
                            "title": "Page",
                            "default": 1
                        },
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100.0,
                            "minimum": 1.0,
                            "title": "Size",
                            "default": 50
                        },
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page_App_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "x-speakeasy-entity-operation": "App#create",
                "tags": [
                    "Core"
                ],
                "summary": "Create App",
                "description": "Create a new app.",
                "operationId": "createApp",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AppInputCreate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/App"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/apps/{app_id}": {
            "get": {
                "x-speakeasy-entity-operation": "App#read",
                "tags": [
                    "Core"
                ],
                "summary": "Get App",
                "description": "Get an app by id.",
                "operationId": "getApp",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Id"
                        },
                        "name": "app_id",
                        "in": "path",
                        "x-speakeasy-match": "id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/App"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/users/current": {
            "get": {
                "tags": [
                    "Core"
                ],
                "summary": "Get Current User",
                "description": "Get current user",
                "operationId": "currentUser",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1.0,
                            "title": "Page",
                            "default": 1
                        },
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100.0,
                            "minimum": 1.0,
                            "title": "Size",
                            "default": 50
                        },
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/users": {
            "get": {
                "x-speakeasy-entity-operation": "Users#read",
                "tags": [
                    "Core"
                ],
                "summary": "Get Users",
                "description": "List all of your company's users.",
                "operationId": "listUsers",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Search Term"
                        },
                        "name": "search_term",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "title": "Exact Match",
                            "default": false
                        },
                        "name": "exact_match",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1.0,
                            "title": "Page",
                            "default": 1
                        },
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100.0,
                            "minimum": 1.0,
                            "title": "Size",
                            "default": 50
                        },
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page_User_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/users/{user_id}": {
            "get": {
                "x-speakeasy-entity-operation": "User#read",
                "tags": [
                    "Core"
                ],
                "summary": "Get User",
                "description": "Get user by id.",
                "operationId": "getUser",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "User Id"
                        },
                        "name": "user_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/inline_webhooks": {
            "get": {
                "tags": [
                    "Core"
                ],
                "summary": "Get Inline Webhooks",
                "description": "Get available webhooks",
                "operationId": "get_inline_webhooks_inline_webhooks_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/InlineWebhook"
                                    },
                                    "type": "array",
                                    "title": "Response Get Inline Webhooks Inline Webhooks Get"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/accounts": {
            "get": {
                "tags": [
                    "Core"
                ],
                "summary": "Get Accounts",
                "description": "Get all accounts associated with apps at your company.",
                "operationId": "getAccounts",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "App Id"
                        },
                        "name": "app_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1.0,
                            "title": "Page",
                            "default": 1
                        },
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100.0,
                            "minimum": 1.0,
                            "title": "Size",
                            "default": 50
                        },
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page_Account_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/groups/{group_id}/users": {
            "get": {
                "tags": [
                    "Core"
                ],
                "summary": "Get Group Membership",
                "description": "Get user members by group ID.",
                "operationId": "getGroupMembership",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Group Id"
                        },
                        "name": "group_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1.0,
                            "title": "Page",
                            "default": 1
                        },
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100.0,
                            "minimum": 1.0,
                            "title": "Size",
                            "default": 50
                        },
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page_User_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/groups/{group_id}": {
            "get": {
                "x-speakeasy-entity-operation": "Group#read",
                "tags": [
                    "Core"
                ],
                "summary": "Get Group",
                "description": "Get group by ID.",
                "operationId": "getGroup",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Group Id"
                        },
                        "name": "group_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/groups": {
            "get": {
                "x-speakeasy-entity-operation": "Groups#read",
                "tags": [
                    "Core"
                ],
                "summary": "Get Groups",
                "description": "Get groups synced from connected integrations",
                "operationId": "getGroups",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Integration Specific Id"
                        },
                        "name": "integration_specific_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Name"
                        },
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "title": "Exact Match",
                            "default": false
                        },
                        "name": "exact_match",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "App Id"
                        },
                        "name": "app_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1.0,
                            "title": "Page",
                            "default": 1
                        },
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100.0,
                            "minimum": 1.0,
                            "title": "Size",
                            "default": 50
                        },
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page_Group_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/accounts/upload/{job_id}": {
            "get": {
                "tags": [
                    "Core"
                ],
                "summary": "Get Upload Job State",
                "description": "Get state of an account upload job.",
                "operationId": "getUploadJobState",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Job Id"
                        },
                        "name": "job_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobStateOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/activity_logs": {
            "get": {
                "tags": [
                    "Core"
                ],
                "summary": "Get Activity Logs",
                "description": "Get activity logs.",
                "operationId": "getActivityLogs",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Since"
                        },
                        "name": "since",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Until"
                        },
                        "name": "until",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100.0,
                            "minimum": 1.0,
                            "title": "Limit",
                            "default": 50
                        },
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 0.0,
                            "title": "Offset",
                            "default": 0
                        },
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LimitOffsetPage_ActivityLog_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/accounts/upload": {
            "post": {
                "tags": [
                    "Core"
                ],
                "summary": "Create Accounts",
                "description": "Upload accounts to an app.",
                "operationId": "postAccounts",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccountsUploadInput"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JobStateOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/activity_records": {
            "post": {
                "tags": [
                    "Core"
                ],
                "summary": "Update Activity Records",
                "description": "Update the last_login or last_activity for a given account.",
                "operationId": "activityRecords",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ActivityRecordInput"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActivityRecordOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/activity_records/job/{job_id}": {
            "get": {
                "tags": [
                    "Core"
                ],
                "summary": "Get Activity Records Job State",
                "description": "Get the state of an activity records post-processing job.",
                "operationId": "getActivityRecordsJobState",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Job Id"
                        },
                        "name": "job_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SyncTaskOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/appstore/requestable_permissions": {
            "get": {
                "tags": [
                    "AppStore"
                ],
                "summary": "Get Appstore Permissions For App",
                "description": "Get AppStore permissions for an application.",
                "operationId": "get_appstore_permissions_for_app_appstore_requestable_permissions_get",
                "parameters": [
                    {
                        "description": "Filters requestable permissions by the ID of the service they belong to (i.e. okta.com). This parameter also requires app_instance_id to be included.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "App Class Id",
                            "description": "Filters requestable permissions by the ID of the service they belong to (i.e. okta.com). This parameter also requires app_instance_id to be included."
                        },
                        "name": "app_class_id",
                        "in": "query"
                    },
                    {
                        "description": "Filters requestable permissions by the ID of the instance (app_class_id) to which they belong. This parameter also requires app_class_id to be included.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "App Instance Id",
                            "description": "Filters requestable permissions by the ID of the instance (app_class_id) to which they belong. This parameter also requires app_class_id to be included."
                        },
                        "name": "app_instance_id",
                        "in": "query"
                    },
                    {
                        "description": "Filters requestable permissions by the ID of the app they belong to them.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "App Id",
                            "description": "Filters requestable permissions by the ID of the app they belong to them."
                        },
                        "name": "app_id",
                        "in": "query"
                    },
                    {
                        "description": "\n    Searches permissions by any of the permission's group name,\n    request configuration name, or specific integration ID.\n",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Search Term",
                            "description": "\n    Searches permissions by any of the permission's group name,\n    request configuration name, or specific integration ID.\n"
                        },
                        "name": "search_term",
                        "in": "query"
                    },
                    {
                        "description": "Search filter should be an exact match.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "title": "Exact Match",
                            "description": "Search filter should be an exact match.",
                            "default": false
                        },
                        "name": "exact_match",
                        "in": "query"
                    },
                    {
                        "description": "\n    Filters permissions by visibility in the AppStore.\n",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "title": "In App Store",
                            "description": "\n    Filters permissions by visibility in the AppStore.\n"
                        },
                        "name": "in_app_store",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1.0,
                            "title": "Page",
                            "default": 1
                        },
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100.0,
                            "minimum": 1.0,
                            "title": "Size",
                            "default": 50
                        },
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page_RequestablePermissionOutput_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "x-speakeasy-entity-operation": "RequestablePermission#create",
                "tags": [
                    "AppStore"
                ],
                "summary": "Create Appstore Requestable Permission",
                "description": "**Creates a permission attached to an App in the AppStore.**\n\n\n*Required fields:*\n- app-identifier. The App should be identified either by app_id or app_class_id + app_instance_id.\n- label\n\n*Defaults:*\n- request_config:\n    - appstore_visibility: HIDDEN\n    - allowed_groups:\n        - type: ALL_GROUPS\n        - groups: []\n    - request_approval_config\n        - manager_approval: NONE\n        - request_approval_stages: []\n    - request_fulfillment_config\n        - manual_steps_needed: false\n- All other fields will have null values by default.",
                "operationId": "create_appstore_requestable_permission_appstore_requestable_permissions_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RequestablePermissionInput"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RequestablePermissionOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/appstore/requestable_permissions/{permission_id}": {
            "get": {
                "x-speakeasy-entity-operation": "RequestablePermission#read",
                "tags": [
                    "AppStore"
                ],
                "summary": "Get Appstore Permission",
                "description": "Get an AppStore permission.",
                "operationId": "get_appstore_permission_appstore_requestable_permissions__permission_id__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Permission Id"
                        },
                        "name": "permission_id",
                        "in": "path",
                        "x-speakeasy-match": "id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RequestablePermissionOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "delete": {
                "x-speakeasy-entity-operation": "RequestablePermission#delete",
                "tags": [
                    "AppStore"
                ],
                "summary": "Delete Appstore Permission",
                "description": "Delete a requestable permission by ID.\n\n    Only permissions of type 'NATIVE' can be deleted.",
                "operationId": "delete_appstore_permission_appstore_requestable_permissions__permission_id__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Permission Id"
                        },
                        "name": "permission_id",
                        "x-speakeasy-match": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "title": "Response Delete Appstore Permission Appstore Requestable Permissions  Permission Id  Delete"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "patch": {
                "x-speakeasy-entity-operation": "RequestablePermission#update",
                "tags": [
                    "AppStore"
                ],
                "summary": "Update Appstore Permission",
                "description": "**Update an AppStore permission.**\n\n\nAll fields present in the payload will override the permission's data.\nAny missing fields will be disregarded.\n\n    Non updatable fields for now:\n        request_config -> request_fulfillment_config -> provisioning_group",
                "operationId": "update_appstore_permission_appstore_requestable_permissions__permission_id__patch",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Permission Id"
                        },
                        "name": "permission_id",
                        "in": "path",
                        "x-speakeasy-match": "id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RequestablePermissionInputUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RequestablePermissionOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/appstore/pre_approval_rules": {
            "get": {
                "tags": [
                    "AppStore"
                ],
                "summary": "Get Appstore Pre Approval Rules For App",
                "description": "Get AppStore pre-approval rules for an app.",
                "operationId": "get_appstore_pre_approval_rules_for_app_appstore_pre_approval_rules_get",
                "parameters": [
                    {
                        "description": "Filters preapproval rules by the ID of the service they belong to (i.e. okta.com). This parameter also requires app_instance_id to be included.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "App Class Id",
                            "description": "Filters preapproval rules by the ID of the service they belong to (i.e. okta.com). This parameter also requires app_instance_id to be included."
                        },
                        "name": "app_class_id",
                        "in": "query"
                    },
                    {
                        "description": "Filters preapproval rules by the ID of the instance (app_class_id) to which they belong. This parameter also requires app_class_id to be included.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "App Instance Id",
                            "description": "Filters preapproval rules by the ID of the instance (app_class_id) to which they belong. This parameter also requires app_class_id to be included."
                        },
                        "name": "app_instance_id",
                        "in": "query"
                    },
                    {
                        "description": "Filters preapproval rules by the ID of the app they belong to them.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "App Id",
                            "description": "Filters preapproval rules by the ID of the app they belong to them."
                        },
                        "name": "app_id",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1.0,
                            "title": "Page",
                            "default": 1
                        },
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100.0,
                            "minimum": 1.0,
                            "title": "Size",
                            "default": 50
                        },
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page_PreApprovalRuleOutput_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "x-speakeasy-entity-operation": "PreApprovalRule#create",
                "tags": [
                    "AppStore"
                ],
                "summary": "Create Pre Approval Rule",
                "description": "Creates a pre-approval rule attached to an App in the AppStore.",
                "operationId": "create_pre_approval_rule_appstore_pre_approval_rules_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PreApprovalRuleInput"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreApprovalRuleOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/appstore/pre_approval_rules/{pre_approval_rule_id}": {
            "get": {
                "tags": [
                    "AppStore"
                ],
                "summary": "Get Appstore Pre Approval Rule",
                "description": "Get an AppStore pre-approval rule.",
                "operationId": "get_appstore_pre_approval_rule_appstore_pre_approval_rules__pre_approval_rule_id__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Pre Approval Rule Id"
                        },
                        "name": "pre_approval_rule_id",
                        "in": "path",
                        "x-speakeasy-match": "id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreApprovalRuleOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "patch": {
                "x-speakeasy-entity-operation": "PreApprovalRule#update",
                "tags": [
                    "AppStore"
                ],
                "summary": "Update Pre Approval Rule",
                "description": "**Update a pre-approval rule attached to an App in the AppStore.**\n\n\nAll fields present in the payload will override the pre-approval rule's data.\nAny missing fields will be disregarded.",
                "operationId": "update_pre_approval_rule_appstore_pre_approval_rules__pre_approval_rule_id__patch",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Pre Approval Rule Id"
                        },
                        "name": "pre_approval_rule_id",
                        "in": "path",
                        "x-speakeasy-match": "id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PreApprovalRuleUpdateInput"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PreApprovalRuleOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "delete": {
                "x-speakeasy-entity-operation": "PreApprovalRule#delete",
                "tags": [
                    "AppStore"
                ],
                "summary": "Update Pre Approval Rule",
                "description": "",
                "operationId": "delete_pre_approval_rule",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Pre Approval Rule Id"
                        },
                        "name": "pre_approval_rule_id",
                        "in": "path",
                        "x-speakeasy-match": "id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "title": "Pre Approval Rule"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/appstore/apps/{app_id}/settings": {
            "get": {
                "tags": [
                    "AppStore"
                ],
                "summary": "Get Appstore App Settings",
                "description": "Get AppStore app settings.",
                "operationId": "getAppStoreAppSettings",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Id"
                        },
                        "name": "app_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AppStoreAppSettingsOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "AppStore"
                ],
                "summary": "Update Appstore App Settings",
                "description": "Update AppStore app settings.",
                "operationId": "updateAppStoreAppSettings",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Id"
                        },
                        "name": "app_id",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AppStoreAppSettingsInput"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AppStoreAppSettingsOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/appstore/apps": {
            "get": {
                "tags": [
                    "AppStore"
                ],
                "summary": "Get Appstore Apps",
                "description": "List all AppStore apps. If supported app identifier filters are provided, will return only one app that matches provided filters.",
                "operationId": "getAppStoreApps",
                "parameters": [
                    {
                        "description": "Filters apps by the ID of the service (i.e. okta.com). This parameter also requires app_instance_id to be included.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "App Class Id",
                            "description": "Filters apps by the ID of the service (i.e. okta.com). This parameter also requires app_instance_id to be included."
                        },
                        "name": "app_class_id",
                        "in": "query"
                    },
                    {
                        "description": "Filters apps by the ID of the instance from the service (app_class_id) from the service.This parameter also requires app_class_id to be included.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "App Instance Id",
                            "description": "Filters apps by the ID of the instance from the service (app_class_id) from the service.This parameter also requires app_class_id to be included."
                        },
                        "name": "app_instance_id",
                        "in": "query"
                    },
                    {
                        "description": "Filters apps by the ID of the app.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "App Id",
                            "description": "Filters apps by the ID of the app."
                        },
                        "name": "app_id",
                        "in": "query"
                    },
                    {
                        "description": "Filters apps by name. This parameter requires a domain_id to be included.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Name Search",
                            "description": "Filters apps by name. This parameter requires a domain_id to be included."
                        },
                        "name": "name_search",
                        "in": "query"
                    },
                    {
                        "description": "Filters apps by name. This parameter requires a domain_id to be included.",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "title": "Exact Match",
                            "description": "Filters apps by name. This parameter requires a domain_id to be included.",
                            "default": false
                        },
                        "name": "exact_match",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1.0,
                            "title": "Page",
                            "default": 1
                        },
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100.0,
                            "minimum": 1.0,
                            "title": "Size",
                            "default": 50
                        },
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page_AppStoreApp_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "post": {
                "x-speakeasy-entity-operation": "AppStoreApp#create",
                "tags": [
                    "AppStore"
                ],
                "summary": "Add App To Appstore",
                "description": "Add app to AppStore with given settings.",
                "operationId": "addAppToAppStore",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddAppToAppStoreInput"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AppStoreAppSettingsOutput"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/appstore/apps/{app_id}": {
            "get": {
                "x-speakeasy-entity-operation": "AppStoreApp#read",
                "tags": [
                    "AppStore"
                ],
                "summary": "Get Appstore App",
                "description": "Get AppStore app.",
                "operationId": "getAppStoreApp",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Id"
                        },
                        "name": "app_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AppStoreApp"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            },
            "delete": {
                "x-speakeasy-entity-operation": "AppStoreApp#delete",
                "tags": [
                    "AppStore"
                ],
                "summary": "Delete Appstore App",
                "description": "...",
                "operationId": "...",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "App Id"
                        },
                        "name": "app_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "title": "..."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/appstore/access_request": {
            "post": {
                "tags": [
                    "AppStore"
                ],
                "summary": "Create Access Request",
                "description": "Create a request to access a specific permission in the appstore.",
                "operationId": "createAccessRequest",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateAccessRequestInput"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AccessRequest"
                                    },
                                    "type": "array",
                                    "title": "Response Createaccessrequest"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/appstore/access_requests/{access_request_id}": {
            "get": {
                "tags": [
                    "AppStore"
                ],
                "summary": "Get Access Request",
                "description": "Get access request by ID.",
                "operationId": "getAccessRequest",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Access Request Id"
                        },
                        "name": "access_request_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1.0,
                            "title": "Page",
                            "default": 1
                        },
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100.0,
                            "minimum": 1.0,
                            "title": "Size",
                            "default": 50
                        },
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccessRequest"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/appstore/access_requests": {
            "get": {
                "tags": [
                    "AppStore"
                ],
                "summary": "Get Access Requests",
                "description": "Get all access requests for the current organization.",
                "operationId": "getAccessRequests",
                "parameters": [
                    {
                        "description": "Filters requests by the ID of the target user.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Target User Id",
                            "description": "Filters requests by the ID of the target user."
                        },
                        "name": "target_user_id",
                        "in": "query"
                    },
                    {
                        "description": "Filters requests by the ID of the requester user.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Requester User Id",
                            "description": "Filters requests by the ID of the requester user."
                        },
                        "name": "requester_user_id",
                        "in": "query"
                    },
                    {
                        "description": "Filters requests by the ID of the user.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "User Id",
                            "description": "Filters requests by the ID of the user."
                        },
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "description": "Filters requests by their status.",
                        "required": false,
                        "schema": {
                            "items": {
                                "$ref": "#/components/schemas/SupportRequestStatus"
                            },
                            "type": "array",
                            "description": "Filters requests by their status."
                        },
                        "name": "statuses",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1.0,
                            "title": "Page",
                            "default": 1
                        },
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100.0,
                            "minimum": 1.0,
                            "title": "Size",
                            "default": 50
                        },
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page_AccessRequest_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/vendor_agreements": {
            "get": {
                "tags": [
                    "Vendor Management"
                ],
                "summary": "Get Vendor Agreements",
                "description": "List all of your company's vendor agreements.",
                "operationId": "listVendorAgreements",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1.0,
                            "title": "Page",
                            "default": 1
                        },
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "maximum": 100.0,
                            "minimum": 1.0,
                            "title": "Size",
                            "default": 50
                        },
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page_VendorAgreement_"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/found_documents": {
            "post": {
                "tags": [
                    "Vendor Management"
                ],
                "summary": "Upload Found Documents",
                "description": "Upload a newly discovered document (e.g. Order Form, Quote) to Lumos for review",
                "operationId": "createFoundDocument",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FoundDocumentsUpload",
                                "properties": {
                                    "unique_identifier": {
                                        "type": "string",
                                        "title": "Unique Identifier",
                                        "description": "A unique identifier for the contract being uploaded. This can be an ID from an external system like Coupa, an internal ID such as a PO number, or simply the name of the file."
                                    },
                                    "files": {
                                        "items": {
                                            "properties": {
                                                "type": {
                                                    "type": "string"
                                                },
                                                "value": {
                                                    "type": "string"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "type": "array",
                                        "title": "Files",
                                        "description": "A list of publicly accessible URLs that direct to files related to a Vendor Agreement. For example, the Order Form, Quote, MSA, or Terms and Conditions."
                                    },
                                    "vendor_name": {
                                        "type": "string",
                                        "title": "Vendor Name",
                                        "description": "The name of the vendor associated with this document"
                                    },
                                    "start_date": {
                                        "type": "string",
                                        "format": "date",
                                        "title": "Start Date",
                                        "description": "The start date of the attached contract"
                                    },
                                    "end_date": {
                                        "type": "string",
                                        "format": "date",
                                        "title": "End Date",
                                        "description": "The end date of the attached contract"
                                    },
                                    "source_app_id": {
                                        "type": "string",
                                        "title": "Source App ID",
                                        "description": "The ID of the app that sourced this document. For example, if you are using this API to create a custom Google Drive integration, you might include the ID for the Google Workspaceapp in Lumos. This determines which app's logo is displayed in Lumos."
                                    },
                                    "total_cost": {
                                        "allOf": [
                                            {
                                                "$ref": "#/components/schemas/Cost"
                                            }
                                        ],
                                        "title": "Total Cost",
                                        "description": "The total cost of the contract. If this is a multi-year contract, this should include the cost for future years."
                                    }
                                },
                                "type": "object",
                                "required": [
                                    "unique_identifier",
                                    "files"
                                ]
                            }
                        },
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "unique_identifier": {
                                        "type": "string",
                                        "title": "Unique Identifier",
                                        "description": "A unique identifier for the contract being uploaded. This can be an ID from an external system like Coupa, an internal ID such as a PO number, or simply the name of the file."
                                    },
                                    "files": {
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        },
                                        "type": "array",
                                        "title": "Files",
                                        "description": "A list of files related to a vendor agreement. For example, the Order Form, Quote, MSA, or Terms and Conditions."
                                    },
                                    "vendor_name": {
                                        "type": "string",
                                        "title": "Vendor Name",
                                        "description": "The name of the vendor associated with this document"
                                    },
                                    "start_date": {
                                        "type": "string",
                                        "format": "date",
                                        "title": "Start Date",
                                        "description": "The start date of the attached contract"
                                    },
                                    "end_date": {
                                        "type": "string",
                                        "format": "date",
                                        "title": "End Date",
                                        "description": "The end date of the attached contract"
                                    },
                                    "source_app_id": {
                                        "type": "string",
                                        "title": "Source App ID",
                                        "description": "The ID of the app that sourced this document. For example, if you are using this API to create a custom Google Drive integration, you might include the ID for the Google Workspaceapp in Lumos. This determines which app's logo is displayed in Lumos."
                                    }
                                },
                                "type": "object",
                                "required": [
                                    "unique_identifier",
                                    "files"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/orders": {
            "post": {
                "tags": [
                    "Vendor Management"
                ],
                "summary": "Upload Order",
                "description": "Upload a newly discovered document (e.g. Order Form, Quote) to Lumos",
                "operationId": "createOrder",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrderInput"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/webhooks/airbase/milestone_event": {
            "post": {
                "tags": [
                    "Integration Webhooks"
                ],
                "summary": "Process Airbase Milestone Event",
                "description": "Webhook for Airbase to send events as a workflow transitions through milestones",
                "operationId": "processAirbaseMilestoneEvent",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AirbaseMilestoneEvent"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "HTTPBearer": []
                    }
                ]
            }
        },
        "/art": {
            "get": {
                "tags": [
                    "Meta"
                ],
                "summary": "Get Art",
                "description": "Return Lumos ASCII art. Can be used to verify the API is working.",
                "operationId": "Lumos Art.",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/info": {
            "get": {
                "tags": [
                    "Meta"
                ],
                "summary": "Get Info",
                "description": "Returns current git revision.",
                "operationId": "Lumos liveness check",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Lumos Liveness Check"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AccessRequest": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "The ID of the access request."
                    },
                    "app_id": {
                        "type": "string",
                        "title": "App Id",
                        "description": "The ID of the app the request is for."
                    },
                    "app_name": {
                        "type": "string",
                        "title": "App Name",
                        "description": "The name of the app the request is for."
                    },
                    "requester_user": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/User"
                            }
                        ],
                        "title": "Requester User",
                        "description": "The user who requested access. It's possible for one user to request access on another's behalf."
                    },
                    "target_user": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/User"
                            }
                        ],
                        "title": "Target User",
                        "description": "The user the request is for."
                    },
                    "supporter_user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SupportRequestStatus"
                            }
                        ],
                        "description": "The current status of the request."
                    },
                    "notes": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object",
                        "title": "Notes",
                        "description": "The reason the user wrote for putting the access request into the given state.",
                        "default": {}
                    },
                    "expires_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Expires At"
                    },
                    "requestable_permissions": {
                        "items": {
                            "$ref": "#/components/schemas/RequestablePermissionOutput"
                        },
                        "type": "array",
                        "title": "Requestable Permissions"
                    },
                    "requested_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Requested At"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "app_id",
                    "app_name",
                    "requester_user",
                    "target_user",
                    "status"
                ],
                "title": "AccessRequest",
                "description": "API version of DomainAppSupportRequest."
            },
            "Account": {
                "properties": {
                    "app_id": {
                        "type": "string",
                        "title": "App Id",
                        "description": "The ID of the app that owns this account."
                    },
                    "unique_identifier": {
                        "type": "string",
                        "title": "Unique Identifier",
                        "description": "The stable identifier of this account."
                    },
                    "account_type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AccountType"
                            }
                        ],
                        "description": "The type of this account."
                    },
                    "email": {
                        "type": "string",
                        "title": "Email",
                        "description": "The email of this account."
                    }
                },
                "type": "object",
                "required": [
                    "app_id",
                    "unique_identifier",
                    "account_type"
                ],
                "title": "Account"
            },
            "AccountInput": {
                "properties": {
                    "unique_identifier": {
                        "type": "string",
                        "title": "Unique Identifier",
                        "description": "The stable identifier of this account."
                    },
                    "email": {
                        "type": "string",
                        "title": "Email",
                        "description": "The email of this account."
                    },
                    "first_name": {
                        "type": "string",
                        "title": "First Name",
                        "description": "The first name of the user."
                    },
                    "last_name": {
                        "type": "string",
                        "title": "Last Name",
                        "description": "The last name of the user."
                    },
                    "last_activity": {
                        "type": "string",
                        "title": "Last Activity",
                        "description": "The datetime of last activity of the user."
                    },
                    "last_login": {
                        "type": "string",
                        "title": "Last Login",
                        "description": "The datetime of last login of the user."
                    },
                    "status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AccountLifecycleStatus"
                            }
                        ],
                        "description": "The status of the account."
                    },
                    "permissions": {
                        "items": {
                            "$ref": "#/components/schemas/PermissionInput"
                        },
                        "type": "array",
                        "title": "Permissions",
                        "description": "The permissions of the account.",
                        "default": []
                    }
                },
                "type": "object",
                "required": [
                    "unique_identifier"
                ],
                "title": "AccountInput"
            },
            "AccountLifecycleStatus": {
                "type": "string",
                "enum": [
                    "DISCOVERED",
                    "STAGED",
                    "ACCESS_CREATED",
                    "ACTIVE",
                    "ARCHIVED",
                    "SUSPENDED",
                    "DEPROVISIONED",
                    "MANUALLY_REMOVED",
                    "ACCESS_REMOVED",
                    "NON_CORPORATE_ACCOUNT",
                    "WAITING_MANUAL_REMOVAL"
                ],
                "title": "AccountLifecycleStatus",
                "description": "NOTE: If you update this, also update UserDomainAppLifecycleStatus\n\nDISCOVERED             - Account discovered through accountfinding. Could be noisy.\n\nSTAGED                 - An account that has been queued for provisioning, but is not\n                         provisioned yet. Relevant for Apps where provisioning is async\n                         (eg. Okta, OneLogin).\n\nACCESS_CREATED         - When an account has been provisioned but not accessed.\n\nACTIVE                 - A live, active, accessible account.\n\nSUSPENDED              - The user can no longer access the account, the license may or may not\n                         be removed. The account can be recovered.\n\nDEPROVISIONED          - The user can no longer access the account, the license was removed,\n                         and the account cannot be recovered.\n\nARCHIVED               - The user can no longer access the account, the license may or may not\n                         be removed. The account can be recovered.\n\nMANUALLY_REMOVED       - The user can no longer access the account, the license is presumably\n                         removed, but all of this was done manually\n\nACCESS_REMOVED         - The user can no longer access the account, but a license may still\n                         exist. This is the case when we remove access through Okta but not a\n                         direct integration\n\nNON_CORPORATE_ACCOUNT  - The account doesn't exist, or is a personal employee account.\n\nWAITING_MANUAL_REMOVAL - Waiting manual removal, someone was requested to remove the user access\n                         from the App, and we are waiting for an answer about it."
            },
            "AccountType": {
                "type": "string",
                "enum": [
                    "USER",
                    "ROLE",
                    "SERVICE"
                ],
                "title": "AccountType",
                "description": "An enumeration."
            },
            "AccountsUploadInput": {
                "properties": {
                    "accounts": {
                        "items": {
                            "$ref": "#/components/schemas/AccountInput"
                        },
                        "type": "array",
                        "title": "Accounts",
                        "description": "Accounts to upload.",
                        "default": []
                    },
                    "app_id": {
                        "type": "string",
                        "title": "App Id",
                        "description": "The ID of the app to upload accounts to."
                    }
                },
                "type": "object",
                "required": [
                    "app_id"
                ],
                "title": "AccountsUploadInput"
            },
            "ActivityLog": {
                "properties": {
                    "event_hash": {
                        "type": "string",
                        "title": "Event Hash"
                    },
                    "event_type": {
                        "type": "string",
                        "title": "Event Type"
                    },
                    "event_type_user_friendly": {
                        "type": "string",
                        "title": "Event Type User Friendly"
                    },
                    "outcome": {
                        "type": "string",
                        "title": "Outcome"
                    },
                    "targets": {
                        "items": {
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Targets"
                    },
                    "actor": {
                        "type": "object",
                        "title": "Actor"
                    },
                    "event_began_at": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Event Began At"
                    },
                    "event_metadata": {
                        "type": "object",
                        "title": "Event Metadata"
                    }
                },
                "type": "object",
                "required": [
                    "event_hash",
                    "event_type",
                    "event_type_user_friendly",
                    "outcome",
                    "targets",
                    "actor",
                    "event_began_at",
                    "event_metadata"
                ],
                "title": "ActivityLog",
                "description": "API version of SIEMEvent"
            },
            "ActivityRecord": {
                "properties": {
                    "account": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ActivityRecordAccountInput"
                            }
                        ],
                        "title": "Account",
                        "description": "Metadata that Lumos can use to match the activity record to a software account within Lumos."
                    },
                    "event": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ActivityRecordEventInput"
                            }
                        ],
                        "title": "Event",
                        "description": "Metadata about the event being uploaded."
                    },
                    "timestamp": {
                        "type": "string",
                        "format": "date-time",
                        "title": "Timestamp",
                        "description": "The timestamp of this event, in ISO 8601 format."
                    },
                    "source_app_id": {
                        "type": "string",
                        "title": "Source App Id",
                        "description": "UUID of the application in Lumos where this activity record was sourced (e.g. the ID of Okta within Lumos)"
                    },
                    "app": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ActivityRecordAppInput"
                            }
                        ],
                        "title": "App",
                        "description": "Metadata that Lumos can use to match the activity record to an application within Lumos."
                    }
                },
                "type": "object",
                "required": [
                    "account",
                    "event",
                    "timestamp",
                    "source_app_id"
                ],
                "title": "ActivityRecord"
            },
            "ActivityRecordAccountInput": {
                "properties": {
                    "external_id": {
                        "type": "string",
                        "title": "External Id",
                        "description": "The external app's user ID for the account."
                    },
                    "email": {
                        "type": "string",
                        "title": "Email",
                        "description": "The email associated with the account"
                    }
                },
                "type": "object",
                "title": "ActivityRecordAccountInput"
            },
            "ActivityRecordAppInput": {
                "properties": {
                    "instance_identifier": {
                        "type": "string",
                        "title": "Instance Identifier",
                        "description": "The ID of the app."
                    }
                },
                "type": "object",
                "required": [
                    "instance_identifier"
                ],
                "title": "ActivityRecordAppInput"
            },
            "ActivityRecordEventInput": {
                "properties": {
                    "type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ActivityRecordEventType"
                            }
                        ],
                        "description": "The type of event being uploaded."
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ],
                "title": "ActivityRecordEventInput"
            },
            "ActivityRecordEventType": {
                "enum": [
                    "LOGIN",
                    "ACTIVITY"
                ],
                "title": "ActivityRecordEventType",
                "description": "An enumeration."
            },
            "ActivityRecordInput": {
                "properties": {
                    "records": {
                        "items": {
                            "$ref": "#/components/schemas/ActivityRecord"
                        },
                        "type": "array",
                        "title": "Records",
                        "description": "The activity records to upload."
                    }
                },
                "type": "object",
                "required": [
                    "records"
                ],
                "title": "ActivityRecordInput"
            },
            "ActivityRecordOutput": {
                "properties": {
                    "job": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/SyncTaskOutput"
                            }
                        ],
                        "title": "Job",
                        "description": "State of the job to post-process the records."
                    }
                },
                "type": "object",
                "required": [
                    "job"
                ],
                "title": "ActivityRecordOutput"
            },
            "AddAppToAppStoreInput": {
                "properties": {
                    "custom_request_instructions": {
                        "type": "string",
                        "title": "Custom Request Instructions",
                        "description": "AppStore App instructions."
                    },
                    "request_flow": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AppStoreAppSettingsRequestFlowInput"
                            }
                        ],
                        "title": "Request Flow",
                        "description": "Request flow configuration to request access to app."
                    },
                    "provisioning": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AppStoreAppSettingsProvisioningInput"
                            }
                        ],
                        "title": "Provisioning",
                        "description": "Provisioning flow configuration to request access to app."
                    },
                    "app_id": {
                        "type": "string",
                        "title": "App Id",
                        "description": "The ID of the app to add to the app store."
                    }
                },
                "type": "object",
                "required": [
                    "app_id"
                ],
                "title": "AddAppToAppStoreInput"
            },
            "AirbaseMilestoneEvent": {
                "properties": {},
                "type": "object",
                "title": "AirbaseMilestoneEvent",
                "description": "Model of the input we'll get from Airbase's webhook call.\nTo be completed when we get docs."
            },
            "AllowedGroupsConfigInput": {
                "properties": {
                    "type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AllowedGroupsConfigType"
                            }
                        ],
                        "description": "The type of this allowed groups config, can be all groups or specific.",
                        "default": "ALL_GROUPS"
                    },
                    "groups": {
                        "items": {
                            "$ref": "#/components/schemas/BaseGroup"
                        },
                        "type": "array",
                        "title": "Groups",
                        "description": "The groups associated with this config."
                    }
                },
                "type": "object",
                "title": "AllowedGroupsConfigInput"
            },
            "AllowedGroupsConfigOutput": {
                "properties": {
                    "type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AllowedGroupsConfigType"
                            }
                        ],
                        "description": "The type of this allowed groups config, can be all groups or specific.",
                        "default": "ALL_GROUPS"
                    },
                    "groups": {
                        "items": {
                            "$ref": "#/components/schemas/Group"
                        },
                        "type": "array",
                        "title": "Groups",
                        "description": "The groups associated with this config.",
                        "default": []
                    }
                },
                "type": "object",
                "title": "AllowedGroupsConfigOutput"
            },
            "AllowedGroupsConfigType": {
                "type": "string",
                "enum": [
                    "ALL_GROUPS",
                    "SPECIFIED_GROUPS"
                ],
                "title": "AllowedGroupsConfigType",
                "description": "An enumeration."
            },
            "App": {
                "x-speakeasy-entity": "App",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "The ID of this app.",
                        "x-speakeasy-param-suppress-computed-diff": true
                    },
                    "app_class_id": {
                        "type": "string",
                        "title": "App Class Id",
                        "description": "The ID of the service associated with this app."
                    },
                    "instance_id": {
                        "type": "string",
                        "title": "Instance Id",
                        "description": "The ID of the instance associated with this app."
                    },
                    "user_friendly_label": {
                        "type": "string",
                        "title": "User Friendly Label",
                        "description": "The user-friendly label of this app."
                    },
                    "status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DomainAppStatus"
                            }
                        ],
                        "description": "The status of this app."
                    },
                    "sources": {
                        "items": {
                            "$ref": "#/components/schemas/DiscoverySource"
                        },
                        "type": "array",
                        "description": "The sources of this app."
                    },
                    "allow_multiple_permission_selection": {
                        "type": "boolean",
                        "title": "Allow Multiple Permission Selection",
                        "description": "Whether the app is configured to allow multiple permissions to be requested at a time."
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "app_class_id",
                    "instance_id",
                    "user_friendly_label",
                    "status",
                    "sources",
                    "allow_multiple_permission_selection"
                ],
                "title": "App"
            },
            "AppAdminsInput": {
                "properties": {
                    "groups": {
                        "items": {
                            "$ref": "#/components/schemas/BaseGroup"
                        },
                        "type": "array",
                        "title": "Groups",
                        "description": "Groups assigned as app admins."
                    },
                    "users": {
                        "items": {
                            "$ref": "#/components/schemas/BaseUser"
                        },
                        "type": "array",
                        "title": "Users",
                        "description": "Users assigned as app admins."
                    }
                },
                "type": "object",
                "title": "AppAdminsInput"
            },
            "AppAdminsOutput": {
                "properties": {
                    "groups": {
                        "items": {
                            "$ref": "#/components/schemas/Group"
                        },
                        "type": "array",
                        "title": "Groups",
                        "description": "Groups assigned as app admins.",
                        "default": []
                    },
                    "users": {
                        "items": {
                            "$ref": "#/components/schemas/User"
                        },
                        "type": "array",
                        "title": "Users",
                        "description": "Users assigned as app admins.",
                        "default": []
                    }
                },
                "type": "object",
                "title": "AppAdminsOutput"
            },
            "AppApproversInput": {
                "properties": {
                    "groups": {
                        "items": {
                            "$ref": "#/components/schemas/BaseGroup"
                        },
                        "type": "array",
                        "title": "Groups",
                        "description": "Groups assigned as support request approvers."
                    },
                    "users": {
                        "items": {
                            "$ref": "#/components/schemas/BaseUser"
                        },
                        "type": "array",
                        "title": "Users",
                        "description": "Users assigned as support request approvers."
                    }
                },
                "type": "object",
                "title": "AppApproversInput"
            },
            "AppApproversOutput": {
                "properties": {
                    "groups": {
                        "items": {
                            "$ref": "#/components/schemas/Group"
                        },
                        "type": "array",
                        "title": "Groups",
                        "description": "Groups assigned as support request approvers.",
                        "default": []
                    },
                    "users": {
                        "items": {
                            "$ref": "#/components/schemas/User"
                        },
                        "type": "array",
                        "title": "Users",
                        "description": "Users assigned as support request approvers.",
                        "default": []
                    }
                },
                "type": "object",
                "title": "AppApproversOutput"
            },
            "AppInputCreate": {
                "x-speakeasy-entity": "App",
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the app you're creating."
                    },
                    "category": {
                        "type": "string",
                        "title": "Category",
                        "description": "The category of the app you're creating."
                    },
                    "description": {
                        "type": "string",
                        "title": "Description",
                        "description": "The description of the app you're creating."
                    }
                },
                "type": "object",
                "title": "AppInputCreate"
            },
            "AppStoreApp": {
                "x-speakeasy-entity": "AppStoreApp",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "The ID of this app."
                    },
                    "app_class_id": {
                        "type": "string",
                        "title": "App Class Id",
                        "description": "The ID of the service associated with this app."
                    },
                    "instance_id": {
                        "type": "string",
                        "title": "Instance Id",
                        "description": "The ID of the instance associated with this app."
                    },
                    "user_friendly_label": {
                        "type": "string",
                        "title": "User Friendly Label",
                        "description": "The user-friendly label of this app."
                    },
                    "status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/DomainAppStatus"
                            }
                        ],
                        "description": "The status of this app."
                    },
                    "sources": {
                        "items": {
                            "$ref": "#/components/schemas/DiscoverySource"
                        },
                        "type": "array",
                        "description": "The sources of this app."
                    },
                    "allow_multiple_permission_selection": {
                        "type": "boolean",
                        "title": "Allow Multiple Permission Selection",
                        "description": "Whether the app is configured to allow multiple permissions to be requested at a time."
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "app_class_id",
                    "instance_id",
                    "user_friendly_label",
                    "status",
                    "sources",
                    "allow_multiple_permission_selection"
                ],
                "title": "AppStoreApp"
            },
            "AppStoreAppSettingsInput": {
                "properties": {
                    "custom_request_instructions": {
                        "type": "string",
                        "title": "Custom Request Instructions",
                        "description": "AppStore App instructions."
                    },
                    "request_flow": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AppStoreAppSettingsRequestFlowInput"
                            }
                        ],
                        "title": "Request Flow",
                        "description": "Request flow configuration to request access to app."
                    },
                    "provisioning": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AppStoreAppSettingsProvisioningInput"
                            }
                        ],
                        "title": "Provisioning",
                        "description": "Provisioning flow configuration to request access to app."
                    }
                },
                "type": "object",
                "title": "AppStoreAppSettingsInput"
            },
            "AppStoreAppSettingsOutput": {
                "properties": {
                    "custom_request_instructions": {
                        "type": "string",
                        "title": "Custom Request Instructions",
                        "description": "AppStore App instructions."
                    },
                    "request_flow": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AppStoreAppSettingsRequestFlowOutput"
                            }
                        ],
                        "title": "Request Flow",
                        "description": "Request flow configuration to request access to app."
                    },
                    "provisioning": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AppStoreAppSettingsProvisioningOutput"
                            }
                        ],
                        "title": "Provisioning",
                        "description": "Provisioning flow configuration to request access to app."
                    }
                },
                "type": "object",
                "title": "AppStoreAppSettingsOutput"
            },
            "AppStoreAppSettingsProvisioningInput": {
                "properties": {
                    "groups_provisioning": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/GroupProvisioningOption"
                            }
                        ],
                        "description": "If enabled, Approvers must choose a group to provision the user to for access requests."
                    },
                    "time_based_access": {
                        "items": {
                            "$ref": "#/components/schemas/TimeBasedAccessOptions"
                        },
                        "type": "array",
                        "description": "If enabled, users can request an app for a selected duration. After expiry, Lumos will automatically remove user's access."
                    },
                    "manual_steps_needed": {
                        "type": "boolean",
                        "title": "Manual Steps Needed",
                        "description": "If enabled, Lumos will reach out to the App Admin after initial access is granted to perform additional manual steps. Note that if this option is enabled, this action must be confirmed by the App Admin in order to resolve the request."
                    },
                    "custom_provisioning_instructions": {
                        "type": "string",
                        "title": "Custom Provisioning Instructions",
                        "description": "Only Available if manual steps is active. During the provisioning step, send a custom message to app admins explaining how to provision a user to the app. Markdown for links and text formatting is supported."
                    },
                    "provisioning_webhook": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BaseInlineWebhook"
                            }
                        ],
                        "title": "Provisioning Webhook",
                        "description": "The provisioning webhook optionally associated with this app."
                    },
                    "access_removal_inline_webhook": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BaseInlineWebhook"
                            }
                        ],
                        "title": "Access Removal Inline Webhook",
                        "description": "An inactivity workflow can be optionally associated with this app."
                    }
                },
                "type": "object",
                "title": "AppStoreAppSettingsProvisioningInput"
            },
            "AppStoreAppSettingsProvisioningOutput": {
                "properties": {
                    "groups_provisioning": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/GroupProvisioningOption"
                            }
                        ],
                        "description": "If enabled, Approvers must choose a group to provision the user to for access requests."
                    },
                    "time_based_access": {
                        "items": {
                            "$ref": "#/components/schemas/TimeBasedAccessOptions"
                        },
                        "type": "array",
                        "description": "If enabled, users can request an app for a selected duration. After expiry, Lumos will automatically remove user's access."
                    },
                    "manual_steps_needed": {
                        "type": "boolean",
                        "title": "Manual Steps Needed",
                        "description": "If enabled, Lumos will reach out to the App Admin after initial access is granted to perform additional manual steps. Note that if this option is enabled, this action must be confirmed by the App Admin in order to resolve the request."
                    },
                    "custom_provisioning_instructions": {
                        "type": "string",
                        "title": "Custom Provisioning Instructions",
                        "description": "Only Available if manual steps is active. During the provisioning step, send a custom message to app admins explaining how to provision a user to the app. Markdown for links and text formatting is supported."
                    },
                    "provisioning_webhook": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/InlineWebhook"
                            }
                        ],
                        "title": "Provisioning Webhook",
                        "description": "The provisioning webhook optionally associated with this config."
                    },
                    "access_removal_inline_webhook": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/InlineWebhook"
                            }
                        ],
                        "title": "Access Removal Inline Webhook",
                        "description": "An inactivity workflow can be optionally associated with this config."
                    }
                },
                "type": "object",
                "title": "AppStoreAppSettingsProvisioningOutput"
            },
            "AppStoreAppSettingsRequestFlowInput": {
                "properties": {
                    "discoverability": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AppStoreVisibility"
                            }
                        ],
                        "description": "AppStore App visibility."
                    },
                    "custom_approval_message": {
                        "type": "string",
                        "title": "Custom Approval Message",
                        "description": "During the approval step, send a custom message to requesters. Markdown for links and text formatting is supported."
                    },
                    "require_manager_approval": {
                        "type": "boolean",
                        "title": "Require Manager Approval",
                        "description": "When a user makes an access request, require that their manager approves the request before moving on to additional approvals."
                    },
                    "require_additional_approval": {
                        "type": "boolean",
                        "title": "Require Additional Approval",
                        "description": "Only turn on when working with sensitive permissions to ensure a smooth employee experience."
                    },
                    "allowed_groups": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AllowedGroupsConfigInput"
                            }
                        ],
                        "title": "Allowed Groups",
                        "description": "The allowed groups associated with this config."
                    },
                    "approvers": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AppApproversInput"
                            }
                        ],
                        "title": "Approvers",
                        "description": "AppStore App approvers assigned."
                    },
                    "approvers_stage_2": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AppApproversInput"
                            }
                        ],
                        "title": "Approvers Stage 2",
                        "description": "AppStore App stage 2 approvers assigned."
                    },
                    "admins": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AppAdminsInput"
                            }
                        ],
                        "title": "Admins",
                        "description": "AppStore App admins assigned."
                    },
                    "request_validation_inline_webhook": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BaseInlineWebhook"
                            }
                        ],
                        "title": "Request Validation Inline Webhook",
                        "description": "A request validation webhook can be optionally associated with this app."
                    }
                },
                "type": "object",
                "title": "AppStoreAppSettingsRequestFlowInput"
            },
            "AppStoreAppSettingsRequestFlowOutput": {
                "properties": {
                    "discoverability": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AppStoreVisibility"
                            }
                        ],
                        "description": "AppStore App visibility."
                    },
                    "custom_approval_message": {
                        "type": "string",
                        "title": "Custom Approval Message",
                        "description": "During the approval step, send a custom message to requesters. Markdown for links and text formatting is supported."
                    },
                    "require_manager_approval": {
                        "type": "boolean",
                        "title": "Require Manager Approval",
                        "description": "When a user makes an access request, require that their manager approves the request before moving on to additional approvals."
                    },
                    "require_additional_approval": {
                        "type": "boolean",
                        "title": "Require Additional Approval",
                        "description": "Only turn on when working with sensitive permissions to ensure a smooth employee experience."
                    },
                    "allowed_groups": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AllowedGroupsConfigOutput"
                            }
                        ],
                        "title": "Allowed Groups",
                        "description": "The allowed groups config associated with this config.",
                        "default": {
                            "type": "ALL_GROUPS",
                            "groups": []
                        }
                    },
                    "approvers": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AppApproversOutput"
                            }
                        ],
                        "title": "Approvers",
                        "description": "AppStore App approvers assigned.",
                        "default": {
                            "groups": [],
                            "users": []
                        }
                    },
                    "approvers_stage_2": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AppApproversOutput"
                            }
                        ],
                        "title": "Approvers Stage 2",
                        "description": "AppStore App stage 2 approvers assigned.",
                        "default": {
                            "groups": [],
                            "users": []
                        }
                    },
                    "admins": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AppAdminsOutput"
                            }
                        ],
                        "title": "Admins",
                        "description": "AppStore App admins assigned.",
                        "default": []
                    },
                    "request_validation_inline_webhook": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/InlineWebhook"
                            }
                        ],
                        "title": "Request Validation Inline Webhook",
                        "description": "A request validation webhook can be optionally associated with this config."
                    }
                },
                "type": "object",
                "title": "AppStoreAppSettingsRequestFlowOutput"
            },
            "AppStoreVisibility": {
                "enum": [
                    "FULL",
                    "LIMITED",
                    "NONE"
                ],
                "title": "AppStoreVisibility",
                "description": "An enumeration."
            },
            "AppStoreVisibilityOption": {
                "type": "string",
                "enum": [
                    "HIDDEN",
                    "VISIBLE"
                ],
                "title": "AppStoreVisibilityOption",
                "description": "An enumeration."
            },
            "ApproverInput": {
                "properties": {
                    "type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ApproverType"
                            }
                        ],
                        "description": "The type of this approver."
                    },
                    "user": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BaseUser"
                            }
                        ],
                        "title": "User",
                        "description": "Optionally, the approver can be a user."
                    },
                    "group": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BaseGroup"
                            }
                        ],
                        "title": "Group",
                        "description": "Optionally, the approver can be a group."
                    }
                },
                "type": "object",
                "title": "ApproverInput"
            },
            "ApproverOutput": {
                "properties": {
                    "type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ApproverType"
                            }
                        ],
                        "description": "The type of this approver."
                    },
                    "user": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/User"
                            }
                        ],
                        "title": "User",
                        "description": "Optionally, the approver can be a user."
                    },
                    "group": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Group"
                            }
                        ],
                        "title": "Group",
                        "description": "Optionally, the approver can be a group."
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ],
                "title": "ApproverOutput"
            },
            "ApproverType": {
                "type": "string",
                "enum": [
                    "USER",
                    "GROUP"
                ],
                "title": "ApproverType",
                "description": "An enumeration."
            },
            "BaseGroup": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "The ID of this group."
                    },
                    "app_id": {
                        "type": "string",
                        "title": "App Id",
                        "description": "The ID of the app that owns this group."
                    },
                    "integration_specific_id": {
                        "type": "string",
                        "title": "Integration Specific Id",
                        "description": "The ID of this group, specific to the integration."
                    }
                },
                "type": "object",
                "title": "BaseGroup"
            },
            "BaseInlineWebhook": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "The ID of this inline webhook."
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ],
                "title": "BaseInlineWebhook"
            },
            "BaseUser": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "The ID of this user."
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ],
                "title": "BaseUser"
            },
            "Cost": {
                "properties": {
                    "currency": {
                        "type": "string",
                        "title": "Currency",
                        "description": "The currency in which this cost is stored"
                    },
                    "value": {
                        "type": "integer",
                        "title": "Value",
                        "description": "The quantity of the cost in terms of the specified currency"
                    }
                },
                "type": "object",
                "required": [
                    "value"
                ],
                "title": "Cost"
            },
            "CreateAccessRequestInput": {
                "properties": {
                    "app_id": {
                        "type": "string",
                        "title": "App Id"
                    },
                    "target_user_id": {
                        "type": "string",
                        "title": "Target User Id",
                        "description": "User to request access for. If omitted, request for the current user."
                    },
                    "note": {
                        "type": "string",
                        "title": "Note",
                        "description": "Why the user needs access."
                    },
                    "expiration_in_seconds": {
                        "type": "integer",
                        "title": "Expiration In Seconds",
                        "description": "Once granted, how long the access should last. Omit for permanent access."
                    },
                    "requestable_permission_ids": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Requestable Permission Ids",
                        "description": "The IDs of the requestable permissions the user is requesting access to. Omit this to just request access to the app."
                    }
                },
                "type": "object",
                "required": [
                    "app_id",
                    "note"
                ],
                "title": "CreateAccessRequestInput"
            },
            "DiscoverySource": {
                "type": "string",
                "enum": [
                    "GSUITE_QUICK_INBOX",
                    "GSUITE_DEEP_INBOX",
                    "MICROSOFT_DEEP_INBOX",
                    "MICROSOFT_OAUTH",
                    "MICROSOFT_GCC",
                    "GSUITE_OAUTH",
                    "OKTA",
                    "MANUAL",
                    "ONELOGIN",
                    "ATLASSIAN",
                    "GOOGLE_CLOUD",
                    "LUMOS_INTEGRATION",
                    "JUMPCLOUD"
                ],
                "title": "DiscoverySource",
                "description": "An enumeration."
            },
            "DomainAppStatus": {
                "enum": [
                    "DISCOVERED",
                    "NEEDS_REVIEW",
                    "APPROVED",
                    "BLOCKLISTED",
                    "DEPRECATED"
                ],
                "title": "DomainAppStatus",
                "description": "An enumeration."
            },
            "FileUpload": {
                "properties": {
                    "type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/FileUploadType"
                            }
                        ],
                        "description": "The type of content being uploaded. The only supported type today is 'url'"
                    },
                    "value": {
                        "type": "string",
                        "title": "Value",
                        "description": "The data to upload. This should be a publicly accessible URL that resolves to a file"
                    }
                },
                "type": "object",
                "required": [
                    "type",
                    "value"
                ],
                "title": "FileUpload"
            },
            "FileUploadType": {
                "type": "string",
                "enum": [
                    "url"
                ],
                "title": "FileUploadType",
                "description": "An enumeration."
            },
            "FlowState": {
                "type": "string",
                "enum": [
                    "SUCCESS",
                    "FAILURE",
                    "RUNNING",
                    "NOT_STARTED"
                ],
                "title": "FlowState",
                "description": "An enumeration."
            },
            "FoundDocumentsUpload": {
                "properties": {
                    "unique_identifier": {
                        "type": "string",
                        "title": "Unique Identifier",
                        "description": "A value that can be used to uniquely identify this contract (e.g. PO number, file name, etc)"
                    },
                    "files": {
                        "items": {
                            "$ref": "#/components/schemas/FileUpload"
                        },
                        "type": "array",
                        "title": "Files",
                        "description": "A list of URLs that resolve to files that should be attached to the Found Document"
                    },
                    "vendor_name": {
                        "type": "string",
                        "title": "Vendor Name",
                        "description": "The name of the vendor that this document is for"
                    },
                    "start_date": {
                        "type": "string",
                        "title": "Start Date",
                        "description": "The start of the vendor agreement"
                    },
                    "end_date": {
                        "type": "string",
                        "title": "End Date",
                        "description": "The end of the vendor agreement"
                    },
                    "source_app_id": {
                        "type": "string",
                        "title": "Source App Id",
                        "description": "By passing the ID of an application within Lumos, it will appear as if this Found Document was sourced from that app"
                    },
                    "total_cost": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Cost"
                            }
                        ],
                        "title": "Total Cost",
                        "description": "The total cost of the contract. If this is a multi-year contract, this should include the cost for future years"
                    },
                    "line_items": {
                        "items": {
                            "$ref": "#/components/schemas/LineItemUpload"
                        },
                        "type": "array",
                        "title": "Line Items",
                        "description": "The line items on the contract"
                    }
                },
                "type": "object",
                "required": [
                    "unique_identifier",
                    "files"
                ],
                "title": "FoundDocumentsUpload"
            },
            "Group": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "The ID of this group."
                    },
                    "app_id": {
                        "type": "string",
                        "title": "App Id",
                        "description": "The ID of the app that owns this group."
                    },
                    "integration_specific_id": {
                        "type": "string",
                        "title": "Integration Specific Id",
                        "description": "The ID of this group, specific to the integration."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of this group."
                    },
                    "description": {
                        "type": "string",
                        "title": "Description",
                        "description": "The description of this group."
                    },
                    "group_lifecycle": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/GroupLifecycle"
                            }
                        ],
                        "description": "The lifecycle of this group.",
                        "default": "SYNCED"
                    },
                    "source_app_id": {
                        "type": "string",
                        "title": "Source App Id",
                        "description": "The ID of the app that owns this group."
                    }
                },
                "type": "object",
                "title": "Group"
            },
            "GroupProvisioningOption": {
                "enum": [
                    "DIRECT_TO_USER",
                    "GROUPS_AND_HIDDEN",
                    "GROUPS_AND_VISIBLE"
                ],
                "title": "GroupProvisioningOption",
                "description": "An enumeration."
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "InlineWebhook": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "The ID of this inline webhook."
                    },
                    "hook_type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/InlineWebhookType"
                            }
                        ],
                        "description": "The type of this inline webhook."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of this inline webhook."
                    },
                    "description": {
                        "type": "string",
                        "title": "Description",
                        "description": "The description of this inline webhook."
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "hook_type",
                    "name"
                ],
                "title": "InlineWebhook"
            },
            "InlineWebhookType": {
                "type": "string",
                "enum": [
                    "PRE_APPROVAL",
                    "PROVISION",
                    "DEPROVISION",
                    "REQUEST_VALIDATION",
                    "SIEM"
                ],
                "title": "InlineWebhookType",
                "description": "An enumeration."
            },
            "JobStateOutput": {
                "properties": {
                    "job_id": {
                        "type": "string",
                        "title": "Job Id",
                        "description": "The ID of the job."
                    },
                    "state": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/FlowState"
                            }
                        ],
                        "description": "The state of the job."
                    }
                },
                "type": "object",
                "required": [
                    "job_id"
                ],
                "title": "JobStateOutput"
            },
            "GroupLifecycle": {
                "type": "string",
                "enum": [
                    "SYNCED",
                    "NATIVE"
                ],
                "title": "Lifecycle",
                "description": "An enumeration."
            },
            "LimitOffsetPage_ActivityLog_": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/ActivityLog"
                        },
                        "type": "array",
                        "title": "Items"
                    },
                    "total": {
                        "type": "integer",
                        "minimum": 0.0,
                        "title": "Total"
                    },
                    "limit": {
                        "type": "integer",
                        "minimum": 1.0,
                        "title": "Limit"
                    },
                    "offset": {
                        "type": "integer",
                        "minimum": 0.0,
                        "title": "Offset"
                    },
                    "links": {
                        "$ref": "#/components/schemas/Links"
                    }
                },
                "type": "object",
                "required": [
                    "items",
                    "links"
                ],
                "title": "LimitOffsetPage[ActivityLog]"
            },
            "LineItem": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the line item as stored in Lumos"
                    },
                    "type": {
                        "type": "string",
                        "title": "Type",
                        "description": "The type of purchase that this line item refers to"
                    },
                    "quantity": {
                        "type": "integer",
                        "title": "Quantity",
                        "description": "The number of units purchased for this line item"
                    },
                    "unit_cost": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/LineItemUnitCost"
                            }
                        ],
                        "title": "Unit Cost",
                        "description": "The unit cost of this line item"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type",
                    "quantity",
                    "unit_cost"
                ],
                "title": "LineItem"
            },
            "LineItemInput": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the line item as stored in Lumos"
                    },
                    "type": {
                        "type": "string",
                        "title": "Type",
                        "description": "The type of purchase that this line item refers to"
                    },
                    "quantity": {
                        "type": "integer",
                        "title": "Quantity",
                        "description": "The number of units purchased for this line item"
                    },
                    "unit_cost": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/LineItemUnitCostInput"
                            }
                        ],
                        "title": "Unit Cost",
                        "description": "The per-unit cost of the line item"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type",
                    "quantity",
                    "unit_cost"
                ],
                "title": "LineItemInput"
            },
            "LineItemUnitCost": {
                "properties": {
                    "per_month": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Cost"
                            }
                        ],
                        "title": "Per Month",
                        "description": "The per unit cost associated with this line item, amortized to the cost per month"
                    }
                },
                "type": "object",
                "required": [
                    "per_month"
                ],
                "title": "LineItemUnitCost"
            },
            "LineItemUnitCostInput": {
                "properties": {
                    "period": {
                        "type": "string",
                        "title": "Period",
                        "description": "The period which this cost covers. Available options are per_month or per_year"
                    },
                    "value": {
                        "type": "number",
                        "title": "Value",
                        "description": "The cost in terms of the specified currency (4 decimal places supported)"
                    }
                },
                "type": "object",
                "required": [
                    "period",
                    "value"
                ],
                "title": "LineItemUnitCostInput"
            },
            "LineItemUpload": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the line item as stored in Lumos"
                    },
                    "quantity": {
                        "type": "integer",
                        "title": "Quantity",
                        "description": "The number of units purchased for this line item"
                    },
                    "unit_cost": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Cost"
                            }
                        ],
                        "title": "Unit Cost",
                        "description": "The unit cost of this line item"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "quantity",
                    "unit_cost"
                ],
                "title": "LineItemUpload"
            },
            "Links": {
                "properties": {
                    "first": {
                        "type": "string",
                        "title": "First",
                        "example": "/api/v1/users?limit=1&offset1"
                    },
                    "last": {
                        "type": "string",
                        "title": "Last",
                        "example": "/api/v1/users?limit=1&offset1"
                    },
                    "self": {
                        "type": "string",
                        "title": "Self",
                        "example": "/api/v1/users?limit=1&offset1"
                    },
                    "next": {
                        "type": "string",
                        "title": "Next",
                        "example": "/api/v1/users?limit=1&offset1"
                    },
                    "prev": {
                        "type": "string",
                        "title": "Prev",
                        "example": "/api/v1/users?limit=1&offset1"
                    }
                },
                "type": "object",
                "title": "Links"
            },
            "ManagerApprovalOption": {
                "type": "string",
                "enum": [
                    "NONE",
                    "INITIAL_APPROVAL"
                ],
                "title": "ManagerApprovalOption",
                "description": "An enumeration."
            },
            "OrderCustomAttribute": {
                "properties": {
                    "type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/OrderCustomAttributeType"
                            }
                        ],
                        "description": "The type of custom attribute. Only text and user options are available today"
                    },
                    "value": {
                        "type": "string",
                        "title": "Value",
                        "description": "The value of the attribute for an individual Order"
                    }
                },
                "type": "object",
                "required": [
                    "type"
                ],
                "title": "OrderCustomAttribute"
            },
            "OrderCustomAttributeType": {
                "enum": [
                    "TEXT",
                    "USER"
                ],
                "title": "OrderCustomAttributeType",
                "description": "An enumeration."
            },
            "OrderInput": {
                "properties": {
                    "unique_identifier": {
                        "type": "string",
                        "title": "Unique Identifier",
                        "description": "A unique ID for the contract being uploaded. This can be an ID from an external system like Ironclad, an internal ID such as a PO number, or simply the name of the vendor + date of the contract."
                    },
                    "vendor": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Vendor"
                            }
                        ],
                        "title": "Vendor",
                        "description": "Information about the vendor associated with this contract. Currently, we will only support a name field."
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date",
                        "title": "Start Date",
                        "description": "The start date of the attached contract"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date",
                        "title": "End Date",
                        "description": "The end date of the attached contract"
                    },
                    "opt_out_date": {
                        "type": "string",
                        "format": "date",
                        "title": "Opt Out Date",
                        "description": "The date by which a vendor must be notified before terminating the order"
                    },
                    "auto_renewal": {
                        "type": "boolean",
                        "title": "Auto Renewal",
                        "description": "Whether or not the contract auto-renews"
                    },
                    "currency": {
                        "type": "string",
                        "title": "Currency",
                        "description": "The currency in which the contract is being paid in ISO 4217 format"
                    },
                    "line_items": {
                        "items": {
                            "$ref": "#/components/schemas/LineItemInput"
                        },
                        "type": "array",
                        "title": "Line Items",
                        "description": "The list of currently active line items for this Vendor Agreement. If there are no currently active line items, the most recent set of line items is returned."
                    },
                    "custom_attributes": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/OrderCustomAttribute"
                        },
                        "type": "object",
                        "title": "Custom Attributes",
                        "description": "Any additional attributes that you would like to save on the Order. The set of available options must be configured in advance in Lumos."
                    },
                    "source_app_id": {
                        "type": "string",
                        "title": "Source App Id",
                        "description": "UUID of the application in Lumos where this order was sourced (e.g. the ID of Ironclad within Lumos)"
                    }
                },
                "type": "object",
                "required": [
                    "unique_identifier",
                    "vendor",
                    "start_date",
                    "end_date",
                    "auto_renewal",
                    "line_items"
                ],
                "title": "OrderInput"
            },
            "Page_AccessRequest_": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/AccessRequest"
                        },
                        "type": "array",
                        "title": "Items"
                    },
                    "total": {
                        "type": "integer",
                        "minimum": 0.0,
                        "title": "Total"
                    },
                    "page": {
                        "type": "integer",
                        "minimum": 1.0,
                        "title": "Page"
                    },
                    "size": {
                        "type": "integer",
                        "minimum": 1.0,
                        "title": "Size"
                    },
                    "pages": {
                        "type": "integer",
                        "minimum": 0.0,
                        "title": "Pages"
                    }
                },
                "type": "object",
                "required": [
                    "items"
                ],
                "title": "Page[AccessRequest]"
            },
            "Page_Account_": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/Account"
                        },
                        "type": "array",
                        "title": "Items"
                    },
                    "total": {
                        "type": "integer",
                        "minimum": 0.0,
                        "title": "Total"
                    },
                    "page": {
                        "type": "integer",
                        "minimum": 1.0,
                        "title": "Page"
                    },
                    "size": {
                        "type": "integer",
                        "minimum": 1.0,
                        "title": "Size"
                    },
                    "pages": {
                        "type": "integer",
                        "minimum": 0.0,
                        "title": "Pages"
                    }
                },
                "type": "object",
                "required": [
                    "items"
                ],
                "title": "Page[Account]"
            },
            "Page_AppStoreApp_": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/AppStoreApp"
                        },
                        "type": "array",
                        "title": "Items"
                    },
                    "total": {
                        "type": "integer",
                        "minimum": 0.0,
                        "title": "Total"
                    },
                    "page": {
                        "type": "integer",
                        "minimum": 1.0,
                        "title": "Page"
                    },
                    "size": {
                        "type": "integer",
                        "minimum": 1.0,
                        "title": "Size"
                    },
                    "pages": {
                        "type": "integer",
                        "minimum": 0.0,
                        "title": "Pages"
                    }
                },
                "type": "object",
                "required": [
                    "items"
                ],
                "title": "Page[AppStoreApp]"
            },
            "Page_App_": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/App"
                        },
                        "type": "array",
                        "title": "Items"
                    },
                    "total": {
                        "type": "integer",
                        "minimum": 0.0,
                        "title": "Total"
                    },
                    "page": {
                        "type": "integer",
                        "minimum": 1.0,
                        "title": "Page"
                    },
                    "size": {
                        "type": "integer",
                        "minimum": 1.0,
                        "title": "Size"
                    },
                    "pages": {
                        "type": "integer",
                        "minimum": 0.0,
                        "title": "Pages"
                    }
                },
                "type": "object",
                "required": [
                    "items"
                ],
                "title": "Page[App]"
            },
            "Page_Group_": {
                "x-speakeasy-entity": "Groups",
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/Group"
                        },
                        "type": "array",
                        "title": "Items"
                    },
                    "total": {
                        "type": "integer",
                        "minimum": 0.0,
                        "title": "Total"
                    },
                    "page": {
                        "type": "integer",
                        "minimum": 1.0,
                        "title": "Page"
                    },
                    "size": {
                        "type": "integer",
                        "minimum": 1.0,
                        "title": "Size"
                    },
                    "pages": {
                        "type": "integer",
                        "minimum": 0.0,
                        "title": "Pages"
                    }
                },
                "type": "object",
                "required": [
                    "items"
                ],
                "title": "Page[Group]"
            },
            "Page_PreApprovalRuleOutput_": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/PreApprovalRuleOutput"
                        },
                        "type": "array",
                        "title": "Items"
                    },
                    "total": {
                        "type": "integer",
                        "minimum": 0.0,
                        "title": "Total"
                    },
                    "page": {
                        "type": "integer",
                        "minimum": 1.0,
                        "title": "Page"
                    },
                    "size": {
                        "type": "integer",
                        "minimum": 1.0,
                        "title": "Size"
                    },
                    "pages": {
                        "type": "integer",
                        "minimum": 0.0,
                        "title": "Pages"
                    }
                },
                "type": "object",
                "required": [
                    "items"
                ],
                "title": "Page[PreApprovalRuleOutput]"
            },
            "Page_RequestablePermissionOutput_": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/RequestablePermissionOutput"
                        },
                        "type": "array",
                        "title": "Items"
                    },
                    "total": {
                        "type": "integer",
                        "minimum": 0.0,
                        "title": "Total"
                    },
                    "page": {
                        "type": "integer",
                        "minimum": 1.0,
                        "title": "Page"
                    },
                    "size": {
                        "type": "integer",
                        "minimum": 1.0,
                        "title": "Size"
                    },
                    "pages": {
                        "type": "integer",
                        "minimum": 0.0,
                        "title": "Pages"
                    }
                },
                "type": "object",
                "required": [
                    "items"
                ],
                "title": "Page[RequestablePermissionOutput]"
            },
            "Page_User_": {
                "x-speakeasy-entity": "Users",
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/User"
                        },
                        "type": "array",
                        "title": "Items"
                    },
                    "total": {
                        "type": "integer",
                        "minimum": 0.0,
                        "title": "Total"
                    },
                    "page": {
                        "type": "integer",
                        "minimum": 1.0,
                        "title": "Page"
                    },
                    "size": {
                        "type": "integer",
                        "minimum": 1.0,
                        "title": "Size"
                    },
                    "pages": {
                        "type": "integer",
                        "minimum": 0.0,
                        "title": "Pages"
                    }
                },
                "type": "object",
                "required": [
                    "items"
                ],
                "title": "Page[User]"
            },
            "Page_VendorAgreement_": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/VendorAgreement"
                        },
                        "type": "array",
                        "title": "Items"
                    },
                    "total": {
                        "type": "integer",
                        "minimum": 0.0,
                        "title": "Total"
                    },
                    "page": {
                        "type": "integer",
                        "minimum": 1.0,
                        "title": "Page"
                    },
                    "size": {
                        "type": "integer",
                        "minimum": 1.0,
                        "title": "Size"
                    },
                    "pages": {
                        "type": "integer",
                        "minimum": 0.0,
                        "title": "Pages"
                    }
                },
                "type": "object",
                "required": [
                    "items"
                ],
                "title": "Page[VendorAgreement]"
            },
            "PermissionInput": {
                "properties": {
                    "unique_identifier": {
                        "type": "string",
                        "title": "Unique Identifier",
                        "description": "The unique identifier of the permission."
                    },
                    "type": {
                        "type": "string",
                        "title": "Type",
                        "description": "The type of the permission."
                    },
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the permission."
                    }
                },
                "type": "object",
                "title": "PermissionInput"
            },
            "PermissionType": {
                "type": "string",
                "enum": [
                    "SYNCED",
                    "NATIVE"
                ],
                "title": "PermissionType",
                "description": "An enumeration."
            },
            "PreApprovalRuleInput": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "The ID of this preapproval rule."
                    },
                    "app_id": {
                        "type": "string",
                        "title": "App Id",
                        "description": "The ID of the app associated with this pre-approval rule."
                    },
                    "app_class_id": {
                        "type": "string",
                        "title": "App Class Id",
                        "description": "The ID of the service associated with this pre-approval rule."
                    },
                    "app_instance_id": {
                        "type": "string",
                        "title": "App Instance Id",
                        "description": "Optionally, an app has an identifer associated with it's particular instance."
                    },
                    "justification": {
                        "type": "string",
                        "title": "Justification",
                        "description": "The justification of this preapproval rule."
                    },
                    "preapproved_groups": {
                        "items": {
                            "$ref": "#/components/schemas/BaseGroup"
                        },
                        "type": "array",
                        "title": "Preapproved Groups",
                        "description": "The preapproved groups of this preapproval rule."
                    },
                    "preapproved_permissions": {
                        "items": {
                            "$ref": "#/components/schemas/RequestablePermissionBase"
                        },
                        "type": "array",
                        "title": "Preapproved Permissions",
                        "description": "The preapproved permissions of this preapproval rule."
                    },
                    "preapproval_webhooks": {
                        "items": {
                            "$ref": "#/components/schemas/BaseInlineWebhook"
                        },
                        "type": "array",
                        "title": "Preapproval Webhooks",
                        "description": "The preapproval webhooks of this preapproval rule."
                    },
                    "time_based_access": {
                        "items": {
                            "$ref": "#/components/schemas/TimeBasedAccessOptions"
                        },
                        "type": "array",
                        "description": "Users will be pre-approved only when they request for the time lengths selected here. When multiple permissions are selected, only time lengths that are valid for all of the selected permissions will show."
                    }
                },
                "type": "object",
                "title": "PreApprovalRuleInput"
            },
            "PreApprovalRuleOutput": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "The ID of this preapproval rule.",
                        "x-speakeasy-param-suppress-computed-diff": true
                    },
                    "justification": {
                        "type": "string",
                        "title": "Justification",
                        "description": "The justification of this preapproval rule."
                    },
                    "app_id": {
                        "type": "string",
                        "title": "App Id",
                        "description": "The ID of the app associated with this pre-approval rule."
                    },
                    "app_class_id": {
                        "type": "string",
                        "title": "App Class Id",
                        "description": "The ID of the service associated with this pre-approval rule."
                    },
                    "app_instance_id": {
                        "type": "string",
                        "title": "App Instance Id",
                        "description": "Optionally, an app has an identifer associated with it's particular instance."
                    },
                    "preapproved_groups": {
                        "items": {
                            "$ref": "#/components/schemas/Group"
                        },
                        "type": "array",
                        "title": "Preapproved Groups",
                        "description": "The preapproved groups of this preapproval rule.",
                        "default": []
                    },
                    "preapproved_permissions": {
                        "items": {
                            "$ref": "#/components/schemas/RequestablePermissionBaseOutput"
                        },
                        "type": "array",
                        "title": "Preapproved Permissions",
                        "description": "The preapproved permissions of this preapproval rule.",
                        "default": []
                    },
                    "preapproval_webhooks": {
                        "items": {
                            "$ref": "#/components/schemas/InlineWebhook"
                        },
                        "type": "array",
                        "title": "Preapproval Webhooks",
                        "description": "The preapproval webhooks of this preapproval rule.",
                        "default": []
                    },
                    "time_based_access": {
                        "items": {
                            "$ref": "#/components/schemas/TimeBasedAccessOptions"
                        },
                        "type": "array",
                        "description": "Preapproval rule time access length,"
                    }
                },
                "type": "object",
                "required": [
                    "justification"
                ],
                "title": "PreApprovalRuleOutput"
            },
            "PreApprovalRuleUpdateInput": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "The ID of this preapproval rule."
                    },
                    "justification": {
                        "type": "string",
                        "title": "Justification",
                        "description": "The justification of this preapproval rule."
                    },
                    "preapproved_groups": {
                        "items": {
                            "$ref": "#/components/schemas/BaseGroup"
                        },
                        "type": "array",
                        "title": "Preapproved Groups",
                        "description": "The preapproved groups of this preapproval rule."
                    },
                    "preapproved_permissions": {
                        "items": {
                            "$ref": "#/components/schemas/RequestablePermissionBase"
                        },
                        "type": "array",
                        "title": "Preapproved Permissions",
                        "description": "The preapproved permissions of this preapproval rule."
                    },
                    "preapproval_webhooks": {
                        "items": {
                            "$ref": "#/components/schemas/BaseInlineWebhook"
                        },
                        "type": "array",
                        "title": "Preapproval Webhooks",
                        "description": "The preapproval webhooks of this preapproval rule."
                    },
                    "time_based_access": {
                        "items": {
                            "$ref": "#/components/schemas/TimeBasedAccessOptions"
                        },
                        "type": "array",
                        "description": "Users will be pre-approved only when they request for the time lengths selected here. When multiple permissions are selected, only time lengths that are valid for all of the selected permissions will show."
                    }
                },
                "type": "object",
                "title": "PreApprovalRuleUpdateInput"
            },
            "RequestApprovalConfigInput": {
                "properties": {
                    "request_approval_config_override": {
                        "type": "boolean",
                        "title": "Request Approval Config Override",
                        "description": "Indicates if approval flow is overrided"
                    },
                    "manager_approval": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ManagerApprovalOption"
                            }
                        ],
                        "description": "Manager approval can be configured as necessary to continue",
                        "default": "NONE"
                    },
                    "require_additional_approval": {
                        "type": "boolean",
                        "title": "Require Additional Approval",
                        "description": "Only turn on when working with sensitive permissions to ensure a smooth employee experience."
                    },
                    "custom_approval_message": {
                        "type": "string",
                        "title": "Custom Approval Message",
                        "description": "During the approval step, send a custom message to requesters. Note that the Permission level approval message will override the App level approval message. Markdown for links and text formatting is supported."
                    },
                    "custom_approval_message_override": {
                        "type": "boolean",
                        "title": "Custom Approval Message Override",
                        "description": "Indicates if custom_approval_message is overrided"
                    },
                    "request_approval_stages": {
                        "items": {
                            "$ref": "#/components/schemas/RequestApprovalStageInput"
                        },
                        "type": "array",
                        "title": "Request Approval Stages",
                        "description": "The stages of this request approval."
                    }
                },
                "type": "object",
                "title": "RequestApprovalConfigInput"
            },
            "RequestApprovalConfigOutput": {
                "properties": {
                    "request_approval_config_override": {
                        "type": "boolean",
                        "title": "Request Approval Config Override",
                        "description": "Indicates if approval flow is overrided"
                    },
                    "manager_approval": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/ManagerApprovalOption"
                            }
                        ],
                        "description": "Manager approval can be configured as necessary to continue",
                        "default": "NONE"
                    },
                    "require_additional_approval": {
                        "type": "boolean",
                        "title": "Require Additional Approval",
                        "description": "Only turn on when working with sensitive permissions to ensure a smooth employee experience."
                    },
                    "custom_approval_message": {
                        "type": "string",
                        "title": "Custom Approval Message",
                        "description": "During the approval step, send a custom message to requesters. Note that the Permission level approval message will override the App level approval message. Markdown for links and text formatting is supported."
                    },
                    "custom_approval_message_override": {
                        "type": "boolean",
                        "title": "Custom Approval Message Override",
                        "description": "Indicates if custom_approval_message is overrided"
                    },
                    "request_approval_stages": {
                        "items": {
                            "$ref": "#/components/schemas/RequestApprovalStageOutput"
                        },
                        "type": "array",
                        "title": "Request Approval Stages",
                        "description": "The stages of this request approval.",
                        "default": [
                            {}
                        ]
                    }
                },
                "type": "object",
                "title": "RequestApprovalConfigOutput"
            },
            "RequestApprovalStageInput": {
                "properties": {
                    "approvers": {
                        "items": {
                            "$ref": "#/components/schemas/ApproverInput"
                        },
                        "type": "array",
                        "title": "Approvers",
                        "description": "The approvers of this stage."
                    }
                },
                "type": "object",
                "title": "RequestApprovalStageInput"
            },
            "RequestApprovalStageOutput": {
                "properties": {
                    "approvers": {
                        "items": {
                            "$ref": "#/components/schemas/ApproverOutput"
                        },
                        "type": "array",
                        "title": "Approvers",
                        "description": "The approvers of this stage."
                    }
                },
                "type": "object",
                "title": "RequestApprovalStageOutput"
            },
            "RequestConfigInputCreate": {
                "properties": {
                    "appstore_visibility": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AppStoreVisibilityOption"
                            }
                        ],
                        "description": "The appstore visibility of this request config.",
                        "default": "HIDDEN"
                    },
                    "allowed_groups_override": {
                        "type": "boolean",
                        "title": "Allowed Groups Override",
                        "description": "Indicates if allowed groups is overrided"
                    },
                    "allowed_groups": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AllowedGroupsConfigInput"
                            }
                        ],
                        "title": "Allowed Groups",
                        "description": "The allowed groups associated with this config."
                    },
                    "request_approval_config": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RequestApprovalConfigInput"
                            }
                        ],
                        "title": "Request Approval Config",
                        "description": "A request approval config can be optionally associated with this config"
                    },
                    "access_removal_inline_webhook": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BaseInlineWebhook"
                            }
                        ],
                        "title": "Access Removal Inline Webhook",
                        "description": "An inactivity workflow can be optionally associated with this config."
                    },
                    "request_validation_inline_webhook": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BaseInlineWebhook"
                            }
                        ],
                        "title": "Request Validation Inline Webhook",
                        "description": "A request validation webhook can be optionally associated with this config."
                    },
                    "request_fulfillment_config": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RequestFulfillmentConfigInput"
                            }
                        ],
                        "title": "Request Fulfillment Config",
                        "description": "A request fulfillment config can be optionally associated with this config"
                    }
                },
                "type": "object",
                "title": "RequestConfigInputCreate"
            },
            "RequestConfigInputUpdate": {
                "properties": {
                    "appstore_visibility": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AppStoreVisibilityOption"
                            }
                        ],
                        "description": "The appstore visibility of this request config.",
                        "default": "HIDDEN"
                    },
                    "allowed_groups_override": {
                        "type": "boolean",
                        "title": "Allowed Groups Override",
                        "description": "Indicates if allowed groups is overrided"
                    },
                    "allowed_groups": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AllowedGroupsConfigInput"
                            }
                        ],
                        "title": "Allowed Groups",
                        "description": "The allowed groups associated with this config."
                    },
                    "request_approval_config": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RequestApprovalConfigInput"
                            }
                        ],
                        "title": "Request Approval Config",
                        "description": "A request approval config can be optionally associated with this config"
                    },
                    "access_removal_inline_webhook": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BaseInlineWebhook"
                            }
                        ],
                        "title": "Access Removal Inline Webhook",
                        "description": "An inactivity workflow can be optionally associated with this config."
                    },
                    "request_validation_inline_webhook": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BaseInlineWebhook"
                            }
                        ],
                        "title": "Request Validation Inline Webhook",
                        "description": "A request validation webhook can be optionally associated with this config."
                    },
                    "request_fulfillment_config": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RequestFulfillmentConfigInputUpdate"
                            }
                        ],
                        "title": "Request Fulfillment Config",
                        "description": "A request fulfillment config can be optionally associated with this config"
                    }
                },
                "type": "object",
                "title": "RequestConfigInputUpdate"
            },
            "RequestConfigOutput": {
                "properties": {
                    "appstore_visibility": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AppStoreVisibilityOption"
                            }
                        ],
                        "description": "The appstore visibility of this request config.",
                        "default": "HIDDEN"
                    },
                    "allowed_groups_override": {
                        "type": "boolean",
                        "title": "Allowed Groups Override",
                        "description": "Indicates if allowed groups is overrided"
                    },
                    "allowed_groups": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/AllowedGroupsConfigOutput"
                            }
                        ],
                        "title": "Allowed Groups",
                        "description": "The allowed groups config associated with this config.",
                        "default": {
                            "type": "ALL_GROUPS",
                            "groups": []
                        }
                    },
                    "request_approval_config": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RequestApprovalConfigOutput"
                            }
                        ],
                        "title": "Request Approval Config",
                        "description": "A request approval config can be optionally associated with this config",
                        "default": {
                            "manager_approval": "NONE",
                            "request_approval_stages": [
                                {}
                            ]
                        }
                    },
                    "request_fulfillment_config": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RequestFulfillmentConfigOutput"
                            }
                        ],
                        "title": "Request Fulfillment Config",
                        "description": "A request fulfillment config can be optionally associated with this config",
                        "default": {}
                    },
                    "access_removal_inline_webhook": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/InlineWebhook"
                            }
                        ],
                        "title": "Access Removal Inline Webhook",
                        "description": "An inactivity workflow can be optionally associated with this config."
                    },
                    "request_validation_inline_webhook": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/InlineWebhook"
                            }
                        ],
                        "title": "Request Validation Inline Webhook",
                        "description": "A request validation webhook can be optionally associated with this config."
                    }
                },
                "type": "object",
                "title": "RequestConfigOutput"
            },
            "RequestFulfillmentConfigInput": {
                "properties": {
                    "manual_steps_needed": {
                        "type": "boolean",
                        "title": "Manual Steps Needed",
                        "description": "Whether manual steps are needed."
                    },
                    "manual_instructions": {
                        "type": "string",
                        "title": "Manual Instructions",
                        "description": "The manual instructions that go along."
                    },
                    "time_based_access": {
                        "items": {
                            "$ref": "#/components/schemas/TimeBasedAccessOptions"
                        },
                        "type": "array",
                        "description": "If enabled, users can request an app for a selected duration. After expiry, Lumos will automatically remove user's access."
                    },
                    "time_based_access_override": {
                        "type": "boolean",
                        "title": "Time Based Access Override",
                        "description": "Indicates if time based access is overrided"
                    },
                    "provisioning_group": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BaseGroup"
                            }
                        ],
                        "title": "Provisioning Group",
                        "description": "The provisioning group optionally associated with this config."
                    },
                    "provisioning_webhook": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BaseInlineWebhook"
                            }
                        ],
                        "title": "Provisioning Webhook",
                        "description": "The provisioning webhook optionally associated with this config."
                    }
                },
                "type": "object",
                "title": "RequestFulfillmentConfigInput"
            },
            "RequestFulfillmentConfigInputUpdate": {
                "properties": {
                    "manual_steps_needed": {
                        "type": "boolean",
                        "title": "Manual Steps Needed",
                        "description": "Whether manual steps are needed."
                    },
                    "manual_instructions": {
                        "type": "string",
                        "title": "Manual Instructions",
                        "description": "The manual instructions that go along."
                    },
                    "time_based_access": {
                        "items": {
                            "$ref": "#/components/schemas/TimeBasedAccessOptions"
                        },
                        "type": "array",
                        "description": "If enabled, users can request an app for a selected duration. After expiry, Lumos will automatically remove user's access."
                    },
                    "time_based_access_override": {
                        "type": "boolean",
                        "title": "Time Based Access Override",
                        "description": "Indicates if time based access is overrided"
                    },
                    "provisioning_webhook": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/BaseInlineWebhook"
                            }
                        ],
                        "title": "Provisioning Webhook",
                        "description": "The provisioning webhook optionally associated with this config."
                    }
                },
                "type": "object",
                "title": "RequestFulfillmentConfigInputUpdate"
            },
            "RequestFulfillmentConfigOutput": {
                "properties": {
                    "manual_steps_needed": {
                        "type": "boolean",
                        "title": "Manual Steps Needed",
                        "description": "Whether manual steps are needed."
                    },
                    "manual_instructions": {
                        "type": "string",
                        "title": "Manual Instructions",
                        "description": "The manual instructions that go along."
                    },
                    "time_based_access": {
                        "items": {
                            "$ref": "#/components/schemas/TimeBasedAccessOptions"
                        },
                        "type": "array",
                        "description": "If enabled, users can request an app for a selected duration. After expiry, Lumos will automatically remove user's access."
                    },
                    "time_based_access_override": {
                        "type": "boolean",
                        "title": "Time Based Access Override",
                        "description": "Indicates if time based access is overrided"
                    },
                    "provisioning_group": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Group"
                            }
                        ],
                        "title": "Provisioning Group",
                        "description": "The provisioning group optionally assocated with this config."
                    },
                    "provisioning_webhook": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/InlineWebhook"
                            }
                        ],
                        "title": "Provisioning Webhook",
                        "description": "The provisioning webhook optionally associated with this config."
                    }
                },
                "type": "object",
                "title": "RequestFulfillmentConfigOutput"
            },
            "RequestablePermissionBase": {
                "x-speakeasy-entity": "RequestablePermission",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "The ID of this requestable permission."
                    }
                },
                "type": "object",
                "title": "RequestablePermissionBase"
            },
            "RequestablePermissionBaseOutput": {
                "x-speakeasy-entity": "RequestablePermission",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "The ID of this requestable permission."
                    },
                    "type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/PermissionType"
                            }
                        ],
                        "description": "The type of this requestable permission."
                    },
                    "label": {
                        "type": "string",
                        "title": "Label",
                        "description": "The label of this requestable permission."
                    },
                    "app_id": {
                        "type": "string",
                        "title": "App Id",
                        "description": "The ID of the app associated with this requestable permission.",
                        "x-speakeasy-param-suppress-computed-diff": true,
                        "x-speakeasy-conflicts-with": [
                            "../app_class_id",
                            "../app_instance_id"
                        ]
                    },
                    "app_class_id": {
                        "type": "string",
                        "title": "App Class Id",
                        "description": "The ID of the service associated with this requestable permission.",
                        "x-speakeasy-param-suppress-computed-diff": true,
                        "x-speakeasy-conflicts-with": [
                            "../app_id"
                        ]
                    },
                    "app_instance_id": {
                        "type": "string",
                        "title": "App Instance Id",
                        "description": "The ID of the instance associated with this requestable permission.",
                        "x-speakeasy-param-suppress-computed-diff": true,
                        "x-speakeasy-conflicts-with": [
                            "../app_id"
                        ]
                    }
                },
                "type": "object",
                "required": [
                    "label",
                    "app_id",
                    "app_class_id",
                    "app_instance_id"
                ],
                "title": "RequestablePermissionBaseOutput"
            },
            "RequestablePermissionInput": {
                "x-speakeasy-entity": "RequestablePermission",
                "properties": {
                    "app_id": {
                        "type": "string",
                        "title": "App Id",
                        "description": "The ID of the app associated with this requestable permission."
                    },
                    "app_class_id": {
                        "type": "string",
                        "title": "App Class Id",
                        "description": "The ID of the service associated with this requestable permission."
                    },
                    "app_instance_id": {
                        "type": "string",
                        "title": "App Instance Id",
                        "description": "Optionally, an app has an identifer associated with it's particular instance."
                    },
                    "label": {
                        "type": "string",
                        "title": "Label",
                        "description": "The label of this requestable permission."
                    },
                    "request_config": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RequestConfigInputCreate"
                            }
                        ],
                        "title": "Request Config",
                        "description": "The request config associated with this requestable permission."
                    }
                },
                "type": "object",
                "required": [
                    "label"
                ],
                "title": "RequestablePermissionInput"
            },
            "RequestablePermissionInputUpdate": {
                "properties": {
                    "app_id": {
                        "type": "string",
                        "title": "App Id",
                        "description": "The ID of the app associated with this requestable permission."
                    },
                    "app_class_id": {
                        "type": "string",
                        "title": "App Class Id",
                        "description": "The ID of the service associated with this requestable permission."
                    },
                    "app_instance_id": {
                        "type": "string",
                        "title": "App Instance Id",
                        "description": "Optionally, an app has an identifer associated with it's particular instance."
                    },
                    "label": {
                        "type": "string",
                        "title": "Label",
                        "description": "The label of this requestable permission."
                    },
                    "request_config": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RequestConfigInputUpdate"
                            }
                        ],
                        "title": "Request Config",
                        "description": "The request config associated with this requestable permission."
                    }
                },
                "type": "object",
                "title": "RequestablePermissionInputUpdate"
            },
            "RequestablePermissionOutput": {
                "x-speakeasy-entity": "RequestablePermission",
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "The ID of this requestable permission.",
                        "x-speakeasy-param-suppress-computed-diff": true
                    },
                    "type": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/PermissionType"
                            }
                        ],
                        "description": "The type of this requestable permission."
                    },
                    "label": {
                        "type": "string",
                        "title": "Label",
                        "description": "The label of this requestable permission."
                    },
                    "app_id": {
                        "type": "string",
                        "title": "App Id",
                        "description": "The ID of the app associated with this requestable permission."
                    },
                    "app_class_id": {
                        "type": "string",
                        "title": "App Class Id",
                        "description": "The ID of the service associated with this requestable permission."
                    },
                    "app_instance_id": {
                        "type": "string",
                        "title": "App Instance Id",
                        "description": "The ID of the instance associated with this requestable permission."
                    },
                    "request_config": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RequestConfigOutput"
                            }
                        ],
                        "title": "Request Config",
                        "description": "The request config associated with this requestable permission."
                    }
                },
                "type": "object",
                "required": [
                    "label",
                    "app_id",
                    "app_class_id",
                    "app_instance_id",
                    "request_config"
                ],
                "title": "RequestablePermissionOutput"
            },
            "RunInfoStatus": {
                "enum": [
                    "RUNNING",
                    "DONE"
                ],
                "title": "RunInfoStatus",
                "description": "An enumeration."
            },
            "SupportRequestStatus": {
                "enum": [
                    "PENDING",
                    "PENDING_MANAGER_APPROVAL",
                    "MANAGER_APPROVED",
                    "MANAGER_DENIED",
                    "PENDING_APPROVAL",
                    "APPROVED",
                    "DENIED",
                    "EXPIRED",
                    "CANCELLED",
                    "PENDING_PROVISIONING",
                    "PENDING_MANUAL_PROVISIONING",
                    "DENIED_PROVISIONING",
                    "PROVISIONED",
                    "PENDING_MANUAL_DEPROVISIONING",
                    "TIME_BASED_EXPIRED",
                    "COMPLETED",
                    "REVERTING",
                    "REVERTED"
                ],
                "title": "SupportRequestStatus",
                "description": "An enumeration."
            },
            "SyncTaskOutput": {
                "properties": {
                    "job_id": {
                        "type": "string",
                        "title": "Job Id",
                        "description": "The ID of the job."
                    },
                    "state": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/RunInfoStatus"
                            }
                        ],
                        "description": "The state of the job."
                    }
                },
                "type": "object",
                "required": [
                    "job_id"
                ],
                "title": "SyncTaskOutput"
            },
            "TimeBasedAccessOptions": {
                "type": "string",
                "enum": [
                    "2 hours",
                    "4 hours",
                    "12 hours",
                    "7 days",
                    "14 days",
                    "30 days",
                    "90 days",
                    "Unlimited"
                ],
                "title": "TimeBasedAccessOptions",
                "description": "An enumeration."
            },
            "User": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "The ID of this user."
                    },
                    "email": {
                        "type": "string",
                        "title": "Email",
                        "description": "The email of this user."
                    },
                    "given_name": {
                        "type": "string",
                        "title": "Given Name",
                        "description": "The given name of this user."
                    },
                    "family_name": {
                        "type": "string",
                        "title": "Family Name",
                        "description": "The family name of this user."
                    },
                    "status": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/UserLifecycleStatus"
                            }
                        ],
                        "description": "The status of this user."
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ],
                "title": "User"
            },
            "UserLifecycleStatus": {
                "type": "string",
                "enum": [
                    "STAGED",
                    "ACTIVE",
                    "SUSPENDED",
                    "INACTIVE"
                ],
                "title": "UserLifecycleStatus",
                "description": "An enumeration."
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "ValidationError"
            },
            "Vendor": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "A user friendly name for the vendor"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ],
                "title": "Vendor"
            },
            "VendorAgreement": {
                "properties": {
                    "id": {
                        "type": "string",
                        "title": "Id",
                        "description": "A unique identifier for this Vendor Agreement"
                    },
                    "vendor": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Vendor"
                            }
                        ],
                        "title": "Vendor",
                        "description": "The vendor in which the agreement is created for"
                    },
                    "start_date": {
                        "type": "string",
                        "format": "date",
                        "title": "Start Date",
                        "description": "The start of the current term"
                    },
                    "end_date": {
                        "type": "string",
                        "format": "date",
                        "title": "End Date",
                        "description": "The end of the current term"
                    },
                    "opt_out_date": {
                        "type": "string",
                        "format": "date",
                        "title": "Opt Out Date",
                        "description": "The date by which the vendor must be notified if you want to terminate the agreement"
                    },
                    "total_contract_cost": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Cost"
                            }
                        ],
                        "title": "Total Contract Cost",
                        "description": "The total cost of the current service term, including all line items and true ups, and including future years for multi-year agreements."
                    },
                    "line_items": {
                        "items": {
                            "$ref": "#/components/schemas/LineItem"
                        },
                        "type": "array",
                        "title": "Line Items",
                        "description": "The list of currently active line items for this Vendor Agreement. If there are no currently active line items, the most recent set of line items is returned."
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "vendor",
                    "start_date",
                    "end_date",
                    "opt_out_date",
                    "total_contract_cost",
                    "line_items"
                ],
                "title": "VendorAgreement"
            }
        },
        "securitySchemes": {
            "HTTPBearer": {
                "type": "http",
                "scheme": "bearer"
            }
        }
    }
}